
Lekcja14_HC_SR04_7seg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800a768  0800a768  0001a768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab94  0800ab94  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab94  0800ab94  0001ab94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab9c  0800ab9c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab9c  0800ab9c  0001ab9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aba0  0800aba0  0001aba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800aba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  200001dc  0800ad80  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  0800ad80  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017294  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fc3  00000000  00000000  000374a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  0003a468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d8  00000000  00000000  0003b898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ab6f  00000000  00000000  0003cb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001874d  00000000  00000000  000676df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109c3d  00000000  00000000  0007fe2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00189a69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000653c  00000000  00000000  00189abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a750 	.word	0x0800a750

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800a750 	.word	0x0800a750

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
 8000fac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fae:	4b30      	ldr	r3, [pc, #192]	; (8001070 <MX_ADC1_Init+0xe4>)
 8000fb0:	4a30      	ldr	r2, [pc, #192]	; (8001074 <MX_ADC1_Init+0xe8>)
 8000fb2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fb4:	4b2e      	ldr	r3, [pc, #184]	; (8001070 <MX_ADC1_Init+0xe4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fba:	4b2d      	ldr	r3, [pc, #180]	; (8001070 <MX_ADC1_Init+0xe4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc0:	4b2b      	ldr	r3, [pc, #172]	; (8001070 <MX_ADC1_Init+0xe4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fc6:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <MX_ADC1_Init+0xe4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fcc:	4b28      	ldr	r3, [pc, #160]	; (8001070 <MX_ADC1_Init+0xe4>)
 8000fce:	2204      	movs	r2, #4
 8000fd0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fd2:	4b27      	ldr	r3, [pc, #156]	; (8001070 <MX_ADC1_Init+0xe4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fd8:	4b25      	ldr	r3, [pc, #148]	; (8001070 <MX_ADC1_Init+0xe4>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000fde:	4b24      	ldr	r3, [pc, #144]	; (8001070 <MX_ADC1_Init+0xe4>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fe4:	4b22      	ldr	r3, [pc, #136]	; (8001070 <MX_ADC1_Init+0xe4>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fec:	4b20      	ldr	r3, [pc, #128]	; (8001070 <MX_ADC1_Init+0xe4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <MX_ADC1_Init+0xe4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <MX_ADC1_Init+0xe4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001000:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <MX_ADC1_Init+0xe4>)
 8001002:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001006:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001008:	4b19      	ldr	r3, [pc, #100]	; (8001070 <MX_ADC1_Init+0xe4>)
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001010:	4817      	ldr	r0, [pc, #92]	; (8001070 <MX_ADC1_Init+0xe4>)
 8001012:	f001 fb0d 	bl	8002630 <HAL_ADC_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800101c:	f000 fadc 	bl	80015d8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4619      	mov	r1, r3
 800102a:	4811      	ldr	r0, [pc, #68]	; (8001070 <MX_ADC1_Init+0xe4>)
 800102c:	f002 faa6 	bl	800357c <HAL_ADCEx_MultiModeConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001036:	f000 facf 	bl	80015d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <MX_ADC1_Init+0xec>)
 800103c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800103e:	2306      	movs	r3, #6
 8001040:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001042:	2307      	movs	r3, #7
 8001044:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001046:	237f      	movs	r3, #127	; 0x7f
 8001048:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800104a:	2304      	movs	r3, #4
 800104c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	4619      	mov	r1, r3
 8001056:	4806      	ldr	r0, [pc, #24]	; (8001070 <MX_ADC1_Init+0xe4>)
 8001058:	f001 fd08 	bl	8002a6c <HAL_ADC_ConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8001062:	f000 fab9 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	3728      	adds	r7, #40	; 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200001f8 	.word	0x200001f8
 8001074:	50040000 	.word	0x50040000
 8001078:	3ef08000 	.word	0x3ef08000

0800107c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b0ac      	sub	sp, #176	; 0xb0
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2288      	movs	r2, #136	; 0x88
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f006 fe39 	bl	8007d14 <memset>
  if(adcHandle->Instance==ADC1)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a27      	ldr	r2, [pc, #156]	; (8001144 <HAL_ADC_MspInit+0xc8>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d146      	bne.n	800113a <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010b0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80010ba:	2301      	movs	r3, #1
 80010bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010be:	2301      	movs	r3, #1
 80010c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80010c2:	2310      	movs	r3, #16
 80010c4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010c6:	2307      	movs	r3, #7
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010ca:	2302      	movs	r3, #2
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010ce:	2302      	movs	r3, #2
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80010d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 fe5b 	bl	8004d98 <HAL_RCCEx_PeriphCLKConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80010e8:	f000 fa76 	bl	80015d8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010ec:	4b16      	ldr	r3, [pc, #88]	; (8001148 <HAL_ADC_MspInit+0xcc>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f0:	4a15      	ldr	r2, [pc, #84]	; (8001148 <HAL_ADC_MspInit+0xcc>)
 80010f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <HAL_ADC_MspInit+0xcc>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <HAL_ADC_MspInit+0xcc>)
 8001106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001108:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <HAL_ADC_MspInit+0xcc>)
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <HAL_ADC_MspInit+0xcc>)
 8001112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800111c:	2301      	movs	r3, #1
 800111e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001122:	230b      	movs	r3, #11
 8001124:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001132:	4619      	mov	r1, r3
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <HAL_ADC_MspInit+0xd0>)
 8001136:	f002 fbe3 	bl	8003900 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800113a:	bf00      	nop
 800113c:	37b0      	adds	r7, #176	; 0xb0
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	50040000 	.word	0x50040000
 8001148:	40021000 	.word	0x40021000
 800114c:	48000400 	.word	0x48000400

08001150 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	4b3e      	ldr	r3, [pc, #248]	; (8001260 <MX_GPIO_Init+0x110>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	4a3d      	ldr	r2, [pc, #244]	; (8001260 <MX_GPIO_Init+0x110>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001172:	4b3b      	ldr	r3, [pc, #236]	; (8001260 <MX_GPIO_Init+0x110>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117e:	4b38      	ldr	r3, [pc, #224]	; (8001260 <MX_GPIO_Init+0x110>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001182:	4a37      	ldr	r2, [pc, #220]	; (8001260 <MX_GPIO_Init+0x110>)
 8001184:	f043 0304 	orr.w	r3, r3, #4
 8001188:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118a:	4b35      	ldr	r3, [pc, #212]	; (8001260 <MX_GPIO_Init+0x110>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	4b32      	ldr	r3, [pc, #200]	; (8001260 <MX_GPIO_Init+0x110>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119a:	4a31      	ldr	r2, [pc, #196]	; (8001260 <MX_GPIO_Init+0x110>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a2:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <MX_GPIO_Init+0x110>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2110      	movs	r1, #16
 80011b2:	482c      	ldr	r0, [pc, #176]	; (8001264 <MX_GPIO_Init+0x114>)
 80011b4:	f002 fd4e 	bl	8003c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_C_Pin|SEG_E_Pin|SEG_D_Pin|SEG_A_Pin
 80011b8:	2200      	movs	r2, #0
 80011ba:	f64e 0106 	movw	r1, #59398	; 0xe806
 80011be:	482a      	ldr	r0, [pc, #168]	; (8001268 <MX_GPIO_Init+0x118>)
 80011c0:	f002 fd48 	bl	8003c54 <HAL_GPIO_WritePin>
                          |SEG_F_Pin|SEG_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ca:	4827      	ldr	r0, [pc, #156]	; (8001268 <MX_GPIO_Init+0x118>)
 80011cc:	f002 fd42 	bl	8003c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 80011d0:	2201      	movs	r2, #1
 80011d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011da:	f002 fd3b 	bl	8003c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SEG_G_Pin;
 80011de:	2310      	movs	r3, #16
 80011e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SEG_G_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	4619      	mov	r1, r3
 80011f4:	481b      	ldr	r0, [pc, #108]	; (8001264 <MX_GPIO_Init+0x114>)
 80011f6:	f002 fb83 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = SEG_C_Pin|SEG_E_Pin|SEG_D_Pin|SEG_A_Pin
 80011fa:	f64e 0306 	movw	r3, #59398	; 0xe806
 80011fe:	60fb      	str	r3, [r7, #12]
                          |SEG_F_Pin|SEG_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	2301      	movs	r3, #1
 8001202:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	4619      	mov	r1, r3
 8001212:	4815      	ldr	r0, [pc, #84]	; (8001268 <MX_GPIO_Init+0x118>)
 8001214:	f002 fb74 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SEG_1_Pin;
 8001218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800121e:	2311      	movs	r3, #17
 8001220:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SEG_1_GPIO_Port, &GPIO_InitStruct);
 800122a:	f107 030c 	add.w	r3, r7, #12
 800122e:	4619      	mov	r1, r3
 8001230:	480d      	ldr	r0, [pc, #52]	; (8001268 <MX_GPIO_Init+0x118>)
 8001232:	f002 fb65 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SEG_2_Pin;
 8001236:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800123a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800123c:	2311      	movs	r3, #17
 800123e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SEG_2_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	4619      	mov	r1, r3
 800124e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001252:	f002 fb55 	bl	8003900 <HAL_GPIO_Init>

}
 8001256:	bf00      	nop
 8001258:	3720      	adds	r7, #32
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000
 8001264:	48000800 	.word	0x48000800
 8001268:	48000400 	.word	0x48000400

0800126c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b0a      	cmp	r3, #10
 8001278:	d102      	bne.n	8001280 <__io_putchar+0x14>
		__io_putchar('\r');
 800127a:	200d      	movs	r0, #13
 800127c:	f7ff fff6 	bl	800126c <__io_putchar>
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001280:	1d39      	adds	r1, r7, #4
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	2201      	movs	r2, #1
 8001288:	4803      	ldr	r0, [pc, #12]	; (8001298 <__io_putchar+0x2c>)
 800128a:	f006 f81d 	bl	80072c8 <HAL_UART_Transmit>

	return 1;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000380 	.word	0x20000380
 800129c:	00000000 	.word	0x00000000

080012a0 <calc_sound_speed>:

static float calc_sound_speed(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
	uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 80012a6:	4828      	ldr	r0, [pc, #160]	; (8001348 <calc_sound_speed+0xa8>)
 80012a8:	f001 fbd2 	bl	8002a50 <HAL_ADC_GetValue>
 80012ac:	6078      	str	r0, [r7, #4]
	float temp = adc_value * 330.0 / 4096.0 / 4.0;	//dzielenie przez 4 bo takie wzmocnienie ma ustawiony OPAMP
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff f928 	bl	8000504 <__aeabi_ui2d>
 80012b4:	a31e      	add	r3, pc, #120	; (adr r3, 8001330 <calc_sound_speed+0x90>)
 80012b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ba:	f7ff f99d 	bl	80005f8 <__aeabi_dmul>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	f04f 0200 	mov.w	r2, #0
 80012ca:	4b20      	ldr	r3, [pc, #128]	; (800134c <calc_sound_speed+0xac>)
 80012cc:	f7ff fabe 	bl	800084c <__aeabi_ddiv>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <calc_sound_speed+0xb0>)
 80012de:	f7ff fab5 	bl	800084c <__aeabi_ddiv>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff fc7d 	bl	8000be8 <__aeabi_d2f>
 80012ee:	4603      	mov	r3, r0
 80012f0:	603b      	str	r3, [r7, #0]
	return 331.8 + 0.6 * temp;
 80012f2:	6838      	ldr	r0, [r7, #0]
 80012f4:	f7ff f928 	bl	8000548 <__aeabi_f2d>
 80012f8:	a30f      	add	r3, pc, #60	; (adr r3, 8001338 <calc_sound_speed+0x98>)
 80012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fe:	f7ff f97b 	bl	80005f8 <__aeabi_dmul>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4610      	mov	r0, r2
 8001308:	4619      	mov	r1, r3
 800130a:	a30d      	add	r3, pc, #52	; (adr r3, 8001340 <calc_sound_speed+0xa0>)
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	f7fe ffbc 	bl	800028c <__adddf3>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4610      	mov	r0, r2
 800131a:	4619      	mov	r1, r3
 800131c:	f7ff fc64 	bl	8000be8 <__aeabi_d2f>
 8001320:	4603      	mov	r3, r0
 8001322:	ee07 3a90 	vmov	s15, r3
}
 8001326:	eeb0 0a67 	vmov.f32	s0, s15
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	00000000 	.word	0x00000000
 8001334:	4074a000 	.word	0x4074a000
 8001338:	33333333 	.word	0x33333333
 800133c:	3fe33333 	.word	0x3fe33333
 8001340:	cccccccd 	.word	0xcccccccd
 8001344:	4074bccc 	.word	0x4074bccc
 8001348:	200001f8 	.word	0x200001f8
 800134c:	40b00000 	.word	0x40b00000
 8001350:	40100000 	.word	0x40100000
 8001354:	00000000 	.word	0x00000000

08001358 <update_rgb>:

#define TIM3_PWM_PERIOD 5000
void update_rgb(uint32_t distance)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	uint32_t distance_limited;
	if (distance >  30) distance_limited = 30;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b1e      	cmp	r3, #30
 8001364:	d902      	bls.n	800136c <update_rgb+0x14>
 8001366:	231e      	movs	r3, #30
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	e001      	b.n	8001370 <update_rgb+0x18>
	else distance_limited = distance;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	617b      	str	r3, [r7, #20]

	uint32_t duty_red = (30 - distance_limited)/30.0 * TIM3_PWM_PERIOD;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	f1c3 031e 	rsb	r3, r3, #30
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f8c4 	bl	8000504 <__aeabi_ui2d>
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <update_rgb+0xa8>)
 8001382:	f7ff fa63 	bl	800084c <__aeabi_ddiv>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4610      	mov	r0, r2
 800138c:	4619      	mov	r1, r3
 800138e:	a31a      	add	r3, pc, #104	; (adr r3, 80013f8 <update_rgb+0xa0>)
 8001390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001394:	f7ff f930 	bl	80005f8 <__aeabi_dmul>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4610      	mov	r0, r2
 800139e:	4619      	mov	r1, r3
 80013a0:	f7ff fc02 	bl	8000ba8 <__aeabi_d2uiz>
 80013a4:	4603      	mov	r3, r0
 80013a6:	613b      	str	r3, [r7, #16]
	uint32_t duty_green = distance_limited/30.0 * TIM3_PWM_PERIOD;
 80013a8:	6978      	ldr	r0, [r7, #20]
 80013aa:	f7ff f8ab 	bl	8000504 <__aeabi_ui2d>
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	4b13      	ldr	r3, [pc, #76]	; (8001400 <update_rgb+0xa8>)
 80013b4:	f7ff fa4a 	bl	800084c <__aeabi_ddiv>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	a30d      	add	r3, pc, #52	; (adr r3, 80013f8 <update_rgb+0xa0>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	f7ff f917 	bl	80005f8 <__aeabi_dmul>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	f7ff fbe9 	bl	8000ba8 <__aeabi_d2uiz>
 80013d6:	4603      	mov	r3, r0
 80013d8:	60fb      	str	r3, [r7, #12]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_red);
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <update_rgb+0xac>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_green);
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <update_rgb+0xac>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80013ea:	bf00      	nop
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	f3af 8000 	nop.w
 80013f8:	00000000 	.word	0x00000000
 80013fc:	40b38800 	.word	0x40b38800
 8001400:	403e0000 	.word	0x403e0000
 8001404:	200002e8 	.word	0x200002e8

08001408 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	ed2d 8b02 	vpush	{d8}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a22      	ldr	r2, [pc, #136]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d12e      	bne.n	800147a <HAL_TIM_PeriodElapsedCallback+0x72>
	{
		uint32_t start = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 800141c:	2100      	movs	r1, #0
 800141e:	4820      	ldr	r0, [pc, #128]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001420:	f005 f89e 	bl	8006560 <HAL_TIM_ReadCapturedValue>
 8001424:	6178      	str	r0, [r7, #20]
		uint32_t stop = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 8001426:	2104      	movs	r1, #4
 8001428:	481d      	ldr	r0, [pc, #116]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800142a:	f005 f899 	bl	8006560 <HAL_TIM_ReadCapturedValue>
 800142e:	6138      	str	r0, [r7, #16]
		uint32_t distance = (stop-start) * calc_sound_speed() / 20000.0;
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	ee07 3a90 	vmov	s15, r3
 800143a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800143e:	f7ff ff2f 	bl	80012a0 <calc_sound_speed>
 8001442:	eef0 7a40 	vmov.f32	s15, s0
 8001446:	ee68 7a27 	vmul.f32	s15, s16, s15
 800144a:	ee17 0a90 	vmov	r0, s15
 800144e:	f7ff f87b 	bl	8000548 <__aeabi_f2d>
 8001452:	a311      	add	r3, pc, #68	; (adr r3, 8001498 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001458:	f7ff f9f8 	bl	800084c <__aeabi_ddiv>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fba0 	bl	8000ba8 <__aeabi_d2uiz>
 8001468:	4603      	mov	r3, r0
 800146a:	60fb      	str	r3, [r7, #12]
		update_rgb(distance);
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f7ff ff73 	bl	8001358 <update_rgb>
		seg7_show(distance);
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f000 f9ac 	bl	80017d0 <seg7_show>
	}
	else if (htim == &htim6)
	{
		seg7_update();
	}
}
 8001478:	e005      	b.n	8001486 <HAL_TIM_PeriodElapsedCallback+0x7e>
	else if (htim == &htim6)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a09      	ldr	r2, [pc, #36]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d101      	bne.n	8001486 <HAL_TIM_PeriodElapsedCallback+0x7e>
		seg7_update();
 8001482:	f000 f9b5 	bl	80017f0 <seg7_update>
}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	ecbd 8b02 	vpop	{d8}
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	f3af 8000 	nop.w
 8001498:	00000000 	.word	0x00000000
 800149c:	40d38800 	.word	0x40d38800
 80014a0:	2000029c 	.word	0x2000029c
 80014a4:	20000334 	.word	0x20000334

080014a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ac:	f000 fe3f 	bl	800212e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b0:	f000 f840 	bl	8001534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b4:	f7ff fe4c 	bl	8001150 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014b8:	f000 fd84 	bl	8001fc4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80014bc:	f000 fb2e 	bl	8001b1c <MX_TIM2_Init>
  MX_TIM6_Init();
 80014c0:	f000 fc58 	bl	8001d74 <MX_TIM6_Init>
  MX_ADC1_Init();
 80014c4:	f7ff fd62 	bl	8000f8c <MX_ADC1_Init>
  MX_OPAMP2_Init();
 80014c8:	f000 f88c 	bl	80015e4 <MX_OPAMP2_Init>
  MX_TIM3_Init();
 80014cc:	f000 fbd0 	bl	8001c70 <MX_TIM3_Init>
  // pomiar czasu jest skomplikowany, bo kanaly mierza czas od rozpoczecia zbocza PWM na kanale 3
  // do zbocza rosnacego/opadajacego sygnalu na kanale 1, czyli mierzymy czas od rozpoczecia wzbudzenia
  // pomiaru do rozpoczecia/zakonczenia odpowiedzi czujnika
  // inicjalizujemy takze generowanie przerwan przez TIM2, w ktorych odczytywane sa
  // pomiary odleglosci i wysylane na wyswietlacz 7seg.
  HAL_TIM_Base_Start_IT(&htim2);
 80014d0:	4813      	ldr	r0, [pc, #76]	; (8001520 <main+0x78>)
 80014d2:	f004 f975 	bl	80057c0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 80014d6:	2100      	movs	r1, #0
 80014d8:	4811      	ldr	r0, [pc, #68]	; (8001520 <main+0x78>)
 80014da:	f004 fbab 	bl	8005c34 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 80014de:	2104      	movs	r1, #4
 80014e0:	480f      	ldr	r0, [pc, #60]	; (8001520 <main+0x78>)
 80014e2:	f004 fba7 	bl	8005c34 <HAL_TIM_IC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80014e6:	2108      	movs	r1, #8
 80014e8:	480d      	ldr	r0, [pc, #52]	; (8001520 <main+0x78>)
 80014ea:	f004 fa3b 	bl	8005964 <HAL_TIM_PWM_Start>
  // inicjalizacja timera TIM6 ktory bedzie generowal przerwanie, w ktorym
  // wyswietlacz 7seg. bedzie multipleksowany
  HAL_TIM_Base_Start_IT(&htim6);
 80014ee:	480d      	ldr	r0, [pc, #52]	; (8001524 <main+0x7c>)
 80014f0:	f004 f966 	bl	80057c0 <HAL_TIM_Base_Start_IT>
  // inicjalizacjia odczytu ADC temperatury z analogowego czujnika
  // inicjalizacja wzmacniacza operacyjnego 4x wzmacniajacego sygnal analogowy
  // z termometru
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80014f4:	217f      	movs	r1, #127	; 0x7f
 80014f6:	480c      	ldr	r0, [pc, #48]	; (8001528 <main+0x80>)
 80014f8:	f001 ffe0 	bl	80034bc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 80014fc:	480a      	ldr	r0, [pc, #40]	; (8001528 <main+0x80>)
 80014fe:	f001 f9ed 	bl	80028dc <HAL_ADC_Start>
  HAL_OPAMP_SelfCalibrate(&hopamp2);
 8001502:	480a      	ldr	r0, [pc, #40]	; (800152c <main+0x84>)
 8001504:	f002 fcc5 	bl	8003e92 <HAL_OPAMP_SelfCalibrate>
  HAL_OPAMP_Start(&hopamp2);
 8001508:	4808      	ldr	r0, [pc, #32]	; (800152c <main+0x84>)
 800150a:	f002 fc91 	bl	8003e30 <HAL_OPAMP_Start>
  // inicjalizacja TIM3, ktory generuje PWM sterujacy dioda RGB (2 kanaly, kolory R i G, B niepodpiety)
  // aktualizacja wypelnienia poszczegolnych kolorow w przerwaniu od TIM2 czyli po odczycie nowej odleglosci
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800150e:	2100      	movs	r1, #0
 8001510:	4807      	ldr	r0, [pc, #28]	; (8001530 <main+0x88>)
 8001512:	f004 fa27 	bl	8005964 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001516:	2104      	movs	r1, #4
 8001518:	4805      	ldr	r0, [pc, #20]	; (8001530 <main+0x88>)
 800151a:	f004 fa23 	bl	8005964 <HAL_TIM_PWM_Start>

  while (1)
 800151e:	e7fe      	b.n	800151e <main+0x76>
 8001520:	2000029c 	.word	0x2000029c
 8001524:	20000334 	.word	0x20000334
 8001528:	200001f8 	.word	0x200001f8
 800152c:	2000025c 	.word	0x2000025c
 8001530:	200002e8 	.word	0x200002e8

08001534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b096      	sub	sp, #88	; 0x58
 8001538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	2244      	movs	r2, #68	; 0x44
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f006 fbe6 	bl	8007d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001548:	463b      	mov	r3, r7
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001556:	f44f 7000 	mov.w	r0, #512	; 0x200
 800155a:	f002 fdc7 	bl	80040ec <HAL_PWREx_ControlVoltageScaling>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001564:	f000 f838 	bl	80015d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001568:	2310      	movs	r3, #16
 800156a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800156c:	2301      	movs	r3, #1
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001574:	2360      	movs	r3, #96	; 0x60
 8001576:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001578:	2302      	movs	r3, #2
 800157a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800157c:	2301      	movs	r3, #1
 800157e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001580:	2301      	movs	r3, #1
 8001582:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001584:	2328      	movs	r3, #40	; 0x28
 8001586:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001588:	2307      	movs	r3, #7
 800158a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800158c:	2302      	movs	r3, #2
 800158e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001590:	2302      	movs	r3, #2
 8001592:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4618      	mov	r0, r3
 800159a:	f002 fdfd 	bl	8004198 <HAL_RCC_OscConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80015a4:	f000 f818 	bl	80015d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a8:	230f      	movs	r3, #15
 80015aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ac:	2303      	movs	r3, #3
 80015ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015bc:	463b      	mov	r3, r7
 80015be:	2104      	movs	r1, #4
 80015c0:	4618      	mov	r0, r3
 80015c2:	f003 f9c5 	bl	8004950 <HAL_RCC_ClockConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80015cc:	f000 f804 	bl	80015d8 <Error_Handler>
  }
}
 80015d0:	bf00      	nop
 80015d2:	3758      	adds	r7, #88	; 0x58
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015dc:	b672      	cpsid	i
}
 80015de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <Error_Handler+0x8>
	...

080015e4 <MX_OPAMP2_Init>:

OPAMP_HandleTypeDef hopamp2;

/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <MX_OPAMP2_Init+0x4c>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <MX_OPAMP2_Init+0x50>)
 80015ec:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerSupplyRange = OPAMP_POWERSUPPLY_HIGH;
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <MX_OPAMP2_Init+0x4c>)
 80015f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80015f4:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_OPAMP2_Init+0x4c>)
 80015f8:	2208      	movs	r2, #8
 80015fa:	60da      	str	r2, [r3, #12]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_OPAMP2_Init+0x4c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	615a      	str	r2, [r3, #20]
  hopamp2.Init.InvertingInput = OPAMP_INVERTINGINPUT_CONNECT_NO;
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <MX_OPAMP2_Init+0x4c>)
 8001604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001608:	611a      	str	r2, [r3, #16]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_4;
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_OPAMP2_Init+0x4c>)
 800160c:	2210      	movs	r2, #16
 800160e:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER;
 8001610:	4b07      	ldr	r3, [pc, #28]	; (8001630 <MX_OPAMP2_Init+0x4c>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <MX_OPAMP2_Init+0x4c>)
 8001618:	2200      	movs	r2, #0
 800161a:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 800161c:	4804      	ldr	r0, [pc, #16]	; (8001630 <MX_OPAMP2_Init+0x4c>)
 800161e:	f002 fb31 	bl	8003c84 <HAL_OPAMP_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_OPAMP2_Init+0x48>
  {
    Error_Handler();
 8001628:	f7ff ffd6 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	2000025c 	.word	0x2000025c
 8001634:	40007810 	.word	0x40007810

08001638 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a21      	ldr	r2, [pc, #132]	; (80016dc <HAL_OPAMP_MspInit+0xa4>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d13c      	bne.n	80016d4 <HAL_OPAMP_MspInit+0x9c>
  {
  /* USER CODE BEGIN OPAMP2_MspInit 0 */

  /* USER CODE END OPAMP2_MspInit 0 */
    /* OPAMP2 clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 800165a:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <HAL_OPAMP_MspInit+0xa8>)
 800165c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165e:	4a20      	ldr	r2, [pc, #128]	; (80016e0 <HAL_OPAMP_MspInit+0xa8>)
 8001660:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001664:	6593      	str	r3, [r2, #88]	; 0x58
 8001666:	4b1e      	ldr	r3, [pc, #120]	; (80016e0 <HAL_OPAMP_MspInit+0xa8>)
 8001668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <HAL_OPAMP_MspInit+0xa8>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	4a1a      	ldr	r2, [pc, #104]	; (80016e0 <HAL_OPAMP_MspInit+0xa8>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <HAL_OPAMP_MspInit+0xa8>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <HAL_OPAMP_MspInit+0xa8>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <HAL_OPAMP_MspInit+0xa8>)
 8001690:	f043 0302 	orr.w	r3, r3, #2
 8001694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001696:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_OPAMP_MspInit+0xa8>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP2 GPIO Configuration
    PA6     ------> OPAMP2_VINP
    PB0     ------> OPAMP2_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016a2:	2340      	movs	r3, #64	; 0x40
 80016a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016a6:	2303      	movs	r3, #3
 80016a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4619      	mov	r1, r3
 80016b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b8:	f002 f922 	bl	8003900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016bc:	2301      	movs	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016c0:	230b      	movs	r3, #11
 80016c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	4805      	ldr	r0, [pc, #20]	; (80016e4 <HAL_OPAMP_MspInit+0xac>)
 80016d0:	f002 f916 	bl	8003900 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
}
 80016d4:	bf00      	nop
 80016d6:	3728      	adds	r7, #40	; 0x28
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40007810 	.word	0x40007810
 80016e0:	40021000 	.word	0x40021000
 80016e4:	48000400 	.word	0x48000400

080016e8 <set_output>:
#include "seg7.h"
#include <stdbool.h>
#include "gpio.h"

static void set_output(uint8_t mask)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, mask & 0x01);
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	461a      	mov	r2, r3
 80016fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001700:	481f      	ldr	r0, [pc, #124]	; (8001780 <set_output+0x98>)
 8001702:	f002 faa7 	bl	8003c54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, mask & 0x02);
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	b2db      	uxtb	r3, r3
 800170e:	461a      	mov	r2, r3
 8001710:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001714:	481a      	ldr	r0, [pc, #104]	; (8001780 <set_output+0x98>)
 8001716:	f002 fa9d 	bl	8003c54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, mask & 0x04);
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	b2db      	uxtb	r3, r3
 8001722:	461a      	mov	r2, r3
 8001724:	2102      	movs	r1, #2
 8001726:	4816      	ldr	r0, [pc, #88]	; (8001780 <set_output+0x98>)
 8001728:	f002 fa94 	bl	8003c54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, mask & 0x08);
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	b2db      	uxtb	r3, r3
 8001734:	461a      	mov	r2, r3
 8001736:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800173a:	4811      	ldr	r0, [pc, #68]	; (8001780 <set_output+0x98>)
 800173c:	f002 fa8a 	bl	8003c54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, mask & 0x10);
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	f003 0310 	and.w	r3, r3, #16
 8001746:	b2db      	uxtb	r3, r3
 8001748:	461a      	mov	r2, r3
 800174a:	2104      	movs	r1, #4
 800174c:	480c      	ldr	r0, [pc, #48]	; (8001780 <set_output+0x98>)
 800174e:	f002 fa81 	bl	8003c54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, mask & 0x20);
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	f003 0320 	and.w	r3, r3, #32
 8001758:	b2db      	uxtb	r3, r3
 800175a:	461a      	mov	r2, r3
 800175c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001760:	4807      	ldr	r0, [pc, #28]	; (8001780 <set_output+0x98>)
 8001762:	f002 fa77 	bl	8003c54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, mask & 0x40);
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800176c:	b2db      	uxtb	r3, r3
 800176e:	461a      	mov	r2, r3
 8001770:	2110      	movs	r1, #16
 8001772:	4804      	ldr	r0, [pc, #16]	; (8001784 <set_output+0x9c>)
 8001774:	f002 fa6e 	bl	8003c54 <HAL_GPIO_WritePin>
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	48000400 	.word	0x48000400
 8001784:	48000800 	.word	0x48000800

08001788 <seg7_show_digit>:

static void seg7_show_digit(uint32_t value)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	const uint8_t digit[] =
 8001790:	4a0d      	ldr	r2, [pc, #52]	; (80017c8 <seg7_show_digit+0x40>)
 8001792:	f107 030c 	add.w	r3, r7, #12
 8001796:	ca07      	ldmia	r2, {r0, r1, r2}
 8001798:	c303      	stmia	r3!, {r0, r1}
 800179a:	801a      	strh	r2, [r3, #0]
			0b0000111,
			0b1111111,
			0b1101111
	};

	set_output(digit[value % 10]);
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <seg7_show_digit+0x44>)
 80017a0:	fba3 2301 	umull	r2, r3, r3, r1
 80017a4:	08da      	lsrs	r2, r3, #3
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	1aca      	subs	r2, r1, r3
 80017b0:	f102 0318 	add.w	r3, r2, #24
 80017b4:	443b      	add	r3, r7
 80017b6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ff94 	bl	80016e8 <set_output>
}
 80017c0:	bf00      	nop
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	0800a768 	.word	0x0800a768
 80017cc:	cccccccd 	.word	0xcccccccd

080017d0 <seg7_show>:

static uint32_t actual_value;
static uint32_t active_digit;

void seg7_show(uint32_t value)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	actual_value = value;
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <seg7_show+0x1c>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6013      	str	r3, [r2, #0]
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000290 	.word	0x20000290

080017f0 <seg7_update>:

void seg7_update(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 80017f4:	2201      	movs	r2, #1
 80017f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017fa:	4827      	ldr	r0, [pc, #156]	; (8001898 <seg7_update+0xa8>)
 80017fc:	f002 fa2a 	bl	8003c54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 8001800:	2201      	movs	r2, #1
 8001802:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180a:	f002 fa23 	bl	8003c54 <HAL_GPIO_WritePin>

	switch (active_digit)
 800180e:	4b23      	ldr	r3, [pc, #140]	; (800189c <seg7_update+0xac>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d002      	beq.n	800181c <seg7_update+0x2c>
 8001816:	2b01      	cmp	r3, #1
 8001818:	d020      	beq.n	800185c <seg7_update+0x6c>
		else						set_output(0b1000000);
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
		active_digit = 0;
		break;
	}
}
 800181a:	e03b      	b.n	8001894 <seg7_update+0xa4>
		if (actual_value < 100)		seg7_show_digit(actual_value % 10);
 800181c:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <seg7_update+0xb0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b63      	cmp	r3, #99	; 0x63
 8001822:	d80e      	bhi.n	8001842 <seg7_update+0x52>
 8001824:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <seg7_update+0xb0>)
 8001826:	6819      	ldr	r1, [r3, #0]
 8001828:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <seg7_update+0xb4>)
 800182a:	fba3 2301 	umull	r2, r3, r3, r1
 800182e:	08da      	lsrs	r2, r3, #3
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	1aca      	subs	r2, r1, r3
 800183a:	4610      	mov	r0, r2
 800183c:	f7ff ffa4 	bl	8001788 <seg7_show_digit>
 8001840:	e002      	b.n	8001848 <seg7_update+0x58>
		else						set_output(0b1000000);
 8001842:	2040      	movs	r0, #64	; 0x40
 8001844:	f7ff ff50 	bl	80016e8 <set_output>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8001848:	2200      	movs	r2, #0
 800184a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800184e:	4812      	ldr	r0, [pc, #72]	; (8001898 <seg7_update+0xa8>)
 8001850:	f002 fa00 	bl	8003c54 <HAL_GPIO_WritePin>
		active_digit = 1;
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <seg7_update+0xac>)
 8001856:	2201      	movs	r2, #1
 8001858:	601a      	str	r2, [r3, #0]
		break;
 800185a:	e01b      	b.n	8001894 <seg7_update+0xa4>
		if (actual_value < 100)		seg7_show_digit(actual_value / 10);
 800185c:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <seg7_update+0xb0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b63      	cmp	r3, #99	; 0x63
 8001862:	d809      	bhi.n	8001878 <seg7_update+0x88>
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <seg7_update+0xb0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0e      	ldr	r2, [pc, #56]	; (80018a4 <seg7_update+0xb4>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	08db      	lsrs	r3, r3, #3
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff89 	bl	8001788 <seg7_show_digit>
 8001876:	e002      	b.n	800187e <seg7_update+0x8e>
		else						set_output(0b1000000);
 8001878:	2040      	movs	r0, #64	; 0x40
 800187a:	f7ff ff35 	bl	80016e8 <set_output>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 800187e:	2200      	movs	r2, #0
 8001880:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001888:	f002 f9e4 	bl	8003c54 <HAL_GPIO_WritePin>
		active_digit = 0;
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <seg7_update+0xac>)
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
		break;
 8001892:	bf00      	nop
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	48000400 	.word	0x48000400
 800189c:	20000294 	.word	0x20000294
 80018a0:	20000290 	.word	0x20000290
 80018a4:	cccccccd 	.word	0xcccccccd

080018a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <HAL_MspInit+0x44>)
 80018b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b2:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <HAL_MspInit+0x44>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6613      	str	r3, [r2, #96]	; 0x60
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <HAL_MspInit+0x44>)
 80018bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HAL_MspInit+0x44>)
 80018c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ca:	4a08      	ldr	r2, [pc, #32]	; (80018ec <HAL_MspInit+0x44>)
 80018cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d0:	6593      	str	r3, [r2, #88]	; 0x58
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_MspInit+0x44>)
 80018d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000

080018f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <NMI_Handler+0x4>

080018f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018fa:	e7fe      	b.n	80018fa <HardFault_Handler+0x4>

080018fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <MemManage_Handler+0x4>

08001902 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001906:	e7fe      	b.n	8001906 <BusFault_Handler+0x4>

08001908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800190c:	e7fe      	b.n	800190c <UsageFault_Handler+0x4>

0800190e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193c:	f000 fc4c 	bl	80021d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}

08001944 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <TIM2_IRQHandler+0x10>)
 800194a:	f004 fa6f 	bl	8005e2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	2000029c 	.word	0x2000029c

08001958 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <TIM6_DAC_IRQHandler+0x10>)
 800195e:	f004 fa65 	bl	8005e2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000334 	.word	0x20000334

0800196c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return 1;
 8001970:	2301      	movs	r3, #1
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <_kill>:

int _kill(int pid, int sig)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001986:	f006 f99b 	bl	8007cc0 <__errno>
 800198a:	4603      	mov	r3, r0
 800198c:	2216      	movs	r2, #22
 800198e:	601a      	str	r2, [r3, #0]
  return -1;
 8001990:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <_exit>:

void _exit (int status)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff ffe7 	bl	800197c <_kill>
  while (1) {}    /* Make sure we hang here */
 80019ae:	e7fe      	b.n	80019ae <_exit+0x12>

080019b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	e00a      	b.n	80019d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019c2:	f3af 8000 	nop.w
 80019c6:	4601      	mov	r1, r0
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	60ba      	str	r2, [r7, #8]
 80019ce:	b2ca      	uxtb	r2, r1
 80019d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	3301      	adds	r3, #1
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	429a      	cmp	r2, r3
 80019de:	dbf0      	blt.n	80019c2 <_read+0x12>
  }

  return len;
 80019e0:	687b      	ldr	r3, [r7, #4]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	e009      	b.n	8001a10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	60ba      	str	r2, [r7, #8]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fc31 	bl	800126c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	dbf1      	blt.n	80019fc <_write+0x12>
  }
  return len;
 8001a18:	687b      	ldr	r3, [r7, #4]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <_close>:

int _close(int file)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a4a:	605a      	str	r2, [r3, #4]
  return 0;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <_isatty>:

int _isatty(int file)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a62:	2301      	movs	r3, #1
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a94:	4a14      	ldr	r2, [pc, #80]	; (8001ae8 <_sbrk+0x5c>)
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <_sbrk+0x60>)
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa0:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <_sbrk+0x64>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d102      	bne.n	8001aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <_sbrk+0x64>)
 8001aaa:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <_sbrk+0x68>)
 8001aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <_sbrk+0x64>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d207      	bcs.n	8001acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001abc:	f006 f900 	bl	8007cc0 <__errno>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aca:	e009      	b.n	8001ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <_sbrk+0x64>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <_sbrk+0x64>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	4a05      	ldr	r2, [pc, #20]	; (8001af0 <_sbrk+0x64>)
 8001adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ade:	68fb      	ldr	r3, [r7, #12]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20018000 	.word	0x20018000
 8001aec:	00000400 	.word	0x00000400
 8001af0:	20000298 	.word	0x20000298
 8001af4:	20000418 	.word	0x20000418

08001af8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <SystemInit+0x20>)
 8001afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b02:	4a05      	ldr	r2, [pc, #20]	; (8001b18 <SystemInit+0x20>)
 8001b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b092      	sub	sp, #72	; 0x48
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
 8001b58:	615a      	str	r2, [r3, #20]
 8001b5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b5c:	4b42      	ldr	r3, [pc, #264]	; (8001c68 <MX_TIM2_Init+0x14c>)
 8001b5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001b64:	4b40      	ldr	r3, [pc, #256]	; (8001c68 <MX_TIM2_Init+0x14c>)
 8001b66:	224f      	movs	r2, #79	; 0x4f
 8001b68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6a:	4b3f      	ldr	r3, [pc, #252]	; (8001c68 <MX_TIM2_Init+0x14c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8001b70:	4b3d      	ldr	r3, [pc, #244]	; (8001c68 <MX_TIM2_Init+0x14c>)
 8001b72:	4a3e      	ldr	r2, [pc, #248]	; (8001c6c <MX_TIM2_Init+0x150>)
 8001b74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b76:	4b3c      	ldr	r3, [pc, #240]	; (8001c68 <MX_TIM2_Init+0x14c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7c:	4b3a      	ldr	r3, [pc, #232]	; (8001c68 <MX_TIM2_Init+0x14c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b82:	4839      	ldr	r0, [pc, #228]	; (8001c68 <MX_TIM2_Init+0x14c>)
 8001b84:	f003 fdc4 	bl	8005710 <HAL_TIM_Base_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001b8e:	f7ff fd23 	bl	80015d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b96:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4832      	ldr	r0, [pc, #200]	; (8001c68 <MX_TIM2_Init+0x14c>)
 8001ba0:	f004 fc14 	bl	80063cc <HAL_TIM_ConfigClockSource>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001baa:	f7ff fd15 	bl	80015d8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001bae:	482e      	ldr	r0, [pc, #184]	; (8001c68 <MX_TIM2_Init+0x14c>)
 8001bb0:	f003 ffde 	bl	8005b70 <HAL_TIM_IC_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001bba:	f7ff fd0d 	bl	80015d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bbe:	482a      	ldr	r0, [pc, #168]	; (8001c68 <MX_TIM2_Init+0x14c>)
 8001bc0:	f003 fe6e 	bl	80058a0 <HAL_TIM_PWM_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001bca:	f7ff fd05 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4822      	ldr	r0, [pc, #136]	; (8001c68 <MX_TIM2_Init+0x14c>)
 8001bde:	f005 fa7f 	bl	80070e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8001be8:	f7ff fcf6 	bl	80015d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bfc:	f107 031c 	add.w	r3, r7, #28
 8001c00:	2200      	movs	r2, #0
 8001c02:	4619      	mov	r1, r3
 8001c04:	4818      	ldr	r0, [pc, #96]	; (8001c68 <MX_TIM2_Init+0x14c>)
 8001c06:	f004 fa30 	bl	800606a <HAL_TIM_IC_ConfigChannel>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8001c10:	f7ff fce2 	bl	80015d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001c14:	2302      	movs	r3, #2
 8001c16:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c1c:	f107 031c 	add.w	r3, r7, #28
 8001c20:	2204      	movs	r2, #4
 8001c22:	4619      	mov	r1, r3
 8001c24:	4810      	ldr	r0, [pc, #64]	; (8001c68 <MX_TIM2_Init+0x14c>)
 8001c26:	f004 fa20 	bl	800606a <HAL_TIM_IC_ConfigChannel>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8001c30:	f7ff fcd2 	bl	80015d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c34:	2360      	movs	r3, #96	; 0x60
 8001c36:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8001c38:	230a      	movs	r3, #10
 8001c3a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c44:	463b      	mov	r3, r7
 8001c46:	2208      	movs	r2, #8
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4807      	ldr	r0, [pc, #28]	; (8001c68 <MX_TIM2_Init+0x14c>)
 8001c4c:	f004 faaa 	bl	80061a4 <HAL_TIM_PWM_ConfigChannel>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM2_Init+0x13e>
  {
    Error_Handler();
 8001c56:	f7ff fcbf 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c5a:	4803      	ldr	r0, [pc, #12]	; (8001c68 <MX_TIM2_Init+0x14c>)
 8001c5c:	f000 f938 	bl	8001ed0 <HAL_TIM_MspPostInit>

}
 8001c60:	bf00      	nop
 8001c62:	3748      	adds	r7, #72	; 0x48
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	2000029c 	.word	0x2000029c
 8001c6c:	0001869f 	.word	0x0001869f

08001c70 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08e      	sub	sp, #56	; 0x38
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c84:	f107 031c 	add.w	r3, r7, #28
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c90:	463b      	mov	r3, r7
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	609a      	str	r2, [r3, #8]
 8001c9a:	60da      	str	r2, [r3, #12]
 8001c9c:	611a      	str	r2, [r3, #16]
 8001c9e:	615a      	str	r2, [r3, #20]
 8001ca0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ca2:	4b32      	ldr	r3, [pc, #200]	; (8001d6c <MX_TIM3_Init+0xfc>)
 8001ca4:	4a32      	ldr	r2, [pc, #200]	; (8001d70 <MX_TIM3_Init+0x100>)
 8001ca6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8001ca8:	4b30      	ldr	r3, [pc, #192]	; (8001d6c <MX_TIM3_Init+0xfc>)
 8001caa:	224f      	movs	r2, #79	; 0x4f
 8001cac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cae:	4b2f      	ldr	r3, [pc, #188]	; (8001d6c <MX_TIM3_Init+0xfc>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8001cb4:	4b2d      	ldr	r3, [pc, #180]	; (8001d6c <MX_TIM3_Init+0xfc>)
 8001cb6:	f241 3287 	movw	r2, #4999	; 0x1387
 8001cba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <MX_TIM3_Init+0xfc>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc2:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <MX_TIM3_Init+0xfc>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cc8:	4828      	ldr	r0, [pc, #160]	; (8001d6c <MX_TIM3_Init+0xfc>)
 8001cca:	f003 fd21 	bl	8005710 <HAL_TIM_Base_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001cd4:	f7ff fc80 	bl	80015d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4821      	ldr	r0, [pc, #132]	; (8001d6c <MX_TIM3_Init+0xfc>)
 8001ce6:	f004 fb71 	bl	80063cc <HAL_TIM_ConfigClockSource>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001cf0:	f7ff fc72 	bl	80015d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001cf4:	481d      	ldr	r0, [pc, #116]	; (8001d6c <MX_TIM3_Init+0xfc>)
 8001cf6:	f003 fdd3 	bl	80058a0 <HAL_TIM_PWM_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001d00:	f7ff fc6a 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d0c:	f107 031c 	add.w	r3, r7, #28
 8001d10:	4619      	mov	r1, r3
 8001d12:	4816      	ldr	r0, [pc, #88]	; (8001d6c <MX_TIM3_Init+0xfc>)
 8001d14:	f005 f9e4 	bl	80070e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001d1e:	f7ff fc5b 	bl	80015d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d22:	2360      	movs	r3, #96	; 0x60
 8001d24:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d32:	463b      	mov	r3, r7
 8001d34:	2200      	movs	r2, #0
 8001d36:	4619      	mov	r1, r3
 8001d38:	480c      	ldr	r0, [pc, #48]	; (8001d6c <MX_TIM3_Init+0xfc>)
 8001d3a:	f004 fa33 	bl	80061a4 <HAL_TIM_PWM_ConfigChannel>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001d44:	f7ff fc48 	bl	80015d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d48:	463b      	mov	r3, r7
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4807      	ldr	r0, [pc, #28]	; (8001d6c <MX_TIM3_Init+0xfc>)
 8001d50:	f004 fa28 	bl	80061a4 <HAL_TIM_PWM_ConfigChannel>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001d5a:	f7ff fc3d 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d5e:	4803      	ldr	r0, [pc, #12]	; (8001d6c <MX_TIM3_Init+0xfc>)
 8001d60:	f000 f8b6 	bl	8001ed0 <HAL_TIM_MspPostInit>

}
 8001d64:	bf00      	nop
 8001d66:	3738      	adds	r7, #56	; 0x38
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	200002e8 	.word	0x200002e8
 8001d70:	40000400 	.word	0x40000400

08001d74 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d7a:	1d3b      	adds	r3, r7, #4
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <MX_TIM6_Init+0x64>)
 8001d86:	4a15      	ldr	r2, [pc, #84]	; (8001ddc <MX_TIM6_Init+0x68>)
 8001d88:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8001d8a:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <MX_TIM6_Init+0x64>)
 8001d8c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001d90:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <MX_TIM6_Init+0x64>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <MX_TIM6_Init+0x64>)
 8001d9a:	2263      	movs	r2, #99	; 0x63
 8001d9c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <MX_TIM6_Init+0x64>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001da4:	480c      	ldr	r0, [pc, #48]	; (8001dd8 <MX_TIM6_Init+0x64>)
 8001da6:	f003 fcb3 	bl	8005710 <HAL_TIM_Base_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001db0:	f7ff fc12 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001db4:	2300      	movs	r3, #0
 8001db6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001dbc:	1d3b      	adds	r3, r7, #4
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <MX_TIM6_Init+0x64>)
 8001dc2:	f005 f98d 	bl	80070e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001dcc:	f7ff fc04 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000334 	.word	0x20000334
 8001ddc:	40001000 	.word	0x40001000

08001de0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08c      	sub	sp, #48	; 0x30
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e00:	d131      	bne.n	8001e66 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e02:	4b30      	ldr	r3, [pc, #192]	; (8001ec4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	4a2f      	ldr	r2, [pc, #188]	; (8001ec4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ec4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	61bb      	str	r3, [r7, #24]
 8001e18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ec4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	4a29      	ldr	r2, [pc, #164]	; (8001ec4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e26:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e32:	2301      	movs	r3, #1
 8001e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e42:	2301      	movs	r3, #1
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e46:	f107 031c 	add.w	r3, r7, #28
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e50:	f001 fd56 	bl	8003900 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 11, 0);
 8001e54:	2200      	movs	r2, #0
 8001e56:	210b      	movs	r1, #11
 8001e58:	201c      	movs	r0, #28
 8001e5a:	f001 fd1a 	bl	8003892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e5e:	201c      	movs	r0, #28
 8001e60:	f001 fd33 	bl	80038ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001e64:	e02a      	b.n	8001ebc <HAL_TIM_Base_MspInit+0xdc>
  else if(tim_baseHandle->Instance==TIM3)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a17      	ldr	r2, [pc, #92]	; (8001ec8 <HAL_TIM_Base_MspInit+0xe8>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d10c      	bne.n	8001e8a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e70:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e74:	4a13      	ldr	r2, [pc, #76]	; (8001ec4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e76:	f043 0302 	orr.w	r3, r3, #2
 8001e7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	693b      	ldr	r3, [r7, #16]
}
 8001e88:	e018      	b.n	8001ebc <HAL_TIM_Base_MspInit+0xdc>
  else if(tim_baseHandle->Instance==TIM6)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a0f      	ldr	r2, [pc, #60]	; (8001ecc <HAL_TIM_Base_MspInit+0xec>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d113      	bne.n	8001ebc <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e9a:	f043 0310 	orr.w	r3, r3, #16
 8001e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_TIM_Base_MspInit+0xe4>)
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 10, 0);
 8001eac:	2200      	movs	r2, #0
 8001eae:	210a      	movs	r1, #10
 8001eb0:	2036      	movs	r0, #54	; 0x36
 8001eb2:	f001 fcee 	bl	8003892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001eb6:	2036      	movs	r0, #54	; 0x36
 8001eb8:	f001 fd07 	bl	80038ca <HAL_NVIC_EnableIRQ>
}
 8001ebc:	bf00      	nop
 8001ebe:	3730      	adds	r7, #48	; 0x30
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40000400 	.word	0x40000400
 8001ecc:	40001000 	.word	0x40001000

08001ed0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08a      	sub	sp, #40	; 0x28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef0:	d11d      	bne.n	8001f2e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef2:	4b30      	ldr	r3, [pc, #192]	; (8001fb4 <HAL_TIM_MspPostInit+0xe4>)
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef6:	4a2f      	ldr	r2, [pc, #188]	; (8001fb4 <HAL_TIM_MspPostInit+0xe4>)
 8001ef8:	f043 0302 	orr.w	r3, r3, #2
 8001efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001efe:	4b2d      	ldr	r3, [pc, #180]	; (8001fb4 <HAL_TIM_MspPostInit+0xe4>)
 8001f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4619      	mov	r1, r3
 8001f26:	4824      	ldr	r0, [pc, #144]	; (8001fb8 <HAL_TIM_MspPostInit+0xe8>)
 8001f28:	f001 fcea 	bl	8003900 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f2c:	e03d      	b.n	8001faa <HAL_TIM_MspPostInit+0xda>
  else if(timHandle->Instance==TIM3)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a22      	ldr	r2, [pc, #136]	; (8001fbc <HAL_TIM_MspPostInit+0xec>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d138      	bne.n	8001faa <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f38:	4b1e      	ldr	r3, [pc, #120]	; (8001fb4 <HAL_TIM_MspPostInit+0xe4>)
 8001f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3c:	4a1d      	ldr	r2, [pc, #116]	; (8001fb4 <HAL_TIM_MspPostInit+0xe4>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f44:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <HAL_TIM_MspPostInit+0xe4>)
 8001f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f50:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <HAL_TIM_MspPostInit+0xe4>)
 8001f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f54:	4a17      	ldr	r2, [pc, #92]	; (8001fb4 <HAL_TIM_MspPostInit+0xe4>)
 8001f56:	f043 0304 	orr.w	r3, r3, #4
 8001f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5c:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <HAL_TIM_MspPostInit+0xe4>)
 8001f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2300      	movs	r3, #0
 8001f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	4619      	mov	r1, r3
 8001f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f86:	f001 fcbb 	bl	8003900 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f8a:	2340      	movs	r3, #64	; 0x40
 8001f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4806      	ldr	r0, [pc, #24]	; (8001fc0 <HAL_TIM_MspPostInit+0xf0>)
 8001fa6:	f001 fcab 	bl	8003900 <HAL_GPIO_Init>
}
 8001faa:	bf00      	nop
 8001fac:	3728      	adds	r7, #40	; 0x28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	48000400 	.word	0x48000400
 8001fbc:	40000400 	.word	0x40000400
 8001fc0:	48000800 	.word	0x48000800

08001fc4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <MX_USART2_UART_Init+0x58>)
 8001fca:	4a15      	ldr	r2, [pc, #84]	; (8002020 <MX_USART2_UART_Init+0x5c>)
 8001fcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fce:	4b13      	ldr	r3, [pc, #76]	; (800201c <MX_USART2_UART_Init+0x58>)
 8001fd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <MX_USART2_UART_Init+0x58>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <MX_USART2_UART_Init+0x58>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <MX_USART2_UART_Init+0x58>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <MX_USART2_UART_Init+0x58>)
 8001fea:	220c      	movs	r2, #12
 8001fec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fee:	4b0b      	ldr	r3, [pc, #44]	; (800201c <MX_USART2_UART_Init+0x58>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <MX_USART2_UART_Init+0x58>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <MX_USART2_UART_Init+0x58>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <MX_USART2_UART_Init+0x58>)
 8002002:	2200      	movs	r2, #0
 8002004:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002006:	4805      	ldr	r0, [pc, #20]	; (800201c <MX_USART2_UART_Init+0x58>)
 8002008:	f005 f910 	bl	800722c <HAL_UART_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002012:	f7ff fae1 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000380 	.word	0x20000380
 8002020:	40004400 	.word	0x40004400

08002024 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b0ac      	sub	sp, #176	; 0xb0
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	2288      	movs	r2, #136	; 0x88
 8002042:	2100      	movs	r1, #0
 8002044:	4618      	mov	r0, r3
 8002046:	f005 fe65 	bl	8007d14 <memset>
  if(uartHandle->Instance==USART2)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a21      	ldr	r2, [pc, #132]	; (80020d4 <HAL_UART_MspInit+0xb0>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d13b      	bne.n	80020cc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002054:	2302      	movs	r3, #2
 8002056:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002058:	2300      	movs	r3, #0
 800205a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	4618      	mov	r0, r3
 8002062:	f002 fe99 	bl	8004d98 <HAL_RCCEx_PeriphCLKConfig>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800206c:	f7ff fab4 	bl	80015d8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002070:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <HAL_UART_MspInit+0xb4>)
 8002072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002074:	4a18      	ldr	r2, [pc, #96]	; (80020d8 <HAL_UART_MspInit+0xb4>)
 8002076:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800207a:	6593      	str	r3, [r2, #88]	; 0x58
 800207c:	4b16      	ldr	r3, [pc, #88]	; (80020d8 <HAL_UART_MspInit+0xb4>)
 800207e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002088:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <HAL_UART_MspInit+0xb4>)
 800208a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208c:	4a12      	ldr	r2, [pc, #72]	; (80020d8 <HAL_UART_MspInit+0xb4>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002094:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <HAL_UART_MspInit+0xb4>)
 8002096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020a0:	230c      	movs	r3, #12
 80020a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a6:	2302      	movs	r3, #2
 80020a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b2:	2303      	movs	r3, #3
 80020b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020b8:	2307      	movs	r3, #7
 80020ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020c2:	4619      	mov	r1, r3
 80020c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c8:	f001 fc1a 	bl	8003900 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020cc:	bf00      	nop
 80020ce:	37b0      	adds	r7, #176	; 0xb0
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40004400 	.word	0x40004400
 80020d8:	40021000 	.word	0x40021000

080020dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002114 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020e0:	f7ff fd0a 	bl	8001af8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020e4:	480c      	ldr	r0, [pc, #48]	; (8002118 <LoopForever+0x6>)
  ldr r1, =_edata
 80020e6:	490d      	ldr	r1, [pc, #52]	; (800211c <LoopForever+0xa>)
  ldr r2, =_sidata
 80020e8:	4a0d      	ldr	r2, [pc, #52]	; (8002120 <LoopForever+0xe>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020ec:	e002      	b.n	80020f4 <LoopCopyDataInit>

080020ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020f2:	3304      	adds	r3, #4

080020f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f8:	d3f9      	bcc.n	80020ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020fc:	4c0a      	ldr	r4, [pc, #40]	; (8002128 <LoopForever+0x16>)
  movs r3, #0
 80020fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002100:	e001      	b.n	8002106 <LoopFillZerobss>

08002102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002104:	3204      	adds	r2, #4

08002106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002108:	d3fb      	bcc.n	8002102 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800210a:	f005 fddf 	bl	8007ccc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800210e:	f7ff f9cb 	bl	80014a8 <main>

08002112 <LoopForever>:

LoopForever:
    b LoopForever
 8002112:	e7fe      	b.n	8002112 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002114:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800211c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002120:	0800aba4 	.word	0x0800aba4
  ldr r2, =_sbss
 8002124:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002128:	20000418 	.word	0x20000418

0800212c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800212c:	e7fe      	b.n	800212c <ADC1_2_IRQHandler>

0800212e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002138:	2003      	movs	r0, #3
 800213a:	f001 fb9f 	bl	800387c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800213e:	200f      	movs	r0, #15
 8002140:	f000 f80e 	bl	8002160 <HAL_InitTick>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d002      	beq.n	8002150 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	71fb      	strb	r3, [r7, #7]
 800214e:	e001      	b.n	8002154 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002150:	f7ff fbaa 	bl	80018a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002154:	79fb      	ldrb	r3, [r7, #7]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800216c:	4b17      	ldr	r3, [pc, #92]	; (80021cc <HAL_InitTick+0x6c>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d023      	beq.n	80021bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002174:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <HAL_InitTick+0x70>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4b14      	ldr	r3, [pc, #80]	; (80021cc <HAL_InitTick+0x6c>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	4619      	mov	r1, r3
 800217e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002182:	fbb3 f3f1 	udiv	r3, r3, r1
 8002186:	fbb2 f3f3 	udiv	r3, r2, r3
 800218a:	4618      	mov	r0, r3
 800218c:	f001 fbab 	bl	80038e6 <HAL_SYSTICK_Config>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10f      	bne.n	80021b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b0f      	cmp	r3, #15
 800219a:	d809      	bhi.n	80021b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800219c:	2200      	movs	r2, #0
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295
 80021a4:	f001 fb75 	bl	8003892 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021a8:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <HAL_InitTick+0x74>)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	e007      	b.n	80021c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
 80021b4:	e004      	b.n	80021c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	73fb      	strb	r3, [r7, #15]
 80021ba:	e001      	b.n	80021c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000008 	.word	0x20000008
 80021d0:	20000000 	.word	0x20000000
 80021d4:	20000004 	.word	0x20000004

080021d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_IncTick+0x20>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	461a      	mov	r2, r3
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_IncTick+0x24>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4413      	add	r3, r2
 80021e8:	4a04      	ldr	r2, [pc, #16]	; (80021fc <HAL_IncTick+0x24>)
 80021ea:	6013      	str	r3, [r2, #0]
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000008 	.word	0x20000008
 80021fc:	20000404 	.word	0x20000404

08002200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return uwTick;
 8002204:	4b03      	ldr	r3, [pc, #12]	; (8002214 <HAL_GetTick+0x14>)
 8002206:	681b      	ldr	r3, [r3, #0]
}
 8002208:	4618      	mov	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000404 	.word	0x20000404

08002218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002220:	f7ff ffee 	bl	8002200 <HAL_GetTick>
 8002224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002230:	d005      	beq.n	800223e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002232:	4b0a      	ldr	r3, [pc, #40]	; (800225c <HAL_Delay+0x44>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4413      	add	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800223e:	bf00      	nop
 8002240:	f7ff ffde 	bl	8002200 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	429a      	cmp	r2, r3
 800224e:	d8f7      	bhi.n	8002240 <HAL_Delay+0x28>
  {
  }
}
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000008 	.word	0x20000008

08002260 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	431a      	orrs	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	609a      	str	r2, [r3, #8]
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	609a      	str	r2, [r3, #8]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80022bc:	4618      	mov	r0, r3
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
 80022d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	3360      	adds	r3, #96	; 0x60
 80022da:	461a      	mov	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b08      	ldr	r3, [pc, #32]	; (800230c <LL_ADC_SetOffset+0x44>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	4313      	orrs	r3, r2
 80022f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002300:	bf00      	nop
 8002302:	371c      	adds	r7, #28
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	03fff000 	.word	0x03fff000

08002310 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3360      	adds	r3, #96	; 0x60
 800231e:	461a      	mov	r2, r3
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002330:	4618      	mov	r0, r3
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800233c:	b480      	push	{r7}
 800233e:	b087      	sub	sp, #28
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	3360      	adds	r3, #96	; 0x60
 800234c:	461a      	mov	r2, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	431a      	orrs	r2, r3
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002366:	bf00      	nop
 8002368:	371c      	adds	r7, #28
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002372:	b480      	push	{r7}
 8002374:	b087      	sub	sp, #28
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	3330      	adds	r3, #48	; 0x30
 8002382:	461a      	mov	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	0a1b      	lsrs	r3, r3, #8
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	4413      	add	r3, r2
 8002390:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	211f      	movs	r1, #31
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	401a      	ands	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	0e9b      	lsrs	r3, r3, #26
 80023aa:	f003 011f 	and.w	r1, r3, #31
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	f003 031f 	and.w	r3, r3, #31
 80023b4:	fa01 f303 	lsl.w	r3, r1, r3
 80023b8:	431a      	orrs	r2, r3
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023be:	bf00      	nop
 80023c0:	371c      	adds	r7, #28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b087      	sub	sp, #28
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	3314      	adds	r3, #20
 80023da:	461a      	mov	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	0e5b      	lsrs	r3, r3, #25
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	4413      	add	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	0d1b      	lsrs	r3, r3, #20
 80023f2:	f003 031f 	and.w	r3, r3, #31
 80023f6:	2107      	movs	r1, #7
 80023f8:	fa01 f303 	lsl.w	r3, r1, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	401a      	ands	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	0d1b      	lsrs	r3, r3, #20
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	431a      	orrs	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002414:	bf00      	nop
 8002416:	371c      	adds	r7, #28
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002438:	43db      	mvns	r3, r3
 800243a:	401a      	ands	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f003 0318 	and.w	r3, r3, #24
 8002442:	4908      	ldr	r1, [pc, #32]	; (8002464 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002444:	40d9      	lsrs	r1, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	400b      	ands	r3, r1
 800244a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800244e:	431a      	orrs	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002456:	bf00      	nop
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	0007ffff 	.word	0x0007ffff

08002468 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 031f 	and.w	r3, r3, #31
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002494:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6093      	str	r3, [r2, #8]
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024bc:	d101      	bne.n	80024c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80024e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002508:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800250c:	d101      	bne.n	8002512 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002530:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002534:	f043 0201 	orr.w	r2, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002558:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800255c:	f043 0202 	orr.w	r2, r3, #2
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <LL_ADC_IsEnabled+0x18>
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <LL_ADC_IsEnabled+0x1a>
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d101      	bne.n	80025ae <LL_ADC_IsDisableOngoing+0x18>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <LL_ADC_IsDisableOngoing+0x1a>
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025d0:	f043 0204 	orr.w	r2, r3, #4
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d101      	bne.n	80025fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b08      	cmp	r3, #8
 800261c:	d101      	bne.n	8002622 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002630:	b590      	push	{r4, r7, lr}
 8002632:	b089      	sub	sp, #36	; 0x24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002638:	2300      	movs	r3, #0
 800263a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800263c:	2300      	movs	r3, #0
 800263e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e136      	b.n	80028b8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002654:	2b00      	cmp	r3, #0
 8002656:	d109      	bne.n	800266c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7fe fd0f 	bl	800107c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ff19 	bl	80024a8 <LL_ADC_IsDeepPowerDownEnabled>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d004      	beq.n	8002686 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff feff 	bl	8002484 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff ff34 	bl	80024f8 <LL_ADC_IsInternalRegulatorEnabled>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d115      	bne.n	80026c2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ff18 	bl	80024d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026a0:	4b87      	ldr	r3, [pc, #540]	; (80028c0 <HAL_ADC_Init+0x290>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	099b      	lsrs	r3, r3, #6
 80026a6:	4a87      	ldr	r2, [pc, #540]	; (80028c4 <HAL_ADC_Init+0x294>)
 80026a8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ac:	099b      	lsrs	r3, r3, #6
 80026ae:	3301      	adds	r3, #1
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026b4:	e002      	b.n	80026bc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f9      	bne.n	80026b6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff ff16 	bl	80024f8 <LL_ADC_IsInternalRegulatorEnabled>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10d      	bne.n	80026ee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d6:	f043 0210 	orr.w	r2, r3, #16
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e2:	f043 0201 	orr.w	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff ff76 	bl	80025e4 <LL_ADC_REG_IsConversionOngoing>
 80026f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fe:	f003 0310 	and.w	r3, r3, #16
 8002702:	2b00      	cmp	r3, #0
 8002704:	f040 80cf 	bne.w	80028a6 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	2b00      	cmp	r3, #0
 800270c:	f040 80cb 	bne.w	80028a6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002714:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002718:	f043 0202 	orr.w	r2, r3, #2
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff23 	bl	8002570 <LL_ADC_IsEnabled>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d115      	bne.n	800275c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002730:	4865      	ldr	r0, [pc, #404]	; (80028c8 <HAL_ADC_Init+0x298>)
 8002732:	f7ff ff1d 	bl	8002570 <LL_ADC_IsEnabled>
 8002736:	4604      	mov	r4, r0
 8002738:	4864      	ldr	r0, [pc, #400]	; (80028cc <HAL_ADC_Init+0x29c>)
 800273a:	f7ff ff19 	bl	8002570 <LL_ADC_IsEnabled>
 800273e:	4603      	mov	r3, r0
 8002740:	431c      	orrs	r4, r3
 8002742:	4863      	ldr	r0, [pc, #396]	; (80028d0 <HAL_ADC_Init+0x2a0>)
 8002744:	f7ff ff14 	bl	8002570 <LL_ADC_IsEnabled>
 8002748:	4603      	mov	r3, r0
 800274a:	4323      	orrs	r3, r4
 800274c:	2b00      	cmp	r3, #0
 800274e:	d105      	bne.n	800275c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4619      	mov	r1, r3
 8002756:	485f      	ldr	r0, [pc, #380]	; (80028d4 <HAL_ADC_Init+0x2a4>)
 8002758:	f7ff fd82 	bl	8002260 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	7e5b      	ldrb	r3, [r3, #25]
 8002760:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002766:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800276c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002772:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3020 	ldrb.w	r3, [r3, #32]
 800277a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d106      	bne.n	8002798 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	3b01      	subs	r3, #1
 8002790:	045b      	lsls	r3, r3, #17
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	2b00      	cmp	r3, #0
 800279e:	d009      	beq.n	80027b4 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	4b47      	ldr	r3, [pc, #284]	; (80028d8 <HAL_ADC_Init+0x2a8>)
 80027bc:	4013      	ands	r3, r2
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6812      	ldr	r2, [r2, #0]
 80027c2:	69b9      	ldr	r1, [r7, #24]
 80027c4:	430b      	orrs	r3, r1
 80027c6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff09 	bl	80025e4 <LL_ADC_REG_IsConversionOngoing>
 80027d2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ff16 	bl	800260a <LL_ADC_INJ_IsConversionOngoing>
 80027de:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d13d      	bne.n	8002862 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d13a      	bne.n	8002862 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80027f0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027f8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002808:	f023 0302 	bic.w	r3, r3, #2
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	69b9      	ldr	r1, [r7, #24]
 8002812:	430b      	orrs	r3, r1
 8002814:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800281c:	2b01      	cmp	r3, #1
 800281e:	d118      	bne.n	8002852 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800282a:	f023 0304 	bic.w	r3, r3, #4
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002836:	4311      	orrs	r1, r2
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800283c:	4311      	orrs	r1, r2
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002842:	430a      	orrs	r2, r1
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0201 	orr.w	r2, r2, #1
 800284e:	611a      	str	r2, [r3, #16]
 8002850:	e007      	b.n	8002862 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0201 	bic.w	r2, r2, #1
 8002860:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d10c      	bne.n	8002884 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	f023 010f 	bic.w	r1, r3, #15
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	1e5a      	subs	r2, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	631a      	str	r2, [r3, #48]	; 0x30
 8002882:	e007      	b.n	8002894 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 020f 	bic.w	r2, r2, #15
 8002892:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002898:	f023 0303 	bic.w	r3, r3, #3
 800289c:	f043 0201 	orr.w	r2, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	655a      	str	r2, [r3, #84]	; 0x54
 80028a4:	e007      	b.n	80028b6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028aa:	f043 0210 	orr.w	r2, r3, #16
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3724      	adds	r7, #36	; 0x24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd90      	pop	{r4, r7, pc}
 80028c0:	20000000 	.word	0x20000000
 80028c4:	053e2d63 	.word	0x053e2d63
 80028c8:	50040000 	.word	0x50040000
 80028cc:	50040100 	.word	0x50040100
 80028d0:	50040200 	.word	0x50040200
 80028d4:	50040300 	.word	0x50040300
 80028d8:	fff0c007 	.word	0xfff0c007

080028dc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028e4:	4857      	ldr	r0, [pc, #348]	; (8002a44 <HAL_ADC_Start+0x168>)
 80028e6:	f7ff fdbf 	bl	8002468 <LL_ADC_GetMultimode>
 80028ea:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff fe77 	bl	80025e4 <LL_ADC_REG_IsConversionOngoing>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f040 809c 	bne.w	8002a36 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_ADC_Start+0x30>
 8002908:	2302      	movs	r3, #2
 800290a:	e097      	b.n	8002a3c <HAL_ADC_Start+0x160>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 fc99 	bl	800324c <ADC_Enable>
 800291a:	4603      	mov	r3, r0
 800291c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800291e:	7dfb      	ldrb	r3, [r7, #23]
 8002920:	2b00      	cmp	r3, #0
 8002922:	f040 8083 	bne.w	8002a2c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800292e:	f023 0301 	bic.w	r3, r3, #1
 8002932:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a42      	ldr	r2, [pc, #264]	; (8002a48 <HAL_ADC_Start+0x16c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d002      	beq.n	800294a <HAL_ADC_Start+0x6e>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	e000      	b.n	800294c <HAL_ADC_Start+0x70>
 800294a:	4b40      	ldr	r3, [pc, #256]	; (8002a4c <HAL_ADC_Start+0x170>)
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	4293      	cmp	r3, r2
 8002952:	d002      	beq.n	800295a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d105      	bne.n	8002966 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800296e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002972:	d106      	bne.n	8002982 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002978:	f023 0206 	bic.w	r2, r3, #6
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	659a      	str	r2, [r3, #88]	; 0x58
 8002980:	e002      	b.n	8002988 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	221c      	movs	r2, #28
 800298e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a2a      	ldr	r2, [pc, #168]	; (8002a48 <HAL_ADC_Start+0x16c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d002      	beq.n	80029a8 <HAL_ADC_Start+0xcc>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	e000      	b.n	80029aa <HAL_ADC_Start+0xce>
 80029a8:	4b28      	ldr	r3, [pc, #160]	; (8002a4c <HAL_ADC_Start+0x170>)
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6812      	ldr	r2, [r2, #0]
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d008      	beq.n	80029c4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	2b05      	cmp	r3, #5
 80029bc:	d002      	beq.n	80029c4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	2b09      	cmp	r3, #9
 80029c2:	d114      	bne.n	80029ee <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d007      	beq.n	80029e2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fde8 	bl	80025bc <LL_ADC_REG_StartConversion>
 80029ec:	e025      	b.n	8002a3a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a12      	ldr	r2, [pc, #72]	; (8002a48 <HAL_ADC_Start+0x16c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d002      	beq.n	8002a0a <HAL_ADC_Start+0x12e>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	e000      	b.n	8002a0c <HAL_ADC_Start+0x130>
 8002a0a:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <HAL_ADC_Start+0x170>)
 8002a0c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00f      	beq.n	8002a3a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	655a      	str	r2, [r3, #84]	; 0x54
 8002a2a:	e006      	b.n	8002a3a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002a34:	e001      	b.n	8002a3a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a36:	2302      	movs	r3, #2
 8002a38:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	50040300 	.word	0x50040300
 8002a48:	50040100 	.word	0x50040100
 8002a4c:	50040000 	.word	0x50040000

08002a50 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
	...

08002a6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b0b6      	sub	sp, #216	; 0xd8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x22>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e3c7      	b.n	800321e <HAL_ADC_ConfigChannel+0x7b2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fda2 	bl	80025e4 <LL_ADC_REG_IsConversionOngoing>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f040 83a8 	bne.w	80031f8 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b05      	cmp	r3, #5
 8002aae:	d824      	bhi.n	8002afa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	3b02      	subs	r3, #2
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d81b      	bhi.n	8002af2 <HAL_ADC_ConfigChannel+0x86>
 8002aba:	a201      	add	r2, pc, #4	; (adr r2, 8002ac0 <HAL_ADC_ConfigChannel+0x54>)
 8002abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac0:	08002ad1 	.word	0x08002ad1
 8002ac4:	08002ad9 	.word	0x08002ad9
 8002ac8:	08002ae1 	.word	0x08002ae1
 8002acc:	08002ae9 	.word	0x08002ae9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	220c      	movs	r2, #12
 8002ad4:	605a      	str	r2, [r3, #4]
          break;
 8002ad6:	e011      	b.n	8002afc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	2212      	movs	r2, #18
 8002adc:	605a      	str	r2, [r3, #4]
          break;
 8002ade:	e00d      	b.n	8002afc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	2218      	movs	r2, #24
 8002ae4:	605a      	str	r2, [r3, #4]
          break;
 8002ae6:	e009      	b.n	8002afc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aee:	605a      	str	r2, [r3, #4]
          break;
 8002af0:	e004      	b.n	8002afc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2206      	movs	r2, #6
 8002af6:	605a      	str	r2, [r3, #4]
          break;
 8002af8:	e000      	b.n	8002afc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002afa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6818      	ldr	r0, [r3, #0]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	6859      	ldr	r1, [r3, #4]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	f7ff fc32 	bl	8002372 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff fd66 	bl	80025e4 <LL_ADC_REG_IsConversionOngoing>
 8002b18:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fd72 	bl	800260a <LL_ADC_INJ_IsConversionOngoing>
 8002b26:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f040 81a6 	bne.w	8002e80 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f040 81a1 	bne.w	8002e80 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	6819      	ldr	r1, [r3, #0]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	f7ff fc3d 	bl	80023ca <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	08db      	lsrs	r3, r3, #3
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d00a      	beq.n	8002b88 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	6919      	ldr	r1, [r3, #16]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b82:	f7ff fba1 	bl	80022c8 <LL_ADC_SetOffset>
 8002b86:	e17b      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fbbe 	bl	8002310 <LL_ADC_GetOffsetChannel>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10a      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x148>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff fbb3 	bl	8002310 <LL_ADC_GetOffsetChannel>
 8002baa:	4603      	mov	r3, r0
 8002bac:	0e9b      	lsrs	r3, r3, #26
 8002bae:	f003 021f 	and.w	r2, r3, #31
 8002bb2:	e01e      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x186>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fba8 	bl	8002310 <LL_ADC_GetOffsetChannel>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002bca:	fa93 f3a3 	rbit	r3, r3
 8002bce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002bd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002be2:	2320      	movs	r3, #32
 8002be4:	e004      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002be6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d105      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x19e>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	0e9b      	lsrs	r3, r3, #26
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	e018      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x1d0>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c16:	fa93 f3a3 	rbit	r3, r3
 8002c1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002c1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002c26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002c2e:	2320      	movs	r3, #32
 8002c30:	e004      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002c32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d106      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2200      	movs	r2, #0
 8002c46:	2100      	movs	r1, #0
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff fb77 	bl	800233c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2101      	movs	r1, #1
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fb5b 	bl	8002310 <LL_ADC_GetOffsetChannel>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10a      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x20e>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2101      	movs	r1, #1
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fb50 	bl	8002310 <LL_ADC_GetOffsetChannel>
 8002c70:	4603      	mov	r3, r0
 8002c72:	0e9b      	lsrs	r3, r3, #26
 8002c74:	f003 021f 	and.w	r2, r3, #31
 8002c78:	e01e      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x24c>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2101      	movs	r1, #1
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fb45 	bl	8002310 <LL_ADC_GetOffsetChannel>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c90:	fa93 f3a3 	rbit	r3, r3
 8002c94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002c98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002ca0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002ca8:	2320      	movs	r3, #32
 8002caa:	e004      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002cac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cb0:	fab3 f383 	clz	r3, r3
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d105      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x264>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	0e9b      	lsrs	r3, r3, #26
 8002cca:	f003 031f 	and.w	r3, r3, #31
 8002cce:	e018      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x296>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002ce4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ce8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002cec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002cf4:	2320      	movs	r3, #32
 8002cf6:	e004      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002cf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cfc:	fab3 f383 	clz	r3, r3
 8002d00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d106      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff fb14 	bl	800233c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2102      	movs	r1, #2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff faf8 	bl	8002310 <LL_ADC_GetOffsetChannel>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10a      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x2d4>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2102      	movs	r1, #2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff faed 	bl	8002310 <LL_ADC_GetOffsetChannel>
 8002d36:	4603      	mov	r3, r0
 8002d38:	0e9b      	lsrs	r3, r3, #26
 8002d3a:	f003 021f 	and.w	r2, r3, #31
 8002d3e:	e01e      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x312>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2102      	movs	r1, #2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff fae2 	bl	8002310 <LL_ADC_GetOffsetChannel>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002d5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002d66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002d6e:	2320      	movs	r3, #32
 8002d70:	e004      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002d72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d105      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x32a>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	0e9b      	lsrs	r3, r3, #26
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	e016      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x358>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002da8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002daa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002dae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002db6:	2320      	movs	r3, #32
 8002db8:	e004      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002dba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dbe:	fab3 f383 	clz	r3, r3
 8002dc2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d106      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2102      	movs	r1, #2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff fab3 	bl	800233c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2103      	movs	r1, #3
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fa97 	bl	8002310 <LL_ADC_GetOffsetChannel>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10a      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x396>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2103      	movs	r1, #3
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff fa8c 	bl	8002310 <LL_ADC_GetOffsetChannel>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	0e9b      	lsrs	r3, r3, #26
 8002dfc:	f003 021f 	and.w	r2, r3, #31
 8002e00:	e017      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x3c6>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2103      	movs	r1, #3
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fa81 	bl	8002310 <LL_ADC_GetOffsetChannel>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002e1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e1c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002e1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002e24:	2320      	movs	r3, #32
 8002e26:	e003      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002e28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e2a:	fab3 f383 	clz	r3, r3
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d105      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x3de>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	0e9b      	lsrs	r3, r3, #26
 8002e44:	f003 031f 	and.w	r3, r3, #31
 8002e48:	e011      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x402>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e52:	fa93 f3a3 	rbit	r3, r3
 8002e56:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002e58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002e62:	2320      	movs	r3, #32
 8002e64:	e003      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e68:	fab3 f383 	clz	r3, r3
 8002e6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d106      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2200      	movs	r2, #0
 8002e78:	2103      	movs	r1, #3
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff fa5e 	bl	800233c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff fb73 	bl	8002570 <LL_ADC_IsEnabled>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f040 813f 	bne.w	8003110 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	6819      	ldr	r1, [r3, #0]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	f7ff fabe 	bl	8002420 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4a8e      	ldr	r2, [pc, #568]	; (80030e4 <HAL_ADC_ConfigChannel+0x678>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	f040 8130 	bne.w	8003110 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10b      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x46c>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	0e9b      	lsrs	r3, r3, #26
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	2b09      	cmp	r3, #9
 8002ece:	bf94      	ite	ls
 8002ed0:	2301      	movls	r3, #1
 8002ed2:	2300      	movhi	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	e019      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x4a0>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ee0:	fa93 f3a3 	rbit	r3, r3
 8002ee4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ee8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002eea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002ef0:	2320      	movs	r3, #32
 8002ef2:	e003      	b.n	8002efc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002ef4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ef6:	fab3 f383 	clz	r3, r3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	3301      	adds	r3, #1
 8002efe:	f003 031f 	and.w	r3, r3, #31
 8002f02:	2b09      	cmp	r3, #9
 8002f04:	bf94      	ite	ls
 8002f06:	2301      	movls	r3, #1
 8002f08:	2300      	movhi	r3, #0
 8002f0a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d079      	beq.n	8003004 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d107      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x4c0>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	0e9b      	lsrs	r3, r3, #26
 8002f22:	3301      	adds	r3, #1
 8002f24:	069b      	lsls	r3, r3, #26
 8002f26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f2a:	e015      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x4ec>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f34:	fa93 f3a3 	rbit	r3, r3
 8002f38:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f3c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002f44:	2320      	movs	r3, #32
 8002f46:	e003      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f4a:	fab3 f383 	clz	r3, r3
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	3301      	adds	r3, #1
 8002f52:	069b      	lsls	r3, r3, #26
 8002f54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d109      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x50c>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	0e9b      	lsrs	r3, r3, #26
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	f003 031f 	and.w	r3, r3, #31
 8002f70:	2101      	movs	r1, #1
 8002f72:	fa01 f303 	lsl.w	r3, r1, r3
 8002f76:	e017      	b.n	8002fa8 <HAL_ADC_ConfigChannel+0x53c>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f80:	fa93 f3a3 	rbit	r3, r3
 8002f84:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f88:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002f90:	2320      	movs	r3, #32
 8002f92:	e003      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f96:	fab3 f383 	clz	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	f003 031f 	and.w	r3, r3, #31
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa8:	ea42 0103 	orr.w	r1, r2, r3
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10a      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x562>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	0e9b      	lsrs	r3, r3, #26
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	f003 021f 	and.w	r2, r3, #31
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	4413      	add	r3, r2
 8002fca:	051b      	lsls	r3, r3, #20
 8002fcc:	e018      	b.n	8003000 <HAL_ADC_ConfigChannel+0x594>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd6:	fa93 f3a3 	rbit	r3, r3
 8002fda:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fde:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002fe6:	2320      	movs	r3, #32
 8002fe8:	e003      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fec:	fab3 f383 	clz	r3, r3
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	f003 021f 	and.w	r2, r3, #31
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	4413      	add	r3, r2
 8002ffe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003000:	430b      	orrs	r3, r1
 8003002:	e080      	b.n	8003106 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800300c:	2b00      	cmp	r3, #0
 800300e:	d107      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x5b4>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	0e9b      	lsrs	r3, r3, #26
 8003016:	3301      	adds	r3, #1
 8003018:	069b      	lsls	r3, r3, #26
 800301a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800301e:	e015      	b.n	800304c <HAL_ADC_ConfigChannel+0x5e0>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800302e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003030:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003038:	2320      	movs	r3, #32
 800303a:	e003      	b.n	8003044 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800303c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303e:	fab3 f383 	clz	r3, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	3301      	adds	r3, #1
 8003046:	069b      	lsls	r3, r3, #26
 8003048:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003054:	2b00      	cmp	r3, #0
 8003056:	d109      	bne.n	800306c <HAL_ADC_ConfigChannel+0x600>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	0e9b      	lsrs	r3, r3, #26
 800305e:	3301      	adds	r3, #1
 8003060:	f003 031f 	and.w	r3, r3, #31
 8003064:	2101      	movs	r1, #1
 8003066:	fa01 f303 	lsl.w	r3, r1, r3
 800306a:	e017      	b.n	800309c <HAL_ADC_ConfigChannel+0x630>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	fa93 f3a3 	rbit	r3, r3
 8003078:	61fb      	str	r3, [r7, #28]
  return result;
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003084:	2320      	movs	r3, #32
 8003086:	e003      	b.n	8003090 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	fab3 f383 	clz	r3, r3
 800308e:	b2db      	uxtb	r3, r3
 8003090:	3301      	adds	r3, #1
 8003092:	f003 031f 	and.w	r3, r3, #31
 8003096:	2101      	movs	r1, #1
 8003098:	fa01 f303 	lsl.w	r3, r1, r3
 800309c:	ea42 0103 	orr.w	r1, r2, r3
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10d      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x65c>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	0e9b      	lsrs	r3, r3, #26
 80030b2:	3301      	adds	r3, #1
 80030b4:	f003 021f 	and.w	r2, r3, #31
 80030b8:	4613      	mov	r3, r2
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	4413      	add	r3, r2
 80030be:	3b1e      	subs	r3, #30
 80030c0:	051b      	lsls	r3, r3, #20
 80030c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030c6:	e01d      	b.n	8003104 <HAL_ADC_ConfigChannel+0x698>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fa93 f3a3 	rbit	r3, r3
 80030d4:	613b      	str	r3, [r7, #16]
  return result;
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d103      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80030e0:	2320      	movs	r3, #32
 80030e2:	e005      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x684>
 80030e4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	fab3 f383 	clz	r3, r3
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	3301      	adds	r3, #1
 80030f2:	f003 021f 	and.w	r2, r3, #31
 80030f6:	4613      	mov	r3, r2
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	4413      	add	r3, r2
 80030fc:	3b1e      	subs	r3, #30
 80030fe:	051b      	lsls	r3, r3, #20
 8003100:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003104:	430b      	orrs	r3, r1
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	6892      	ldr	r2, [r2, #8]
 800310a:	4619      	mov	r1, r3
 800310c:	f7ff f95d 	bl	80023ca <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	4b44      	ldr	r3, [pc, #272]	; (8003228 <HAL_ADC_ConfigChannel+0x7bc>)
 8003116:	4013      	ands	r3, r2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d07a      	beq.n	8003212 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800311c:	4843      	ldr	r0, [pc, #268]	; (800322c <HAL_ADC_ConfigChannel+0x7c0>)
 800311e:	f7ff f8c5 	bl	80022ac <LL_ADC_GetCommonPathInternalCh>
 8003122:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a41      	ldr	r2, [pc, #260]	; (8003230 <HAL_ADC_ConfigChannel+0x7c4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d12c      	bne.n	800318a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003130:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003134:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d126      	bne.n	800318a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a3c      	ldr	r2, [pc, #240]	; (8003234 <HAL_ADC_ConfigChannel+0x7c8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d004      	beq.n	8003150 <HAL_ADC_ConfigChannel+0x6e4>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a3b      	ldr	r2, [pc, #236]	; (8003238 <HAL_ADC_ConfigChannel+0x7cc>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d15d      	bne.n	800320c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003150:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003154:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003158:	4619      	mov	r1, r3
 800315a:	4834      	ldr	r0, [pc, #208]	; (800322c <HAL_ADC_ConfigChannel+0x7c0>)
 800315c:	f7ff f893 	bl	8002286 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003160:	4b36      	ldr	r3, [pc, #216]	; (800323c <HAL_ADC_ConfigChannel+0x7d0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	099b      	lsrs	r3, r3, #6
 8003166:	4a36      	ldr	r2, [pc, #216]	; (8003240 <HAL_ADC_ConfigChannel+0x7d4>)
 8003168:	fba2 2303 	umull	r2, r3, r2, r3
 800316c:	099b      	lsrs	r3, r3, #6
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	4613      	mov	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800317a:	e002      	b.n	8003182 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	3b01      	subs	r3, #1
 8003180:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1f9      	bne.n	800317c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003188:	e040      	b.n	800320c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a2d      	ldr	r2, [pc, #180]	; (8003244 <HAL_ADC_ConfigChannel+0x7d8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d118      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x75a>
 8003194:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003198:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d112      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a23      	ldr	r2, [pc, #140]	; (8003234 <HAL_ADC_ConfigChannel+0x7c8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d004      	beq.n	80031b4 <HAL_ADC_ConfigChannel+0x748>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a22      	ldr	r2, [pc, #136]	; (8003238 <HAL_ADC_ConfigChannel+0x7cc>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d12d      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031bc:	4619      	mov	r1, r3
 80031be:	481b      	ldr	r0, [pc, #108]	; (800322c <HAL_ADC_ConfigChannel+0x7c0>)
 80031c0:	f7ff f861 	bl	8002286 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031c4:	e024      	b.n	8003210 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a1f      	ldr	r2, [pc, #124]	; (8003248 <HAL_ADC_ConfigChannel+0x7dc>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d120      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d11a      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a14      	ldr	r2, [pc, #80]	; (8003234 <HAL_ADC_ConfigChannel+0x7c8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d115      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031ee:	4619      	mov	r1, r3
 80031f0:	480e      	ldr	r0, [pc, #56]	; (800322c <HAL_ADC_ConfigChannel+0x7c0>)
 80031f2:	f7ff f848 	bl	8002286 <LL_ADC_SetCommonPathInternalCh>
 80031f6:	e00c      	b.n	8003212 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fc:	f043 0220 	orr.w	r2, r3, #32
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800320a:	e002      	b.n	8003212 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800320c:	bf00      	nop
 800320e:	e000      	b.n	8003212 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003210:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800321a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800321e:	4618      	mov	r0, r3
 8003220:	37d8      	adds	r7, #216	; 0xd8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	80080000 	.word	0x80080000
 800322c:	50040300 	.word	0x50040300
 8003230:	c7520000 	.word	0xc7520000
 8003234:	50040000 	.word	0x50040000
 8003238:	50040200 	.word	0x50040200
 800323c:	20000000 	.word	0x20000000
 8003240:	053e2d63 	.word	0x053e2d63
 8003244:	cb840000 	.word	0xcb840000
 8003248:	80000001 	.word	0x80000001

0800324c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003254:	2300      	movs	r3, #0
 8003256:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff f987 	bl	8002570 <LL_ADC_IsEnabled>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d169      	bne.n	800333c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	4b36      	ldr	r3, [pc, #216]	; (8003348 <ADC_Enable+0xfc>)
 8003270:	4013      	ands	r3, r2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00d      	beq.n	8003292 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327a:	f043 0210 	orr.w	r2, r3, #16
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003286:	f043 0201 	orr.w	r2, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e055      	b.n	800333e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff f942 	bl	8002520 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800329c:	482b      	ldr	r0, [pc, #172]	; (800334c <ADC_Enable+0x100>)
 800329e:	f7ff f805 	bl	80022ac <LL_ADC_GetCommonPathInternalCh>
 80032a2:	4603      	mov	r3, r0
 80032a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d013      	beq.n	80032d4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032ac:	4b28      	ldr	r3, [pc, #160]	; (8003350 <ADC_Enable+0x104>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	099b      	lsrs	r3, r3, #6
 80032b2:	4a28      	ldr	r2, [pc, #160]	; (8003354 <ADC_Enable+0x108>)
 80032b4:	fba2 2303 	umull	r2, r3, r2, r3
 80032b8:	099b      	lsrs	r3, r3, #6
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	4613      	mov	r3, r2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80032c6:	e002      	b.n	80032ce <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f9      	bne.n	80032c8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80032d4:	f7fe ff94 	bl	8002200 <HAL_GetTick>
 80032d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032da:	e028      	b.n	800332e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff f945 	bl	8002570 <LL_ADC_IsEnabled>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d104      	bne.n	80032f6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff f915 	bl	8002520 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032f6:	f7fe ff83 	bl	8002200 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d914      	bls.n	800332e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b01      	cmp	r3, #1
 8003310:	d00d      	beq.n	800332e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003316:	f043 0210 	orr.w	r2, r3, #16
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003322:	f043 0201 	orr.w	r2, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e007      	b.n	800333e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b01      	cmp	r3, #1
 800333a:	d1cf      	bne.n	80032dc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	8000003f 	.word	0x8000003f
 800334c:	50040300 	.word	0x50040300
 8003350:	20000000 	.word	0x20000000
 8003354:	053e2d63 	.word	0x053e2d63

08003358 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff f916 	bl	8002596 <LL_ADC_IsDisableOngoing>
 800336a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff f8fd 	bl	8002570 <LL_ADC_IsEnabled>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d047      	beq.n	800340c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d144      	bne.n	800340c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 030d 	and.w	r3, r3, #13
 800338c:	2b01      	cmp	r3, #1
 800338e:	d10c      	bne.n	80033aa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff f8d7 	bl	8002548 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2203      	movs	r2, #3
 80033a0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033a2:	f7fe ff2d 	bl	8002200 <HAL_GetTick>
 80033a6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033a8:	e029      	b.n	80033fe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ae:	f043 0210 	orr.w	r2, r3, #16
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ba:	f043 0201 	orr.w	r2, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e023      	b.n	800340e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033c6:	f7fe ff1b 	bl	8002200 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d914      	bls.n	80033fe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00d      	beq.n	80033fe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e6:	f043 0210 	orr.w	r2, r3, #16
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f2:	f043 0201 	orr.w	r2, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e007      	b.n	800340e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1dc      	bne.n	80033c6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <LL_ADC_IsEnabled>:
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <LL_ADC_IsEnabled+0x18>
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <LL_ADC_IsEnabled+0x1a>
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <LL_ADC_StartCalibration>:
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800344e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003458:	4313      	orrs	r3, r2
 800345a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	609a      	str	r2, [r3, #8]
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <LL_ADC_IsCalibrationOnGoing>:
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800347e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003482:	d101      	bne.n	8003488 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003484:	2301      	movs	r3, #1
 8003486:	e000      	b.n	800348a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <LL_ADC_REG_IsConversionOngoing>:
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d101      	bne.n	80034ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_ADCEx_Calibration_Start+0x1c>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e04d      	b.n	8003574 <HAL_ADCEx_Calibration_Start+0xb8>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7ff ff39 	bl	8003358 <ADC_Disable>
 80034e6:	4603      	mov	r3, r0
 80034e8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d136      	bne.n	800355e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034f8:	f023 0302 	bic.w	r3, r3, #2
 80034fc:	f043 0202 	orr.w	r2, r3, #2
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6839      	ldr	r1, [r7, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff ff96 	bl	800343c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003510:	e014      	b.n	800353c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	3301      	adds	r3, #1
 8003516:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800351e:	d30d      	bcc.n	800353c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003524:	f023 0312 	bic.w	r3, r3, #18
 8003528:	f043 0210 	orr.w	r2, r3, #16
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e01b      	b.n	8003574 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff ff94 	bl	800346e <LL_ADC_IsCalibrationOnGoing>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1e2      	bne.n	8003512 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003550:	f023 0303 	bic.w	r3, r3, #3
 8003554:	f043 0201 	orr.w	r2, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	655a      	str	r2, [r3, #84]	; 0x54
 800355c:	e005      	b.n	800356a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003562:	f043 0210 	orr.w	r2, r3, #16
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003572:	7bfb      	ldrb	r3, [r7, #15]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800357c:	b590      	push	{r4, r7, lr}
 800357e:	b09f      	sub	sp, #124	; 0x7c
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003586:	2300      	movs	r3, #0
 8003588:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003596:	2302      	movs	r3, #2
 8003598:	e093      	b.n	80036c2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80035a2:	2300      	movs	r3, #0
 80035a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80035a6:	2300      	movs	r3, #0
 80035a8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a47      	ldr	r2, [pc, #284]	; (80036cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d102      	bne.n	80035ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80035b4:	4b46      	ldr	r3, [pc, #280]	; (80036d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80035b6:	60bb      	str	r3, [r7, #8]
 80035b8:	e001      	b.n	80035be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80035ba:	2300      	movs	r3, #0
 80035bc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10b      	bne.n	80035dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c8:	f043 0220 	orr.w	r2, r3, #32
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e072      	b.n	80036c2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff ff59 	bl	8003496 <LL_ADC_REG_IsConversionOngoing>
 80035e4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff ff53 	bl	8003496 <LL_ADC_REG_IsConversionOngoing>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d154      	bne.n	80036a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80035f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d151      	bne.n	80036a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80035fc:	4b35      	ldr	r3, [pc, #212]	; (80036d4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80035fe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d02c      	beq.n	8003662 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	6859      	ldr	r1, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800361a:	035b      	lsls	r3, r3, #13
 800361c:	430b      	orrs	r3, r1
 800361e:	431a      	orrs	r2, r3
 8003620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003622:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003624:	4829      	ldr	r0, [pc, #164]	; (80036cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003626:	f7ff fef6 	bl	8003416 <LL_ADC_IsEnabled>
 800362a:	4604      	mov	r4, r0
 800362c:	4828      	ldr	r0, [pc, #160]	; (80036d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800362e:	f7ff fef2 	bl	8003416 <LL_ADC_IsEnabled>
 8003632:	4603      	mov	r3, r0
 8003634:	431c      	orrs	r4, r3
 8003636:	4828      	ldr	r0, [pc, #160]	; (80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003638:	f7ff feed 	bl	8003416 <LL_ADC_IsEnabled>
 800363c:	4603      	mov	r3, r0
 800363e:	4323      	orrs	r3, r4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d137      	bne.n	80036b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800364c:	f023 030f 	bic.w	r3, r3, #15
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	6811      	ldr	r1, [r2, #0]
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	6892      	ldr	r2, [r2, #8]
 8003658:	430a      	orrs	r2, r1
 800365a:	431a      	orrs	r2, r3
 800365c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800365e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003660:	e028      	b.n	80036b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800366a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800366c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800366e:	4817      	ldr	r0, [pc, #92]	; (80036cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003670:	f7ff fed1 	bl	8003416 <LL_ADC_IsEnabled>
 8003674:	4604      	mov	r4, r0
 8003676:	4816      	ldr	r0, [pc, #88]	; (80036d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003678:	f7ff fecd 	bl	8003416 <LL_ADC_IsEnabled>
 800367c:	4603      	mov	r3, r0
 800367e:	431c      	orrs	r4, r3
 8003680:	4815      	ldr	r0, [pc, #84]	; (80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003682:	f7ff fec8 	bl	8003416 <LL_ADC_IsEnabled>
 8003686:	4603      	mov	r3, r0
 8003688:	4323      	orrs	r3, r4
 800368a:	2b00      	cmp	r3, #0
 800368c:	d112      	bne.n	80036b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800368e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003696:	f023 030f 	bic.w	r3, r3, #15
 800369a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800369c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800369e:	e009      	b.n	80036b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a4:	f043 0220 	orr.w	r2, r3, #32
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80036b2:	e000      	b.n	80036b6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80036be:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	377c      	adds	r7, #124	; 0x7c
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd90      	pop	{r4, r7, pc}
 80036ca:	bf00      	nop
 80036cc:	50040000 	.word	0x50040000
 80036d0:	50040100 	.word	0x50040100
 80036d4:	50040300 	.word	0x50040300
 80036d8:	50040200 	.word	0x50040200

080036dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036ec:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <__NVIC_SetPriorityGrouping+0x44>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036f8:	4013      	ands	r3, r2
 80036fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800370c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800370e:	4a04      	ldr	r2, [pc, #16]	; (8003720 <__NVIC_SetPriorityGrouping+0x44>)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	60d3      	str	r3, [r2, #12]
}
 8003714:	bf00      	nop
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	e000ed00 	.word	0xe000ed00

08003724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003728:	4b04      	ldr	r3, [pc, #16]	; (800373c <__NVIC_GetPriorityGrouping+0x18>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	0a1b      	lsrs	r3, r3, #8
 800372e:	f003 0307 	and.w	r3, r3, #7
}
 8003732:	4618      	mov	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	e000ed00 	.word	0xe000ed00

08003740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800374a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374e:	2b00      	cmp	r3, #0
 8003750:	db0b      	blt.n	800376a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003752:	79fb      	ldrb	r3, [r7, #7]
 8003754:	f003 021f 	and.w	r2, r3, #31
 8003758:	4907      	ldr	r1, [pc, #28]	; (8003778 <__NVIC_EnableIRQ+0x38>)
 800375a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	2001      	movs	r0, #1
 8003762:	fa00 f202 	lsl.w	r2, r0, r2
 8003766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	e000e100 	.word	0xe000e100

0800377c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	6039      	str	r1, [r7, #0]
 8003786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378c:	2b00      	cmp	r3, #0
 800378e:	db0a      	blt.n	80037a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	b2da      	uxtb	r2, r3
 8003794:	490c      	ldr	r1, [pc, #48]	; (80037c8 <__NVIC_SetPriority+0x4c>)
 8003796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379a:	0112      	lsls	r2, r2, #4
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	440b      	add	r3, r1
 80037a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037a4:	e00a      	b.n	80037bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	4908      	ldr	r1, [pc, #32]	; (80037cc <__NVIC_SetPriority+0x50>)
 80037ac:	79fb      	ldrb	r3, [r7, #7]
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	3b04      	subs	r3, #4
 80037b4:	0112      	lsls	r2, r2, #4
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	440b      	add	r3, r1
 80037ba:	761a      	strb	r2, [r3, #24]
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	e000e100 	.word	0xe000e100
 80037cc:	e000ed00 	.word	0xe000ed00

080037d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b089      	sub	sp, #36	; 0x24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f1c3 0307 	rsb	r3, r3, #7
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	bf28      	it	cs
 80037ee:	2304      	movcs	r3, #4
 80037f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	3304      	adds	r3, #4
 80037f6:	2b06      	cmp	r3, #6
 80037f8:	d902      	bls.n	8003800 <NVIC_EncodePriority+0x30>
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	3b03      	subs	r3, #3
 80037fe:	e000      	b.n	8003802 <NVIC_EncodePriority+0x32>
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003804:	f04f 32ff 	mov.w	r2, #4294967295
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	43da      	mvns	r2, r3
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	401a      	ands	r2, r3
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003818:	f04f 31ff 	mov.w	r1, #4294967295
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	fa01 f303 	lsl.w	r3, r1, r3
 8003822:	43d9      	mvns	r1, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003828:	4313      	orrs	r3, r2
         );
}
 800382a:	4618      	mov	r0, r3
 800382c:	3724      	adds	r7, #36	; 0x24
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
	...

08003838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3b01      	subs	r3, #1
 8003844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003848:	d301      	bcc.n	800384e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800384a:	2301      	movs	r3, #1
 800384c:	e00f      	b.n	800386e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800384e:	4a0a      	ldr	r2, [pc, #40]	; (8003878 <SysTick_Config+0x40>)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3b01      	subs	r3, #1
 8003854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003856:	210f      	movs	r1, #15
 8003858:	f04f 30ff 	mov.w	r0, #4294967295
 800385c:	f7ff ff8e 	bl	800377c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003860:	4b05      	ldr	r3, [pc, #20]	; (8003878 <SysTick_Config+0x40>)
 8003862:	2200      	movs	r2, #0
 8003864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003866:	4b04      	ldr	r3, [pc, #16]	; (8003878 <SysTick_Config+0x40>)
 8003868:	2207      	movs	r2, #7
 800386a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	e000e010 	.word	0xe000e010

0800387c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7ff ff29 	bl	80036dc <__NVIC_SetPriorityGrouping>
}
 800388a:	bf00      	nop
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b086      	sub	sp, #24
 8003896:	af00      	add	r7, sp, #0
 8003898:	4603      	mov	r3, r0
 800389a:	60b9      	str	r1, [r7, #8]
 800389c:	607a      	str	r2, [r7, #4]
 800389e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038a4:	f7ff ff3e 	bl	8003724 <__NVIC_GetPriorityGrouping>
 80038a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	68b9      	ldr	r1, [r7, #8]
 80038ae:	6978      	ldr	r0, [r7, #20]
 80038b0:	f7ff ff8e 	bl	80037d0 <NVIC_EncodePriority>
 80038b4:	4602      	mov	r2, r0
 80038b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ba:	4611      	mov	r1, r2
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff ff5d 	bl	800377c <__NVIC_SetPriority>
}
 80038c2:	bf00      	nop
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b082      	sub	sp, #8
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	4603      	mov	r3, r0
 80038d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff ff31 	bl	8003740 <__NVIC_EnableIRQ>
}
 80038de:	bf00      	nop
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b082      	sub	sp, #8
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff ffa2 	bl	8003838 <SysTick_Config>
 80038f4:	4603      	mov	r3, r0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800390e:	e17f      	b.n	8003c10 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	2101      	movs	r1, #1
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	fa01 f303 	lsl.w	r3, r1, r3
 800391c:	4013      	ands	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 8171 	beq.w	8003c0a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 0303 	and.w	r3, r3, #3
 8003930:	2b01      	cmp	r3, #1
 8003932:	d005      	beq.n	8003940 <HAL_GPIO_Init+0x40>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 0303 	and.w	r3, r3, #3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d130      	bne.n	80039a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	2203      	movs	r2, #3
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	43db      	mvns	r3, r3
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4013      	ands	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003976:	2201      	movs	r2, #1
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43db      	mvns	r3, r3
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4013      	ands	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	091b      	lsrs	r3, r3, #4
 800398c:	f003 0201 	and.w	r2, r3, #1
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d118      	bne.n	80039e0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80039b4:	2201      	movs	r2, #1
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	43db      	mvns	r3, r3
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4013      	ands	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	08db      	lsrs	r3, r3, #3
 80039ca:	f003 0201 	and.w	r2, r3, #1
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f003 0303 	and.w	r3, r3, #3
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d017      	beq.n	8003a1c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	2203      	movs	r2, #3
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	43db      	mvns	r3, r3
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4013      	ands	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d123      	bne.n	8003a70 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	08da      	lsrs	r2, r3, #3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3208      	adds	r2, #8
 8003a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a34:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	220f      	movs	r2, #15
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	43db      	mvns	r3, r3
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	08da      	lsrs	r2, r3, #3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3208      	adds	r2, #8
 8003a6a:	6939      	ldr	r1, [r7, #16]
 8003a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4013      	ands	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 0203 	and.w	r2, r3, #3
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 80ac 	beq.w	8003c0a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ab2:	4b5f      	ldr	r3, [pc, #380]	; (8003c30 <HAL_GPIO_Init+0x330>)
 8003ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab6:	4a5e      	ldr	r2, [pc, #376]	; (8003c30 <HAL_GPIO_Init+0x330>)
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	6613      	str	r3, [r2, #96]	; 0x60
 8003abe:	4b5c      	ldr	r3, [pc, #368]	; (8003c30 <HAL_GPIO_Init+0x330>)
 8003ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	60bb      	str	r3, [r7, #8]
 8003ac8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003aca:	4a5a      	ldr	r2, [pc, #360]	; (8003c34 <HAL_GPIO_Init+0x334>)
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	089b      	lsrs	r3, r3, #2
 8003ad0:	3302      	adds	r3, #2
 8003ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	220f      	movs	r2, #15
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4013      	ands	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003af4:	d025      	beq.n	8003b42 <HAL_GPIO_Init+0x242>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a4f      	ldr	r2, [pc, #316]	; (8003c38 <HAL_GPIO_Init+0x338>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d01f      	beq.n	8003b3e <HAL_GPIO_Init+0x23e>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a4e      	ldr	r2, [pc, #312]	; (8003c3c <HAL_GPIO_Init+0x33c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d019      	beq.n	8003b3a <HAL_GPIO_Init+0x23a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a4d      	ldr	r2, [pc, #308]	; (8003c40 <HAL_GPIO_Init+0x340>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d013      	beq.n	8003b36 <HAL_GPIO_Init+0x236>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a4c      	ldr	r2, [pc, #304]	; (8003c44 <HAL_GPIO_Init+0x344>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00d      	beq.n	8003b32 <HAL_GPIO_Init+0x232>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a4b      	ldr	r2, [pc, #300]	; (8003c48 <HAL_GPIO_Init+0x348>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d007      	beq.n	8003b2e <HAL_GPIO_Init+0x22e>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a4a      	ldr	r2, [pc, #296]	; (8003c4c <HAL_GPIO_Init+0x34c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d101      	bne.n	8003b2a <HAL_GPIO_Init+0x22a>
 8003b26:	2306      	movs	r3, #6
 8003b28:	e00c      	b.n	8003b44 <HAL_GPIO_Init+0x244>
 8003b2a:	2307      	movs	r3, #7
 8003b2c:	e00a      	b.n	8003b44 <HAL_GPIO_Init+0x244>
 8003b2e:	2305      	movs	r3, #5
 8003b30:	e008      	b.n	8003b44 <HAL_GPIO_Init+0x244>
 8003b32:	2304      	movs	r3, #4
 8003b34:	e006      	b.n	8003b44 <HAL_GPIO_Init+0x244>
 8003b36:	2303      	movs	r3, #3
 8003b38:	e004      	b.n	8003b44 <HAL_GPIO_Init+0x244>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e002      	b.n	8003b44 <HAL_GPIO_Init+0x244>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <HAL_GPIO_Init+0x244>
 8003b42:	2300      	movs	r3, #0
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	f002 0203 	and.w	r2, r2, #3
 8003b4a:	0092      	lsls	r2, r2, #2
 8003b4c:	4093      	lsls	r3, r2
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b54:	4937      	ldr	r1, [pc, #220]	; (8003c34 <HAL_GPIO_Init+0x334>)
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	089b      	lsrs	r3, r3, #2
 8003b5a:	3302      	adds	r3, #2
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b62:	4b3b      	ldr	r3, [pc, #236]	; (8003c50 <HAL_GPIO_Init+0x350>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b86:	4a32      	ldr	r2, [pc, #200]	; (8003c50 <HAL_GPIO_Init+0x350>)
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b8c:	4b30      	ldr	r3, [pc, #192]	; (8003c50 <HAL_GPIO_Init+0x350>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	43db      	mvns	r3, r3
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bb0:	4a27      	ldr	r2, [pc, #156]	; (8003c50 <HAL_GPIO_Init+0x350>)
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003bb6:	4b26      	ldr	r3, [pc, #152]	; (8003c50 <HAL_GPIO_Init+0x350>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bda:	4a1d      	ldr	r2, [pc, #116]	; (8003c50 <HAL_GPIO_Init+0x350>)
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003be0:	4b1b      	ldr	r3, [pc, #108]	; (8003c50 <HAL_GPIO_Init+0x350>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	43db      	mvns	r3, r3
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	4013      	ands	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c04:	4a12      	ldr	r2, [pc, #72]	; (8003c50 <HAL_GPIO_Init+0x350>)
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f47f ae78 	bne.w	8003910 <HAL_GPIO_Init+0x10>
  }
}
 8003c20:	bf00      	nop
 8003c22:	bf00      	nop
 8003c24:	371c      	adds	r7, #28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	40021000 	.word	0x40021000
 8003c34:	40010000 	.word	0x40010000
 8003c38:	48000400 	.word	0x48000400
 8003c3c:	48000800 	.word	0x48000800
 8003c40:	48000c00 	.word	0x48000c00
 8003c44:	48001000 	.word	0x48001000
 8003c48:	48001400 	.word	0x48001400
 8003c4c:	48001800 	.word	0x48001800
 8003c50:	40010400 	.word	0x40010400

08003c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	807b      	strh	r3, [r7, #2]
 8003c60:	4613      	mov	r3, r2
 8003c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c64:	787b      	ldrb	r3, [r7, #1]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c6a:	887a      	ldrh	r2, [r7, #2]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c70:	e002      	b.n	8003c78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c72:	887a      	ldrh	r2, [r7, #2]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e0c3      	b.n	8003e22 <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b05      	cmp	r3, #5
 8003ca4:	d101      	bne.n	8003caa <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e0bb      	b.n	8003e22 <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d101      	bne.n	8003cba <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e0b3      	b.n	8003e22 <HAL_OPAMP_Init+0x19e>
    {
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
    }

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePLowPower));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNLowPower));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d103      	bne.n	8003cd6 <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7fd fcae 	bl	8001638 <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cea:	601a      	str	r2, [r3, #0]

    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d11b      	bne.n	8003d2c <HAL_OPAMP_Init+0xa8>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 8003cfe:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6891      	ldr	r1, [r2, #8]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	68d2      	ldr	r2, [r2, #12]
 8003d0a:	4311      	orrs	r1, r2
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6992      	ldr	r2, [r2, #24]
 8003d10:	4311      	orrs	r1, r2
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6912      	ldr	r2, [r2, #16]
 8003d16:	4311      	orrs	r1, r2
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6952      	ldr	r2, [r2, #20]
 8003d1c:	4311      	orrs	r1, r2
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	69d2      	ldr	r2, [r2, #28]
 8003d22:	4311      	orrs	r1, r2
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6812      	ldr	r2, [r2, #0]
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	2b0c      	cmp	r3, #12
 8003d32:	d115      	bne.n	8003d60 <HAL_OPAMP_Init+0xdc>
    {
    /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 8003d3e:	f023 030e 	bic.w	r3, r3, #14
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6891      	ldr	r1, [r2, #8]
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	68d2      	ldr	r2, [r2, #12]
 8003d4a:	4311      	orrs	r1, r2
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6952      	ldr	r2, [r2, #20]
 8003d50:	4311      	orrs	r1, r2
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	69d2      	ldr	r2, [r2, #28]
 8003d56:	4311      	orrs	r1, r2
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.Mode | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d118      	bne.n	8003d9a <HAL_OPAMP_Init+0x116>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 8003d72:	f023 030e 	bic.w	r3, r3, #14
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6891      	ldr	r1, [r2, #8]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	68d2      	ldr	r2, [r2, #12]
 8003d7e:	4311      	orrs	r1, r2
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6912      	ldr	r2, [r2, #16]
 8003d84:	4311      	orrs	r1, r2
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6952      	ldr	r2, [r2, #20]
 8003d8a:	4311      	orrs	r1, r2
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	69d2      	ldr	r2, [r2, #28]
 8003d90:	4311      	orrs	r1, r2
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6812      	ldr	r2, [r2, #0]
 8003d96:	430b      	orrs	r3, r1
 8003d98:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003da2:	d12a      	bne.n	8003dfa <HAL_OPAMP_Init+0x176>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d013      	beq.n	8003dd4 <HAL_OPAMP_Init+0x150>
      {
        /* OPAMP_POWERMODE_NORMALPOWER */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003dc4:	f023 031f 	bic.w	r3, r3, #31
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6812      	ldr	r2, [r2, #0]
 8003dcc:	68b9      	ldr	r1, [r7, #8]
 8003dce:	430b      	orrs	r3, r1
 8003dd0:	6053      	str	r3, [r2, #4]
 8003dd2:	e012      	b.n	8003dfa <HAL_OPAMP_Init+0x176>
      else
      {
        /* OPAMP_POWERMODE_LOWPOWER */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* low power mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd8:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNLowPower));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->LPOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003dec:	f023 031f 	bic.w	r3, r3, #31
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	430b      	orrs	r3, r1
 8003df8:	6093      	str	r3, [r2, #8]
    }

    /* Configure the power supply range */
    /* The OPAMP_CSR_OPARANGE is common configuration for all OPAMPs */
    /* bit OPAMP1_CSR_OPARANGE is used for both OPAMPs */
    MODIFY_REG(OPAMP1->CSR, OPAMP1_CSR_OPARANGE, hopamp->Init.PowerSupplyRange);
 8003dfa:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <HAL_OPAMP_Init+0x1a8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	4909      	ldr	r1, [pc, #36]	; (8003e2c <HAL_OPAMP_Init+0x1a8>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	600b      	str	r3, [r1, #0]

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d103      	bne.n	8003e20 <HAL_OPAMP_Init+0x19c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40007800 	.word	0x40007800

08003e30 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d102      	bne.n	8003e48 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	73fb      	strb	r3, [r7, #15]
 8003e46:	e01d      	b.n	8003e84 <HAL_OPAMP_Start+0x54>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b05      	cmp	r3, #5
 8003e52:	d102      	bne.n	8003e5a <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	73fb      	strb	r3, [r7, #15]
 8003e58:	e014      	b.n	8003e84 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if(hopamp->State == HAL_OPAMP_STATE_READY)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d10c      	bne.n	8003e80 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f042 0201 	orr.w	r2, r2, #1
 8003e74:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2204      	movs	r2, #4
 8003e7a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8003e7e:	e001      	b.n	8003e84 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	73fb      	strb	r3, [r7, #15]
    }

   }
  return status;
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <HAL_OPAMP_SelfCalibrate>:
  * @retval HAL status

  */

HAL_StatusTypeDef HAL_OPAMP_SelfCalibrate(OPAMP_HandleTypeDef *hopamp)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b088      	sub	sp, #32
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	77fb      	strb	r3, [r7, #31]

  __IO uint32_t* tmp_opamp_reg_trimming;   /* Selection of register of trimming depending on power mode: OTR or LPOTR */

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d102      	bne.n	8003eaa <HAL_OPAMP_SelfCalibrate+0x18>
  {
    status = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	77fb      	strb	r3, [r7, #31]
 8003ea8:	e10d      	b.n	80040c6 <HAL_OPAMP_SelfCalibrate+0x234>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b05      	cmp	r3, #5
 8003eb4:	d102      	bne.n	8003ebc <HAL_OPAMP_SelfCalibrate+0x2a>
  {
    status = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	77fb      	strb	r3, [r7, #31]
 8003eba:	e104      	b.n	80040c6 <HAL_OPAMP_SelfCalibrate+0x234>
  }
  else
  {
    /* Check if OPAMP in calibration mode and calibration not yet enable */
    if(hopamp->State ==  HAL_OPAMP_STATE_READY)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	f040 80fc 	bne.w	80040c2 <HAL_OPAMP_SelfCalibrate+0x230>
      assert_param(IS_OPAMP_POWERMODE(hopamp->Init.PowerMode));

      /* Save OPAMP mode as in                                       */
      /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx */
      /* the calibration is not working in PGA mode                  */
      opampmode = READ_BIT(hopamp->Instance->CSR,OPAMP_CSR_OPAMODE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 030c 	and.w	r3, r3, #12
 8003ed4:	60bb      	str	r3, [r7, #8]

      /* Use of standalone mode */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_OPAMODE, OPAMP_STANDALONE_MODE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 020c 	bic.w	r2, r2, #12
 8003ee4:	601a      	str	r2, [r3, #0]

      /*  user trimming values are used for offset calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_USERTRIM);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ef4:	601a      	str	r2, [r3, #0]

      /* Select trimming settings depending on power mode */
      if (hopamp->Init.PowerMode == OPAMP_POWERMODE_NORMALPOWER)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d104      	bne.n	8003f08 <HAL_OPAMP_SelfCalibrate+0x76>
      {
        tmp_opamp_reg_trimming = &hopamp->Instance->OTR;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3304      	adds	r3, #4
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	e003      	b.n	8003f10 <HAL_OPAMP_SelfCalibrate+0x7e>
      }
      else
      {
        tmp_opamp_reg_trimming = &hopamp->Instance->LPOTR;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3308      	adds	r3, #8
 8003f0e:	60fb      	str	r3, [r7, #12]
      }

      /* Enable calibration */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f1e:	601a      	str	r2, [r3, #0]

      /* 1st calibration - N */
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALSEL);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f2e:	601a      	str	r2, [r3, #0]

      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0201 	orr.w	r2, r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluen = 16U;
 8003f40:	2310      	movs	r3, #16
 8003f42:	61bb      	str	r3, [r7, #24]
      delta = 8U;
 8003f44:	2308      	movs	r3, #8
 8003f46:	613b      	str	r3, [r7, #16]

      while (delta != 0U)
 8003f48:	e01d      	b.n	8003f86 <HAL_OPAMP_SelfCalibrate+0xf4>
      {
        /* Set candidate trimming */
        /* OPAMP_POWERMODE_NORMALPOWER */
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETN, trimmingvaluen);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f023 021f 	bic.w	r2, r3, #31
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	431a      	orrs	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(OPAMP_TRIMMING_DELAY);
 8003f5a:	2001      	movs	r0, #1
 8003f5c:	f7fe f95c 	bl	8002218 <HAL_Delay>

        if (READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT) != 0U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d004      	beq.n	8003f78 <HAL_OPAMP_SelfCalibrate+0xe6>
        {
          /* OPAMP_CSR_CALOUT is HIGH try higher trimming */
          trimmingvaluen -= delta;
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	e003      	b.n	8003f80 <HAL_OPAMP_SelfCalibrate+0xee>
        }
        else
        {
          /* OPAMP_CSR_CALOUT is LOW try lower trimming */
          trimmingvaluen += delta;
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        }
        /* Divide range by 2 to continue dichotomy sweep */
        delta >>= 1U;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	085b      	lsrs	r3, r3, #1
 8003f84:	613b      	str	r3, [r7, #16]
      while (delta != 0U)
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1de      	bne.n	8003f4a <HAL_OPAMP_SelfCalibrate+0xb8>
      }

      /* Still need to check if right calibration is current value or one step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 0 to 1  */
      /* Set candidate trimming */
      MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETN, trimmingvaluen);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f023 021f 	bic.w	r2, r3, #31
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	431a      	orrs	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(OPAMP_TRIMMING_DELAY);
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	f7fe f93b 	bl	8002218 <HAL_Delay>

      if ((READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT)) == 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10a      	bne.n	8003fc6 <HAL_OPAMP_SelfCalibrate+0x134>
      {
        /* Trimming value is actually one value more */
        trimmingvaluen++;
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	61bb      	str	r3, [r7, #24]
        /* Set right trimming */
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETN, trimmingvaluen);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f023 021f 	bic.w	r2, r3, #31
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	601a      	str	r2, [r3, #0]
      }

      /* 2nd calibration - P */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALSEL);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fd4:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluep = 16U;
 8003fd6:	2310      	movs	r3, #16
 8003fd8:	617b      	str	r3, [r7, #20]
      delta = 8U;
 8003fda:	2308      	movs	r3, #8
 8003fdc:	613b      	str	r3, [r7, #16]

      while (delta != 0U)
 8003fde:	e01e      	b.n	800401e <HAL_OPAMP_SelfCalibrate+0x18c>
      {
        /* Set candidate trimming */
        /* OPAMP_POWERMODE_NORMALPOWER */
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETP, (trimmingvaluep<<OPAMP_INPUT_NONINVERTING));
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	021b      	lsls	r3, r3, #8
 8003fec:	431a      	orrs	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(OPAMP_TRIMMING_DELAY);
 8003ff2:	2001      	movs	r0, #1
 8003ff4:	f7fe f910 	bl	8002218 <HAL_Delay>

        if (READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT) != 0U)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d004      	beq.n	8004010 <HAL_OPAMP_SelfCalibrate+0x17e>
        {
          /* OPAMP_CSR_CALOUT is HIGH try higher trimming */
          trimmingvaluep += delta;
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	4413      	add	r3, r2
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	e003      	b.n	8004018 <HAL_OPAMP_SelfCalibrate+0x186>
        }
        else
        {
          /* OPAMP_CSR_CALOUT  is LOW try lower trimming */
          trimmingvaluep -= delta;
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	617b      	str	r3, [r7, #20]
        }

        /* Divide range by 2 to continue dichotomy sweep */
        delta >>= 1U;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	085b      	lsrs	r3, r3, #1
 800401c:	613b      	str	r3, [r7, #16]
      while (delta != 0U)
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1dd      	bne.n	8003fe0 <HAL_OPAMP_SelfCalibrate+0x14e>
      }

      /* Still need to check if right calibration is current value or one step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0  */
      /* Set candidate trimming */
      MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETP, (trimmingvaluep<<OPAMP_INPUT_NONINVERTING));
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	021b      	lsls	r3, r3, #8
 8004030:	431a      	orrs	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(OPAMP_TRIMMING_DELAY);
 8004036:	2001      	movs	r0, #1
 8004038:	f7fe f8ee 	bl	8002218 <HAL_Delay>

      if (READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT) != 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00b      	beq.n	8004062 <HAL_OPAMP_SelfCalibrate+0x1d0>
      {
        /* Trimming value is actually one value more */
        trimmingvaluep++;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	3301      	adds	r3, #1
 800404e:	617b      	str	r3, [r7, #20]
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETP, (trimmingvaluep<<OPAMP_INPUT_NONINVERTING));
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	021b      	lsls	r3, r3, #8
 800405c:	431a      	orrs	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	601a      	str	r2, [r3, #0]
      }

      /* Disable the OPAMP */
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0201 	bic.w	r2, r2, #1
 8004070:	601a      	str	r2, [r3, #0]

      /* Disable calibration & set normal mode (operating mode) */
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004080:	601a      	str	r2, [r3, #0]

      /* Self calibration is successful  */
      /* Store calibration(user trimming) results in init structure. */

      /* Set user trimming mode */
      hopamp->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004088:	61da      	str	r2, [r3, #28]

      /* Affect calibration parameters depending on mode normal/low power */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2b02      	cmp	r3, #2
 8004090:	d006      	beq.n	80040a0 <HAL_OPAMP_SelfCalibrate+0x20e>
      {
        /* Write calibration result N */
        hopamp->Init.TrimmingValueN = trimmingvaluen;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	625a      	str	r2, [r3, #36]	; 0x24
        /* Write calibration result P */
        hopamp->Init.TrimmingValueP = trimmingvaluep;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	621a      	str	r2, [r3, #32]
 800409e:	e005      	b.n	80040ac <HAL_OPAMP_SelfCalibrate+0x21a>
      }
      else
      {
        /* Write calibration result N */
        hopamp->Init.TrimmingValueNLowPower = trimmingvaluen;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	62da      	str	r2, [r3, #44]	; 0x2c
        /* Write calibration result P */
        hopamp->Init.TrimmingValuePLowPower = trimmingvaluep;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	629a      	str	r2, [r3, #40]	; 0x28
      }

    /* Restore OPAMP mode after calibration */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_OPAMODE, opampmode);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f023 010c 	bic.w	r1, r3, #12
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	430a      	orrs	r2, r1
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	e001      	b.n	80040c6 <HAL_OPAMP_SelfCalibrate+0x234>
    }
    else
    {
      /* OPAMP can not be calibrated from this mode */
      status = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 80040c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3720      	adds	r7, #32
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80040d4:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80040dc:	4618      	mov	r0, r3
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40007000 	.word	0x40007000

080040ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040fa:	d130      	bne.n	800415e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80040fc:	4b23      	ldr	r3, [pc, #140]	; (800418c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004108:	d038      	beq.n	800417c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800410a:	4b20      	ldr	r3, [pc, #128]	; (800418c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004112:	4a1e      	ldr	r2, [pc, #120]	; (800418c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004114:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004118:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800411a:	4b1d      	ldr	r3, [pc, #116]	; (8004190 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2232      	movs	r2, #50	; 0x32
 8004120:	fb02 f303 	mul.w	r3, r2, r3
 8004124:	4a1b      	ldr	r2, [pc, #108]	; (8004194 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	0c9b      	lsrs	r3, r3, #18
 800412c:	3301      	adds	r3, #1
 800412e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004130:	e002      	b.n	8004138 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3b01      	subs	r3, #1
 8004136:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004138:	4b14      	ldr	r3, [pc, #80]	; (800418c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004144:	d102      	bne.n	800414c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1f2      	bne.n	8004132 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800414c:	4b0f      	ldr	r3, [pc, #60]	; (800418c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004158:	d110      	bne.n	800417c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e00f      	b.n	800417e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800415e:	4b0b      	ldr	r3, [pc, #44]	; (800418c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800416a:	d007      	beq.n	800417c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800416c:	4b07      	ldr	r3, [pc, #28]	; (800418c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004174:	4a05      	ldr	r2, [pc, #20]	; (800418c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004176:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800417a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40007000 	.word	0x40007000
 8004190:	20000000 	.word	0x20000000
 8004194:	431bde83 	.word	0x431bde83

08004198 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e3ca      	b.n	8004940 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041aa:	4b97      	ldr	r3, [pc, #604]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 030c 	and.w	r3, r3, #12
 80041b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041b4:	4b94      	ldr	r3, [pc, #592]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f003 0303 	and.w	r3, r3, #3
 80041bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0310 	and.w	r3, r3, #16
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 80e4 	beq.w	8004394 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d007      	beq.n	80041e2 <HAL_RCC_OscConfig+0x4a>
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	2b0c      	cmp	r3, #12
 80041d6:	f040 808b 	bne.w	80042f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	f040 8087 	bne.w	80042f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041e2:	4b89      	ldr	r3, [pc, #548]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d005      	beq.n	80041fa <HAL_RCC_OscConfig+0x62>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e3a2      	b.n	8004940 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1a      	ldr	r2, [r3, #32]
 80041fe:	4b82      	ldr	r3, [pc, #520]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0308 	and.w	r3, r3, #8
 8004206:	2b00      	cmp	r3, #0
 8004208:	d004      	beq.n	8004214 <HAL_RCC_OscConfig+0x7c>
 800420a:	4b7f      	ldr	r3, [pc, #508]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004212:	e005      	b.n	8004220 <HAL_RCC_OscConfig+0x88>
 8004214:	4b7c      	ldr	r3, [pc, #496]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800421a:	091b      	lsrs	r3, r3, #4
 800421c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004220:	4293      	cmp	r3, r2
 8004222:	d223      	bcs.n	800426c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	4618      	mov	r0, r3
 800422a:	f000 fd55 	bl	8004cd8 <RCC_SetFlashLatencyFromMSIRange>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e383      	b.n	8004940 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004238:	4b73      	ldr	r3, [pc, #460]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a72      	ldr	r2, [pc, #456]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 800423e:	f043 0308 	orr.w	r3, r3, #8
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	4b70      	ldr	r3, [pc, #448]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	496d      	ldr	r1, [pc, #436]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004252:	4313      	orrs	r3, r2
 8004254:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004256:	4b6c      	ldr	r3, [pc, #432]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	4968      	ldr	r1, [pc, #416]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004266:	4313      	orrs	r3, r2
 8004268:	604b      	str	r3, [r1, #4]
 800426a:	e025      	b.n	80042b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800426c:	4b66      	ldr	r3, [pc, #408]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a65      	ldr	r2, [pc, #404]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004272:	f043 0308 	orr.w	r3, r3, #8
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	4b63      	ldr	r3, [pc, #396]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	4960      	ldr	r1, [pc, #384]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004286:	4313      	orrs	r3, r2
 8004288:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800428a:	4b5f      	ldr	r3, [pc, #380]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	495b      	ldr	r1, [pc, #364]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 800429a:	4313      	orrs	r3, r2
 800429c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d109      	bne.n	80042b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fd15 	bl	8004cd8 <RCC_SetFlashLatencyFromMSIRange>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e343      	b.n	8004940 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042b8:	f000 fc4a 	bl	8004b50 <HAL_RCC_GetSysClockFreq>
 80042bc:	4602      	mov	r2, r0
 80042be:	4b52      	ldr	r3, [pc, #328]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	091b      	lsrs	r3, r3, #4
 80042c4:	f003 030f 	and.w	r3, r3, #15
 80042c8:	4950      	ldr	r1, [pc, #320]	; (800440c <HAL_RCC_OscConfig+0x274>)
 80042ca:	5ccb      	ldrb	r3, [r1, r3]
 80042cc:	f003 031f 	and.w	r3, r3, #31
 80042d0:	fa22 f303 	lsr.w	r3, r2, r3
 80042d4:	4a4e      	ldr	r2, [pc, #312]	; (8004410 <HAL_RCC_OscConfig+0x278>)
 80042d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042d8:	4b4e      	ldr	r3, [pc, #312]	; (8004414 <HAL_RCC_OscConfig+0x27c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7fd ff3f 	bl	8002160 <HAL_InitTick>
 80042e2:	4603      	mov	r3, r0
 80042e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d052      	beq.n	8004392 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	e327      	b.n	8004940 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d032      	beq.n	800435e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042f8:	4b43      	ldr	r3, [pc, #268]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a42      	ldr	r2, [pc, #264]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 80042fe:	f043 0301 	orr.w	r3, r3, #1
 8004302:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004304:	f7fd ff7c 	bl	8002200 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800430c:	f7fd ff78 	bl	8002200 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e310      	b.n	8004940 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800431e:	4b3a      	ldr	r3, [pc, #232]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0f0      	beq.n	800430c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800432a:	4b37      	ldr	r3, [pc, #220]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a36      	ldr	r2, [pc, #216]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004330:	f043 0308 	orr.w	r3, r3, #8
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	4b34      	ldr	r3, [pc, #208]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	4931      	ldr	r1, [pc, #196]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004344:	4313      	orrs	r3, r2
 8004346:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004348:	4b2f      	ldr	r3, [pc, #188]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	021b      	lsls	r3, r3, #8
 8004356:	492c      	ldr	r1, [pc, #176]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004358:	4313      	orrs	r3, r2
 800435a:	604b      	str	r3, [r1, #4]
 800435c:	e01a      	b.n	8004394 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800435e:	4b2a      	ldr	r3, [pc, #168]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a29      	ldr	r2, [pc, #164]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004364:	f023 0301 	bic.w	r3, r3, #1
 8004368:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800436a:	f7fd ff49 	bl	8002200 <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004370:	e008      	b.n	8004384 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004372:	f7fd ff45 	bl	8002200 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e2dd      	b.n	8004940 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004384:	4b20      	ldr	r3, [pc, #128]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1f0      	bne.n	8004372 <HAL_RCC_OscConfig+0x1da>
 8004390:	e000      	b.n	8004394 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004392:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d074      	beq.n	800448a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d005      	beq.n	80043b2 <HAL_RCC_OscConfig+0x21a>
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	2b0c      	cmp	r3, #12
 80043aa:	d10e      	bne.n	80043ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d10b      	bne.n	80043ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b2:	4b15      	ldr	r3, [pc, #84]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d064      	beq.n	8004488 <HAL_RCC_OscConfig+0x2f0>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d160      	bne.n	8004488 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e2ba      	b.n	8004940 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d2:	d106      	bne.n	80043e2 <HAL_RCC_OscConfig+0x24a>
 80043d4:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a0b      	ldr	r2, [pc, #44]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 80043da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043de:	6013      	str	r3, [r2, #0]
 80043e0:	e026      	b.n	8004430 <HAL_RCC_OscConfig+0x298>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043ea:	d115      	bne.n	8004418 <HAL_RCC_OscConfig+0x280>
 80043ec:	4b06      	ldr	r3, [pc, #24]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a05      	ldr	r2, [pc, #20]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 80043f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	4b03      	ldr	r3, [pc, #12]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a02      	ldr	r2, [pc, #8]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 80043fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	e014      	b.n	8004430 <HAL_RCC_OscConfig+0x298>
 8004406:	bf00      	nop
 8004408:	40021000 	.word	0x40021000
 800440c:	0800a774 	.word	0x0800a774
 8004410:	20000000 	.word	0x20000000
 8004414:	20000004 	.word	0x20000004
 8004418:	4ba0      	ldr	r3, [pc, #640]	; (800469c <HAL_RCC_OscConfig+0x504>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a9f      	ldr	r2, [pc, #636]	; (800469c <HAL_RCC_OscConfig+0x504>)
 800441e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004422:	6013      	str	r3, [r2, #0]
 8004424:	4b9d      	ldr	r3, [pc, #628]	; (800469c <HAL_RCC_OscConfig+0x504>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a9c      	ldr	r2, [pc, #624]	; (800469c <HAL_RCC_OscConfig+0x504>)
 800442a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800442e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d013      	beq.n	8004460 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7fd fee2 	bl	8002200 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004440:	f7fd fede 	bl	8002200 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b64      	cmp	r3, #100	; 0x64
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e276      	b.n	8004940 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004452:	4b92      	ldr	r3, [pc, #584]	; (800469c <HAL_RCC_OscConfig+0x504>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f0      	beq.n	8004440 <HAL_RCC_OscConfig+0x2a8>
 800445e:	e014      	b.n	800448a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fd fece 	bl	8002200 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004468:	f7fd feca 	bl	8002200 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b64      	cmp	r3, #100	; 0x64
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e262      	b.n	8004940 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800447a:	4b88      	ldr	r3, [pc, #544]	; (800469c <HAL_RCC_OscConfig+0x504>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f0      	bne.n	8004468 <HAL_RCC_OscConfig+0x2d0>
 8004486:	e000      	b.n	800448a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d060      	beq.n	8004558 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	2b04      	cmp	r3, #4
 800449a:	d005      	beq.n	80044a8 <HAL_RCC_OscConfig+0x310>
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b0c      	cmp	r3, #12
 80044a0:	d119      	bne.n	80044d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d116      	bne.n	80044d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044a8:	4b7c      	ldr	r3, [pc, #496]	; (800469c <HAL_RCC_OscConfig+0x504>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_RCC_OscConfig+0x328>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e23f      	b.n	8004940 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c0:	4b76      	ldr	r3, [pc, #472]	; (800469c <HAL_RCC_OscConfig+0x504>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	061b      	lsls	r3, r3, #24
 80044ce:	4973      	ldr	r1, [pc, #460]	; (800469c <HAL_RCC_OscConfig+0x504>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044d4:	e040      	b.n	8004558 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d023      	beq.n	8004526 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044de:	4b6f      	ldr	r3, [pc, #444]	; (800469c <HAL_RCC_OscConfig+0x504>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a6e      	ldr	r2, [pc, #440]	; (800469c <HAL_RCC_OscConfig+0x504>)
 80044e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ea:	f7fd fe89 	bl	8002200 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044f2:	f7fd fe85 	bl	8002200 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e21d      	b.n	8004940 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004504:	4b65      	ldr	r3, [pc, #404]	; (800469c <HAL_RCC_OscConfig+0x504>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0f0      	beq.n	80044f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004510:	4b62      	ldr	r3, [pc, #392]	; (800469c <HAL_RCC_OscConfig+0x504>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	061b      	lsls	r3, r3, #24
 800451e:	495f      	ldr	r1, [pc, #380]	; (800469c <HAL_RCC_OscConfig+0x504>)
 8004520:	4313      	orrs	r3, r2
 8004522:	604b      	str	r3, [r1, #4]
 8004524:	e018      	b.n	8004558 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004526:	4b5d      	ldr	r3, [pc, #372]	; (800469c <HAL_RCC_OscConfig+0x504>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a5c      	ldr	r2, [pc, #368]	; (800469c <HAL_RCC_OscConfig+0x504>)
 800452c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004530:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004532:	f7fd fe65 	bl	8002200 <HAL_GetTick>
 8004536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004538:	e008      	b.n	800454c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800453a:	f7fd fe61 	bl	8002200 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e1f9      	b.n	8004940 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800454c:	4b53      	ldr	r3, [pc, #332]	; (800469c <HAL_RCC_OscConfig+0x504>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1f0      	bne.n	800453a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0308 	and.w	r3, r3, #8
 8004560:	2b00      	cmp	r3, #0
 8004562:	d03c      	beq.n	80045de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d01c      	beq.n	80045a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800456c:	4b4b      	ldr	r3, [pc, #300]	; (800469c <HAL_RCC_OscConfig+0x504>)
 800456e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004572:	4a4a      	ldr	r2, [pc, #296]	; (800469c <HAL_RCC_OscConfig+0x504>)
 8004574:	f043 0301 	orr.w	r3, r3, #1
 8004578:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457c:	f7fd fe40 	bl	8002200 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004584:	f7fd fe3c 	bl	8002200 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e1d4      	b.n	8004940 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004596:	4b41      	ldr	r3, [pc, #260]	; (800469c <HAL_RCC_OscConfig+0x504>)
 8004598:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0ef      	beq.n	8004584 <HAL_RCC_OscConfig+0x3ec>
 80045a4:	e01b      	b.n	80045de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045a6:	4b3d      	ldr	r3, [pc, #244]	; (800469c <HAL_RCC_OscConfig+0x504>)
 80045a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045ac:	4a3b      	ldr	r2, [pc, #236]	; (800469c <HAL_RCC_OscConfig+0x504>)
 80045ae:	f023 0301 	bic.w	r3, r3, #1
 80045b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b6:	f7fd fe23 	bl	8002200 <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045be:	f7fd fe1f 	bl	8002200 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e1b7      	b.n	8004940 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045d0:	4b32      	ldr	r3, [pc, #200]	; (800469c <HAL_RCC_OscConfig+0x504>)
 80045d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1ef      	bne.n	80045be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 80a6 	beq.w	8004738 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ec:	2300      	movs	r3, #0
 80045ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80045f0:	4b2a      	ldr	r3, [pc, #168]	; (800469c <HAL_RCC_OscConfig+0x504>)
 80045f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10d      	bne.n	8004618 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045fc:	4b27      	ldr	r3, [pc, #156]	; (800469c <HAL_RCC_OscConfig+0x504>)
 80045fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004600:	4a26      	ldr	r2, [pc, #152]	; (800469c <HAL_RCC_OscConfig+0x504>)
 8004602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004606:	6593      	str	r3, [r2, #88]	; 0x58
 8004608:	4b24      	ldr	r3, [pc, #144]	; (800469c <HAL_RCC_OscConfig+0x504>)
 800460a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004610:	60bb      	str	r3, [r7, #8]
 8004612:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004614:	2301      	movs	r3, #1
 8004616:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004618:	4b21      	ldr	r3, [pc, #132]	; (80046a0 <HAL_RCC_OscConfig+0x508>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004620:	2b00      	cmp	r3, #0
 8004622:	d118      	bne.n	8004656 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004624:	4b1e      	ldr	r3, [pc, #120]	; (80046a0 <HAL_RCC_OscConfig+0x508>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a1d      	ldr	r2, [pc, #116]	; (80046a0 <HAL_RCC_OscConfig+0x508>)
 800462a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800462e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004630:	f7fd fde6 	bl	8002200 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004638:	f7fd fde2 	bl	8002200 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e17a      	b.n	8004940 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800464a:	4b15      	ldr	r3, [pc, #84]	; (80046a0 <HAL_RCC_OscConfig+0x508>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0f0      	beq.n	8004638 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d108      	bne.n	8004670 <HAL_RCC_OscConfig+0x4d8>
 800465e:	4b0f      	ldr	r3, [pc, #60]	; (800469c <HAL_RCC_OscConfig+0x504>)
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004664:	4a0d      	ldr	r2, [pc, #52]	; (800469c <HAL_RCC_OscConfig+0x504>)
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800466e:	e029      	b.n	80046c4 <HAL_RCC_OscConfig+0x52c>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	2b05      	cmp	r3, #5
 8004676:	d115      	bne.n	80046a4 <HAL_RCC_OscConfig+0x50c>
 8004678:	4b08      	ldr	r3, [pc, #32]	; (800469c <HAL_RCC_OscConfig+0x504>)
 800467a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467e:	4a07      	ldr	r2, [pc, #28]	; (800469c <HAL_RCC_OscConfig+0x504>)
 8004680:	f043 0304 	orr.w	r3, r3, #4
 8004684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004688:	4b04      	ldr	r3, [pc, #16]	; (800469c <HAL_RCC_OscConfig+0x504>)
 800468a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468e:	4a03      	ldr	r2, [pc, #12]	; (800469c <HAL_RCC_OscConfig+0x504>)
 8004690:	f043 0301 	orr.w	r3, r3, #1
 8004694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004698:	e014      	b.n	80046c4 <HAL_RCC_OscConfig+0x52c>
 800469a:	bf00      	nop
 800469c:	40021000 	.word	0x40021000
 80046a0:	40007000 	.word	0x40007000
 80046a4:	4b9c      	ldr	r3, [pc, #624]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046aa:	4a9b      	ldr	r2, [pc, #620]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046b4:	4b98      	ldr	r3, [pc, #608]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 80046b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ba:	4a97      	ldr	r2, [pc, #604]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 80046bc:	f023 0304 	bic.w	r3, r3, #4
 80046c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d016      	beq.n	80046fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046cc:	f7fd fd98 	bl	8002200 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046d2:	e00a      	b.n	80046ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046d4:	f7fd fd94 	bl	8002200 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e12a      	b.n	8004940 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ea:	4b8b      	ldr	r3, [pc, #556]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 80046ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0ed      	beq.n	80046d4 <HAL_RCC_OscConfig+0x53c>
 80046f8:	e015      	b.n	8004726 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fa:	f7fd fd81 	bl	8002200 <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004700:	e00a      	b.n	8004718 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004702:	f7fd fd7d 	bl	8002200 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004710:	4293      	cmp	r3, r2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e113      	b.n	8004940 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004718:	4b7f      	ldr	r3, [pc, #508]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 800471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1ed      	bne.n	8004702 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004726:	7ffb      	ldrb	r3, [r7, #31]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d105      	bne.n	8004738 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800472c:	4b7a      	ldr	r3, [pc, #488]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 800472e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004730:	4a79      	ldr	r2, [pc, #484]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 8004732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004736:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 80fe 	beq.w	800493e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004746:	2b02      	cmp	r3, #2
 8004748:	f040 80d0 	bne.w	80048ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800474c:	4b72      	ldr	r3, [pc, #456]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f003 0203 	and.w	r2, r3, #3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	429a      	cmp	r2, r3
 800475e:	d130      	bne.n	80047c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476a:	3b01      	subs	r3, #1
 800476c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800476e:	429a      	cmp	r2, r3
 8004770:	d127      	bne.n	80047c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800477e:	429a      	cmp	r2, r3
 8004780:	d11f      	bne.n	80047c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800478c:	2a07      	cmp	r2, #7
 800478e:	bf14      	ite	ne
 8004790:	2201      	movne	r2, #1
 8004792:	2200      	moveq	r2, #0
 8004794:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004796:	4293      	cmp	r3, r2
 8004798:	d113      	bne.n	80047c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a4:	085b      	lsrs	r3, r3, #1
 80047a6:	3b01      	subs	r3, #1
 80047a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d109      	bne.n	80047c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	085b      	lsrs	r3, r3, #1
 80047ba:	3b01      	subs	r3, #1
 80047bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047be:	429a      	cmp	r2, r3
 80047c0:	d06e      	beq.n	80048a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	2b0c      	cmp	r3, #12
 80047c6:	d069      	beq.n	800489c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80047c8:	4b53      	ldr	r3, [pc, #332]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d105      	bne.n	80047e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80047d4:	4b50      	ldr	r3, [pc, #320]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e0ad      	b.n	8004940 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80047e4:	4b4c      	ldr	r3, [pc, #304]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a4b      	ldr	r2, [pc, #300]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 80047ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047f0:	f7fd fd06 	bl	8002200 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f8:	f7fd fd02 	bl	8002200 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e09a      	b.n	8004940 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800480a:	4b43      	ldr	r3, [pc, #268]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1f0      	bne.n	80047f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004816:	4b40      	ldr	r3, [pc, #256]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	4b40      	ldr	r3, [pc, #256]	; (800491c <HAL_RCC_OscConfig+0x784>)
 800481c:	4013      	ands	r3, r2
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004826:	3a01      	subs	r2, #1
 8004828:	0112      	lsls	r2, r2, #4
 800482a:	4311      	orrs	r1, r2
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004830:	0212      	lsls	r2, r2, #8
 8004832:	4311      	orrs	r1, r2
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004838:	0852      	lsrs	r2, r2, #1
 800483a:	3a01      	subs	r2, #1
 800483c:	0552      	lsls	r2, r2, #21
 800483e:	4311      	orrs	r1, r2
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004844:	0852      	lsrs	r2, r2, #1
 8004846:	3a01      	subs	r2, #1
 8004848:	0652      	lsls	r2, r2, #25
 800484a:	4311      	orrs	r1, r2
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004850:	0912      	lsrs	r2, r2, #4
 8004852:	0452      	lsls	r2, r2, #17
 8004854:	430a      	orrs	r2, r1
 8004856:	4930      	ldr	r1, [pc, #192]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 8004858:	4313      	orrs	r3, r2
 800485a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800485c:	4b2e      	ldr	r3, [pc, #184]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a2d      	ldr	r2, [pc, #180]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 8004862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004866:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004868:	4b2b      	ldr	r3, [pc, #172]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	4a2a      	ldr	r2, [pc, #168]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 800486e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004872:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004874:	f7fd fcc4 	bl	8002200 <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800487c:	f7fd fcc0 	bl	8002200 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e058      	b.n	8004940 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800488e:	4b22      	ldr	r3, [pc, #136]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0f0      	beq.n	800487c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800489a:	e050      	b.n	800493e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e04f      	b.n	8004940 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048a0:	4b1d      	ldr	r3, [pc, #116]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d148      	bne.n	800493e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80048ac:	4b1a      	ldr	r3, [pc, #104]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a19      	ldr	r2, [pc, #100]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 80048b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048b8:	4b17      	ldr	r3, [pc, #92]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	4a16      	ldr	r2, [pc, #88]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 80048be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048c4:	f7fd fc9c 	bl	8002200 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048cc:	f7fd fc98 	bl	8002200 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e030      	b.n	8004940 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048de:	4b0e      	ldr	r3, [pc, #56]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0f0      	beq.n	80048cc <HAL_RCC_OscConfig+0x734>
 80048ea:	e028      	b.n	800493e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	2b0c      	cmp	r3, #12
 80048f0:	d023      	beq.n	800493a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f2:	4b09      	ldr	r3, [pc, #36]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a08      	ldr	r2, [pc, #32]	; (8004918 <HAL_RCC_OscConfig+0x780>)
 80048f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fe:	f7fd fc7f 	bl	8002200 <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004904:	e00c      	b.n	8004920 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004906:	f7fd fc7b 	bl	8002200 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d905      	bls.n	8004920 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e013      	b.n	8004940 <HAL_RCC_OscConfig+0x7a8>
 8004918:	40021000 	.word	0x40021000
 800491c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004920:	4b09      	ldr	r3, [pc, #36]	; (8004948 <HAL_RCC_OscConfig+0x7b0>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1ec      	bne.n	8004906 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800492c:	4b06      	ldr	r3, [pc, #24]	; (8004948 <HAL_RCC_OscConfig+0x7b0>)
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	4905      	ldr	r1, [pc, #20]	; (8004948 <HAL_RCC_OscConfig+0x7b0>)
 8004932:	4b06      	ldr	r3, [pc, #24]	; (800494c <HAL_RCC_OscConfig+0x7b4>)
 8004934:	4013      	ands	r3, r2
 8004936:	60cb      	str	r3, [r1, #12]
 8004938:	e001      	b.n	800493e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3720      	adds	r7, #32
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40021000 	.word	0x40021000
 800494c:	feeefffc 	.word	0xfeeefffc

08004950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e0e7      	b.n	8004b34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004964:	4b75      	ldr	r3, [pc, #468]	; (8004b3c <HAL_RCC_ClockConfig+0x1ec>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d910      	bls.n	8004994 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004972:	4b72      	ldr	r3, [pc, #456]	; (8004b3c <HAL_RCC_ClockConfig+0x1ec>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f023 0207 	bic.w	r2, r3, #7
 800497a:	4970      	ldr	r1, [pc, #448]	; (8004b3c <HAL_RCC_ClockConfig+0x1ec>)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	4313      	orrs	r3, r2
 8004980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004982:	4b6e      	ldr	r3, [pc, #440]	; (8004b3c <HAL_RCC_ClockConfig+0x1ec>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d001      	beq.n	8004994 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e0cf      	b.n	8004b34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d010      	beq.n	80049c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	4b66      	ldr	r3, [pc, #408]	; (8004b40 <HAL_RCC_ClockConfig+0x1f0>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d908      	bls.n	80049c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049b0:	4b63      	ldr	r3, [pc, #396]	; (8004b40 <HAL_RCC_ClockConfig+0x1f0>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	4960      	ldr	r1, [pc, #384]	; (8004b40 <HAL_RCC_ClockConfig+0x1f0>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d04c      	beq.n	8004a68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d107      	bne.n	80049e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049d6:	4b5a      	ldr	r3, [pc, #360]	; (8004b40 <HAL_RCC_ClockConfig+0x1f0>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d121      	bne.n	8004a26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e0a6      	b.n	8004b34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d107      	bne.n	80049fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ee:	4b54      	ldr	r3, [pc, #336]	; (8004b40 <HAL_RCC_ClockConfig+0x1f0>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d115      	bne.n	8004a26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e09a      	b.n	8004b34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d107      	bne.n	8004a16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a06:	4b4e      	ldr	r3, [pc, #312]	; (8004b40 <HAL_RCC_ClockConfig+0x1f0>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d109      	bne.n	8004a26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e08e      	b.n	8004b34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a16:	4b4a      	ldr	r3, [pc, #296]	; (8004b40 <HAL_RCC_ClockConfig+0x1f0>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e086      	b.n	8004b34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a26:	4b46      	ldr	r3, [pc, #280]	; (8004b40 <HAL_RCC_ClockConfig+0x1f0>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f023 0203 	bic.w	r2, r3, #3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	4943      	ldr	r1, [pc, #268]	; (8004b40 <HAL_RCC_ClockConfig+0x1f0>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a38:	f7fd fbe2 	bl	8002200 <HAL_GetTick>
 8004a3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a3e:	e00a      	b.n	8004a56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a40:	f7fd fbde 	bl	8002200 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e06e      	b.n	8004b34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a56:	4b3a      	ldr	r3, [pc, #232]	; (8004b40 <HAL_RCC_ClockConfig+0x1f0>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 020c 	and.w	r2, r3, #12
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d1eb      	bne.n	8004a40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d010      	beq.n	8004a96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	4b31      	ldr	r3, [pc, #196]	; (8004b40 <HAL_RCC_ClockConfig+0x1f0>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d208      	bcs.n	8004a96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a84:	4b2e      	ldr	r3, [pc, #184]	; (8004b40 <HAL_RCC_ClockConfig+0x1f0>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	492b      	ldr	r1, [pc, #172]	; (8004b40 <HAL_RCC_ClockConfig+0x1f0>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a96:	4b29      	ldr	r3, [pc, #164]	; (8004b3c <HAL_RCC_ClockConfig+0x1ec>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d210      	bcs.n	8004ac6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa4:	4b25      	ldr	r3, [pc, #148]	; (8004b3c <HAL_RCC_ClockConfig+0x1ec>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f023 0207 	bic.w	r2, r3, #7
 8004aac:	4923      	ldr	r1, [pc, #140]	; (8004b3c <HAL_RCC_ClockConfig+0x1ec>)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab4:	4b21      	ldr	r3, [pc, #132]	; (8004b3c <HAL_RCC_ClockConfig+0x1ec>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d001      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e036      	b.n	8004b34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0304 	and.w	r3, r3, #4
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d008      	beq.n	8004ae4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ad2:	4b1b      	ldr	r3, [pc, #108]	; (8004b40 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	4918      	ldr	r1, [pc, #96]	; (8004b40 <HAL_RCC_ClockConfig+0x1f0>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d009      	beq.n	8004b04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004af0:	4b13      	ldr	r3, [pc, #76]	; (8004b40 <HAL_RCC_ClockConfig+0x1f0>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	4910      	ldr	r1, [pc, #64]	; (8004b40 <HAL_RCC_ClockConfig+0x1f0>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b04:	f000 f824 	bl	8004b50 <HAL_RCC_GetSysClockFreq>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	4b0d      	ldr	r3, [pc, #52]	; (8004b40 <HAL_RCC_ClockConfig+0x1f0>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	091b      	lsrs	r3, r3, #4
 8004b10:	f003 030f 	and.w	r3, r3, #15
 8004b14:	490b      	ldr	r1, [pc, #44]	; (8004b44 <HAL_RCC_ClockConfig+0x1f4>)
 8004b16:	5ccb      	ldrb	r3, [r1, r3]
 8004b18:	f003 031f 	and.w	r3, r3, #31
 8004b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b20:	4a09      	ldr	r2, [pc, #36]	; (8004b48 <HAL_RCC_ClockConfig+0x1f8>)
 8004b22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b24:	4b09      	ldr	r3, [pc, #36]	; (8004b4c <HAL_RCC_ClockConfig+0x1fc>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fd fb19 	bl	8002160 <HAL_InitTick>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b32:	7afb      	ldrb	r3, [r7, #11]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40022000 	.word	0x40022000
 8004b40:	40021000 	.word	0x40021000
 8004b44:	0800a774 	.word	0x0800a774
 8004b48:	20000000 	.word	0x20000000
 8004b4c:	20000004 	.word	0x20000004

08004b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b089      	sub	sp, #36	; 0x24
 8004b54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	61fb      	str	r3, [r7, #28]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b5e:	4b3e      	ldr	r3, [pc, #248]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 030c 	and.w	r3, r3, #12
 8004b66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b68:	4b3b      	ldr	r3, [pc, #236]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f003 0303 	and.w	r3, r3, #3
 8004b70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d005      	beq.n	8004b84 <HAL_RCC_GetSysClockFreq+0x34>
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	2b0c      	cmp	r3, #12
 8004b7c:	d121      	bne.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d11e      	bne.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b84:	4b34      	ldr	r3, [pc, #208]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d107      	bne.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b90:	4b31      	ldr	r3, [pc, #196]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b96:	0a1b      	lsrs	r3, r3, #8
 8004b98:	f003 030f 	and.w	r3, r3, #15
 8004b9c:	61fb      	str	r3, [r7, #28]
 8004b9e:	e005      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ba0:	4b2d      	ldr	r3, [pc, #180]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	091b      	lsrs	r3, r3, #4
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004bac:	4a2b      	ldr	r2, [pc, #172]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10d      	bne.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bc0:	e00a      	b.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d102      	bne.n	8004bce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004bc8:	4b25      	ldr	r3, [pc, #148]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x110>)
 8004bca:	61bb      	str	r3, [r7, #24]
 8004bcc:	e004      	b.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d101      	bne.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bd4:	4b23      	ldr	r3, [pc, #140]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x114>)
 8004bd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	2b0c      	cmp	r3, #12
 8004bdc:	d134      	bne.n	8004c48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bde:	4b1e      	ldr	r3, [pc, #120]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d003      	beq.n	8004bf6 <HAL_RCC_GetSysClockFreq+0xa6>
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d003      	beq.n	8004bfc <HAL_RCC_GetSysClockFreq+0xac>
 8004bf4:	e005      	b.n	8004c02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004bf6:	4b1a      	ldr	r3, [pc, #104]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x110>)
 8004bf8:	617b      	str	r3, [r7, #20]
      break;
 8004bfa:	e005      	b.n	8004c08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004bfc:	4b19      	ldr	r3, [pc, #100]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x114>)
 8004bfe:	617b      	str	r3, [r7, #20]
      break;
 8004c00:	e002      	b.n	8004c08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	617b      	str	r3, [r7, #20]
      break;
 8004c06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c08:	4b13      	ldr	r3, [pc, #76]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	091b      	lsrs	r3, r3, #4
 8004c0e:	f003 0307 	and.w	r3, r3, #7
 8004c12:	3301      	adds	r3, #1
 8004c14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c16:	4b10      	ldr	r3, [pc, #64]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	0a1b      	lsrs	r3, r3, #8
 8004c1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	fb03 f202 	mul.w	r2, r3, r2
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c2e:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	0e5b      	lsrs	r3, r3, #25
 8004c34:	f003 0303 	and.w	r3, r3, #3
 8004c38:	3301      	adds	r3, #1
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c48:	69bb      	ldr	r3, [r7, #24]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3724      	adds	r7, #36	; 0x24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	0800a78c 	.word	0x0800a78c
 8004c60:	00f42400 	.word	0x00f42400
 8004c64:	007a1200 	.word	0x007a1200

08004c68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c6c:	4b03      	ldr	r3, [pc, #12]	; (8004c7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	20000000 	.word	0x20000000

08004c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c84:	f7ff fff0 	bl	8004c68 <HAL_RCC_GetHCLKFreq>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	0a1b      	lsrs	r3, r3, #8
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	4904      	ldr	r1, [pc, #16]	; (8004ca8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c96:	5ccb      	ldrb	r3, [r1, r3]
 8004c98:	f003 031f 	and.w	r3, r3, #31
 8004c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	0800a784 	.word	0x0800a784

08004cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004cb0:	f7ff ffda 	bl	8004c68 <HAL_RCC_GetHCLKFreq>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	0adb      	lsrs	r3, r3, #11
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	4904      	ldr	r1, [pc, #16]	; (8004cd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004cc2:	5ccb      	ldrb	r3, [r1, r3]
 8004cc4:	f003 031f 	and.w	r3, r3, #31
 8004cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	0800a784 	.word	0x0800a784

08004cd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ce4:	4b2a      	ldr	r3, [pc, #168]	; (8004d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004cf0:	f7ff f9ee 	bl	80040d0 <HAL_PWREx_GetVoltageRange>
 8004cf4:	6178      	str	r0, [r7, #20]
 8004cf6:	e014      	b.n	8004d22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cf8:	4b25      	ldr	r3, [pc, #148]	; (8004d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cfc:	4a24      	ldr	r2, [pc, #144]	; (8004d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d02:	6593      	str	r3, [r2, #88]	; 0x58
 8004d04:	4b22      	ldr	r3, [pc, #136]	; (8004d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d10:	f7ff f9de 	bl	80040d0 <HAL_PWREx_GetVoltageRange>
 8004d14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d16:	4b1e      	ldr	r3, [pc, #120]	; (8004d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1a:	4a1d      	ldr	r2, [pc, #116]	; (8004d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d28:	d10b      	bne.n	8004d42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b80      	cmp	r3, #128	; 0x80
 8004d2e:	d919      	bls.n	8004d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2ba0      	cmp	r3, #160	; 0xa0
 8004d34:	d902      	bls.n	8004d3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d36:	2302      	movs	r3, #2
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	e013      	b.n	8004d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	e010      	b.n	8004d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b80      	cmp	r3, #128	; 0x80
 8004d46:	d902      	bls.n	8004d4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004d48:	2303      	movs	r3, #3
 8004d4a:	613b      	str	r3, [r7, #16]
 8004d4c:	e00a      	b.n	8004d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b80      	cmp	r3, #128	; 0x80
 8004d52:	d102      	bne.n	8004d5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d54:	2302      	movs	r3, #2
 8004d56:	613b      	str	r3, [r7, #16]
 8004d58:	e004      	b.n	8004d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b70      	cmp	r3, #112	; 0x70
 8004d5e:	d101      	bne.n	8004d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d60:	2301      	movs	r3, #1
 8004d62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d64:	4b0b      	ldr	r3, [pc, #44]	; (8004d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f023 0207 	bic.w	r2, r3, #7
 8004d6c:	4909      	ldr	r1, [pc, #36]	; (8004d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d74:	4b07      	ldr	r3, [pc, #28]	; (8004d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d001      	beq.n	8004d86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e000      	b.n	8004d88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3718      	adds	r7, #24
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40021000 	.word	0x40021000
 8004d94:	40022000 	.word	0x40022000

08004d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004da0:	2300      	movs	r3, #0
 8004da2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004da4:	2300      	movs	r3, #0
 8004da6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d041      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004db8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004dbc:	d02a      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004dbe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004dc2:	d824      	bhi.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004dc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004dc8:	d008      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004dca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004dce:	d81e      	bhi.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00a      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004dd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dd8:	d010      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004dda:	e018      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ddc:	4b86      	ldr	r3, [pc, #536]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	4a85      	ldr	r2, [pc, #532]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004de8:	e015      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	3304      	adds	r3, #4
 8004dee:	2100      	movs	r1, #0
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 fabb 	bl	800536c <RCCEx_PLLSAI1_Config>
 8004df6:	4603      	mov	r3, r0
 8004df8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004dfa:	e00c      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3320      	adds	r3, #32
 8004e00:	2100      	movs	r1, #0
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fba6 	bl	8005554 <RCCEx_PLLSAI2_Config>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e0c:	e003      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	74fb      	strb	r3, [r7, #19]
      break;
 8004e12:	e000      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004e14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e16:	7cfb      	ldrb	r3, [r7, #19]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10b      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e1c:	4b76      	ldr	r3, [pc, #472]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e2a:	4973      	ldr	r1, [pc, #460]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004e32:	e001      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e34:	7cfb      	ldrb	r3, [r7, #19]
 8004e36:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d041      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e4c:	d02a      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004e4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e52:	d824      	bhi.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004e54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e58:	d008      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004e5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e5e:	d81e      	bhi.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00a      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e68:	d010      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e6a:	e018      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e6c:	4b62      	ldr	r3, [pc, #392]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	4a61      	ldr	r2, [pc, #388]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e76:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e78:	e015      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	2100      	movs	r1, #0
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 fa73 	bl	800536c <RCCEx_PLLSAI1_Config>
 8004e86:	4603      	mov	r3, r0
 8004e88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e8a:	e00c      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3320      	adds	r3, #32
 8004e90:	2100      	movs	r1, #0
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fb5e 	bl	8005554 <RCCEx_PLLSAI2_Config>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e9c:	e003      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	74fb      	strb	r3, [r7, #19]
      break;
 8004ea2:	e000      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004ea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ea6:	7cfb      	ldrb	r3, [r7, #19]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10b      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004eac:	4b52      	ldr	r3, [pc, #328]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eba:	494f      	ldr	r1, [pc, #316]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ec2:	e001      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec4:	7cfb      	ldrb	r3, [r7, #19]
 8004ec6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 80a0 	beq.w	8005016 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004eda:	4b47      	ldr	r3, [pc, #284]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004eea:	2300      	movs	r3, #0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00d      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ef0:	4b41      	ldr	r3, [pc, #260]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef4:	4a40      	ldr	r2, [pc, #256]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004efa:	6593      	str	r3, [r2, #88]	; 0x58
 8004efc:	4b3e      	ldr	r3, [pc, #248]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f04:	60bb      	str	r3, [r7, #8]
 8004f06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f0c:	4b3b      	ldr	r3, [pc, #236]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a3a      	ldr	r2, [pc, #232]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f18:	f7fd f972 	bl	8002200 <HAL_GetTick>
 8004f1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f1e:	e009      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f20:	f7fd f96e 	bl	8002200 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d902      	bls.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	74fb      	strb	r3, [r7, #19]
        break;
 8004f32:	e005      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f34:	4b31      	ldr	r3, [pc, #196]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d0ef      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004f40:	7cfb      	ldrb	r3, [r7, #19]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d15c      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f46:	4b2c      	ldr	r3, [pc, #176]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d01f      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d019      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f64:	4b24      	ldr	r3, [pc, #144]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f70:	4b21      	ldr	r3, [pc, #132]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f76:	4a20      	ldr	r2, [pc, #128]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f80:	4b1d      	ldr	r3, [pc, #116]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f86:	4a1c      	ldr	r2, [pc, #112]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f90:	4a19      	ldr	r2, [pc, #100]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d016      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa2:	f7fd f92d 	bl	8002200 <HAL_GetTick>
 8004fa6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fa8:	e00b      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004faa:	f7fd f929 	bl	8002200 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d902      	bls.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	74fb      	strb	r3, [r7, #19]
            break;
 8004fc0:	e006      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fc2:	4b0d      	ldr	r3, [pc, #52]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d0ec      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004fd0:	7cfb      	ldrb	r3, [r7, #19]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10c      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fd6:	4b08      	ldr	r3, [pc, #32]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fe6:	4904      	ldr	r1, [pc, #16]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004fee:	e009      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ff0:	7cfb      	ldrb	r3, [r7, #19]
 8004ff2:	74bb      	strb	r3, [r7, #18]
 8004ff4:	e006      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004ff6:	bf00      	nop
 8004ff8:	40021000 	.word	0x40021000
 8004ffc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005000:	7cfb      	ldrb	r3, [r7, #19]
 8005002:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005004:	7c7b      	ldrb	r3, [r7, #17]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d105      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800500a:	4b9e      	ldr	r3, [pc, #632]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800500c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500e:	4a9d      	ldr	r2, [pc, #628]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005014:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005022:	4b98      	ldr	r3, [pc, #608]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005028:	f023 0203 	bic.w	r2, r3, #3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005030:	4994      	ldr	r1, [pc, #592]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00a      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005044:	4b8f      	ldr	r3, [pc, #572]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504a:	f023 020c 	bic.w	r2, r3, #12
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005052:	498c      	ldr	r1, [pc, #560]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0304 	and.w	r3, r3, #4
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005066:	4b87      	ldr	r3, [pc, #540]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005074:	4983      	ldr	r1, [pc, #524]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00a      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005088:	4b7e      	ldr	r3, [pc, #504]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800508a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005096:	497b      	ldr	r1, [pc, #492]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0310 	and.w	r3, r3, #16
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050aa:	4b76      	ldr	r3, [pc, #472]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b8:	4972      	ldr	r1, [pc, #456]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0320 	and.w	r3, r3, #32
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00a      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050cc:	4b6d      	ldr	r3, [pc, #436]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050da:	496a      	ldr	r1, [pc, #424]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050ee:	4b65      	ldr	r3, [pc, #404]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fc:	4961      	ldr	r1, [pc, #388]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00a      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005110:	4b5c      	ldr	r3, [pc, #368]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005116:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800511e:	4959      	ldr	r1, [pc, #356]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005120:	4313      	orrs	r3, r2
 8005122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005132:	4b54      	ldr	r3, [pc, #336]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005138:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005140:	4950      	ldr	r1, [pc, #320]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005154:	4b4b      	ldr	r3, [pc, #300]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005162:	4948      	ldr	r1, [pc, #288]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005164:	4313      	orrs	r3, r2
 8005166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005176:	4b43      	ldr	r3, [pc, #268]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005184:	493f      	ldr	r1, [pc, #252]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005186:	4313      	orrs	r3, r2
 8005188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d028      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005198:	4b3a      	ldr	r3, [pc, #232]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800519a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051a6:	4937      	ldr	r1, [pc, #220]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051b6:	d106      	bne.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051b8:	4b32      	ldr	r3, [pc, #200]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	4a31      	ldr	r2, [pc, #196]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051c2:	60d3      	str	r3, [r2, #12]
 80051c4:	e011      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051ce:	d10c      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3304      	adds	r3, #4
 80051d4:	2101      	movs	r1, #1
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 f8c8 	bl	800536c <RCCEx_PLLSAI1_Config>
 80051dc:	4603      	mov	r3, r0
 80051de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80051e0:	7cfb      	ldrb	r3, [r7, #19]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80051e6:	7cfb      	ldrb	r3, [r7, #19]
 80051e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d028      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051f6:	4b23      	ldr	r3, [pc, #140]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005204:	491f      	ldr	r1, [pc, #124]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005210:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005214:	d106      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005216:	4b1b      	ldr	r3, [pc, #108]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	4a1a      	ldr	r2, [pc, #104]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800521c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005220:	60d3      	str	r3, [r2, #12]
 8005222:	e011      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005228:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800522c:	d10c      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	3304      	adds	r3, #4
 8005232:	2101      	movs	r1, #1
 8005234:	4618      	mov	r0, r3
 8005236:	f000 f899 	bl	800536c <RCCEx_PLLSAI1_Config>
 800523a:	4603      	mov	r3, r0
 800523c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800523e:	7cfb      	ldrb	r3, [r7, #19]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005244:	7cfb      	ldrb	r3, [r7, #19]
 8005246:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d02b      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005254:	4b0b      	ldr	r3, [pc, #44]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005262:	4908      	ldr	r1, [pc, #32]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800526e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005272:	d109      	bne.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005274:	4b03      	ldr	r3, [pc, #12]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	4a02      	ldr	r2, [pc, #8]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800527a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800527e:	60d3      	str	r3, [r2, #12]
 8005280:	e014      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005282:	bf00      	nop
 8005284:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800528c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005290:	d10c      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	3304      	adds	r3, #4
 8005296:	2101      	movs	r1, #1
 8005298:	4618      	mov	r0, r3
 800529a:	f000 f867 	bl	800536c <RCCEx_PLLSAI1_Config>
 800529e:	4603      	mov	r3, r0
 80052a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052a2:	7cfb      	ldrb	r3, [r7, #19]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80052a8:	7cfb      	ldrb	r3, [r7, #19]
 80052aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d02f      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052b8:	4b2b      	ldr	r3, [pc, #172]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052c6:	4928      	ldr	r1, [pc, #160]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052d6:	d10d      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3304      	adds	r3, #4
 80052dc:	2102      	movs	r1, #2
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 f844 	bl	800536c <RCCEx_PLLSAI1_Config>
 80052e4:	4603      	mov	r3, r0
 80052e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052e8:	7cfb      	ldrb	r3, [r7, #19]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d014      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80052ee:	7cfb      	ldrb	r3, [r7, #19]
 80052f0:	74bb      	strb	r3, [r7, #18]
 80052f2:	e011      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052fc:	d10c      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	3320      	adds	r3, #32
 8005302:	2102      	movs	r1, #2
 8005304:	4618      	mov	r0, r3
 8005306:	f000 f925 	bl	8005554 <RCCEx_PLLSAI2_Config>
 800530a:	4603      	mov	r3, r0
 800530c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800530e:	7cfb      	ldrb	r3, [r7, #19]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005314:	7cfb      	ldrb	r3, [r7, #19]
 8005316:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00a      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005324:	4b10      	ldr	r3, [pc, #64]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005332:	490d      	ldr	r1, [pc, #52]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005334:	4313      	orrs	r3, r2
 8005336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00b      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005346:	4b08      	ldr	r3, [pc, #32]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005356:	4904      	ldr	r1, [pc, #16]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005358:	4313      	orrs	r3, r2
 800535a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800535e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3718      	adds	r7, #24
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	40021000 	.word	0x40021000

0800536c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800537a:	4b75      	ldr	r3, [pc, #468]	; (8005550 <RCCEx_PLLSAI1_Config+0x1e4>)
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d018      	beq.n	80053b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005386:	4b72      	ldr	r3, [pc, #456]	; (8005550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f003 0203 	and.w	r2, r3, #3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	429a      	cmp	r2, r3
 8005394:	d10d      	bne.n	80053b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
       ||
 800539a:	2b00      	cmp	r3, #0
 800539c:	d009      	beq.n	80053b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800539e:	4b6c      	ldr	r3, [pc, #432]	; (8005550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	091b      	lsrs	r3, r3, #4
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	1c5a      	adds	r2, r3, #1
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
       ||
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d047      	beq.n	8005442 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	73fb      	strb	r3, [r7, #15]
 80053b6:	e044      	b.n	8005442 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2b03      	cmp	r3, #3
 80053be:	d018      	beq.n	80053f2 <RCCEx_PLLSAI1_Config+0x86>
 80053c0:	2b03      	cmp	r3, #3
 80053c2:	d825      	bhi.n	8005410 <RCCEx_PLLSAI1_Config+0xa4>
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d002      	beq.n	80053ce <RCCEx_PLLSAI1_Config+0x62>
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d009      	beq.n	80053e0 <RCCEx_PLLSAI1_Config+0x74>
 80053cc:	e020      	b.n	8005410 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053ce:	4b60      	ldr	r3, [pc, #384]	; (8005550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d11d      	bne.n	8005416 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053de:	e01a      	b.n	8005416 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80053e0:	4b5b      	ldr	r3, [pc, #364]	; (8005550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d116      	bne.n	800541a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053f0:	e013      	b.n	800541a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80053f2:	4b57      	ldr	r3, [pc, #348]	; (8005550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10f      	bne.n	800541e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053fe:	4b54      	ldr	r3, [pc, #336]	; (8005550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d109      	bne.n	800541e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800540e:	e006      	b.n	800541e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	73fb      	strb	r3, [r7, #15]
      break;
 8005414:	e004      	b.n	8005420 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005416:	bf00      	nop
 8005418:	e002      	b.n	8005420 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800541a:	bf00      	nop
 800541c:	e000      	b.n	8005420 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800541e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005420:	7bfb      	ldrb	r3, [r7, #15]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10d      	bne.n	8005442 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005426:	4b4a      	ldr	r3, [pc, #296]	; (8005550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6819      	ldr	r1, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	3b01      	subs	r3, #1
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	430b      	orrs	r3, r1
 800543c:	4944      	ldr	r1, [pc, #272]	; (8005550 <RCCEx_PLLSAI1_Config+0x1e4>)
 800543e:	4313      	orrs	r3, r2
 8005440:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005442:	7bfb      	ldrb	r3, [r7, #15]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d17d      	bne.n	8005544 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005448:	4b41      	ldr	r3, [pc, #260]	; (8005550 <RCCEx_PLLSAI1_Config+0x1e4>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a40      	ldr	r2, [pc, #256]	; (8005550 <RCCEx_PLLSAI1_Config+0x1e4>)
 800544e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005452:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005454:	f7fc fed4 	bl	8002200 <HAL_GetTick>
 8005458:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800545a:	e009      	b.n	8005470 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800545c:	f7fc fed0 	bl	8002200 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d902      	bls.n	8005470 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	73fb      	strb	r3, [r7, #15]
        break;
 800546e:	e005      	b.n	800547c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005470:	4b37      	ldr	r3, [pc, #220]	; (8005550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1ef      	bne.n	800545c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800547c:	7bfb      	ldrb	r3, [r7, #15]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d160      	bne.n	8005544 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d111      	bne.n	80054ac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005488:	4b31      	ldr	r3, [pc, #196]	; (8005550 <RCCEx_PLLSAI1_Config+0x1e4>)
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	6892      	ldr	r2, [r2, #8]
 8005498:	0211      	lsls	r1, r2, #8
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	68d2      	ldr	r2, [r2, #12]
 800549e:	0912      	lsrs	r2, r2, #4
 80054a0:	0452      	lsls	r2, r2, #17
 80054a2:	430a      	orrs	r2, r1
 80054a4:	492a      	ldr	r1, [pc, #168]	; (8005550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	610b      	str	r3, [r1, #16]
 80054aa:	e027      	b.n	80054fc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d112      	bne.n	80054d8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054b2:	4b27      	ldr	r3, [pc, #156]	; (8005550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80054ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	6892      	ldr	r2, [r2, #8]
 80054c2:	0211      	lsls	r1, r2, #8
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	6912      	ldr	r2, [r2, #16]
 80054c8:	0852      	lsrs	r2, r2, #1
 80054ca:	3a01      	subs	r2, #1
 80054cc:	0552      	lsls	r2, r2, #21
 80054ce:	430a      	orrs	r2, r1
 80054d0:	491f      	ldr	r1, [pc, #124]	; (8005550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	610b      	str	r3, [r1, #16]
 80054d6:	e011      	b.n	80054fc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054d8:	4b1d      	ldr	r3, [pc, #116]	; (8005550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80054e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6892      	ldr	r2, [r2, #8]
 80054e8:	0211      	lsls	r1, r2, #8
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6952      	ldr	r2, [r2, #20]
 80054ee:	0852      	lsrs	r2, r2, #1
 80054f0:	3a01      	subs	r2, #1
 80054f2:	0652      	lsls	r2, r2, #25
 80054f4:	430a      	orrs	r2, r1
 80054f6:	4916      	ldr	r1, [pc, #88]	; (8005550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80054fc:	4b14      	ldr	r3, [pc, #80]	; (8005550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a13      	ldr	r2, [pc, #76]	; (8005550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005502:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005506:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005508:	f7fc fe7a 	bl	8002200 <HAL_GetTick>
 800550c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800550e:	e009      	b.n	8005524 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005510:	f7fc fe76 	bl	8002200 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d902      	bls.n	8005524 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	73fb      	strb	r3, [r7, #15]
          break;
 8005522:	e005      	b.n	8005530 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005524:	4b0a      	ldr	r3, [pc, #40]	; (8005550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0ef      	beq.n	8005510 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005530:	7bfb      	ldrb	r3, [r7, #15]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d106      	bne.n	8005544 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005536:	4b06      	ldr	r3, [pc, #24]	; (8005550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005538:	691a      	ldr	r2, [r3, #16]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	4904      	ldr	r1, [pc, #16]	; (8005550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005540:	4313      	orrs	r3, r2
 8005542:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005544:	7bfb      	ldrb	r3, [r7, #15]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	40021000 	.word	0x40021000

08005554 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005562:	4b6a      	ldr	r3, [pc, #424]	; (800570c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f003 0303 	and.w	r3, r3, #3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d018      	beq.n	80055a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800556e:	4b67      	ldr	r3, [pc, #412]	; (800570c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f003 0203 	and.w	r2, r3, #3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d10d      	bne.n	800559a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
       ||
 8005582:	2b00      	cmp	r3, #0
 8005584:	d009      	beq.n	800559a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005586:	4b61      	ldr	r3, [pc, #388]	; (800570c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	091b      	lsrs	r3, r3, #4
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	1c5a      	adds	r2, r3, #1
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
       ||
 8005596:	429a      	cmp	r2, r3
 8005598:	d047      	beq.n	800562a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	73fb      	strb	r3, [r7, #15]
 800559e:	e044      	b.n	800562a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	d018      	beq.n	80055da <RCCEx_PLLSAI2_Config+0x86>
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	d825      	bhi.n	80055f8 <RCCEx_PLLSAI2_Config+0xa4>
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d002      	beq.n	80055b6 <RCCEx_PLLSAI2_Config+0x62>
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d009      	beq.n	80055c8 <RCCEx_PLLSAI2_Config+0x74>
 80055b4:	e020      	b.n	80055f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055b6:	4b55      	ldr	r3, [pc, #340]	; (800570c <RCCEx_PLLSAI2_Config+0x1b8>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d11d      	bne.n	80055fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055c6:	e01a      	b.n	80055fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055c8:	4b50      	ldr	r3, [pc, #320]	; (800570c <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d116      	bne.n	8005602 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055d8:	e013      	b.n	8005602 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055da:	4b4c      	ldr	r3, [pc, #304]	; (800570c <RCCEx_PLLSAI2_Config+0x1b8>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10f      	bne.n	8005606 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055e6:	4b49      	ldr	r3, [pc, #292]	; (800570c <RCCEx_PLLSAI2_Config+0x1b8>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d109      	bne.n	8005606 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055f6:	e006      	b.n	8005606 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	73fb      	strb	r3, [r7, #15]
      break;
 80055fc:	e004      	b.n	8005608 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80055fe:	bf00      	nop
 8005600:	e002      	b.n	8005608 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005602:	bf00      	nop
 8005604:	e000      	b.n	8005608 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005606:	bf00      	nop
    }

    if(status == HAL_OK)
 8005608:	7bfb      	ldrb	r3, [r7, #15]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10d      	bne.n	800562a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800560e:	4b3f      	ldr	r3, [pc, #252]	; (800570c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6819      	ldr	r1, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	3b01      	subs	r3, #1
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	430b      	orrs	r3, r1
 8005624:	4939      	ldr	r1, [pc, #228]	; (800570c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005626:	4313      	orrs	r3, r2
 8005628:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800562a:	7bfb      	ldrb	r3, [r7, #15]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d167      	bne.n	8005700 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005630:	4b36      	ldr	r3, [pc, #216]	; (800570c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a35      	ldr	r2, [pc, #212]	; (800570c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800563a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800563c:	f7fc fde0 	bl	8002200 <HAL_GetTick>
 8005640:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005642:	e009      	b.n	8005658 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005644:	f7fc fddc 	bl	8002200 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d902      	bls.n	8005658 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	73fb      	strb	r3, [r7, #15]
        break;
 8005656:	e005      	b.n	8005664 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005658:	4b2c      	ldr	r3, [pc, #176]	; (800570c <RCCEx_PLLSAI2_Config+0x1b8>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1ef      	bne.n	8005644 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005664:	7bfb      	ldrb	r3, [r7, #15]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d14a      	bne.n	8005700 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d111      	bne.n	8005694 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005670:	4b26      	ldr	r3, [pc, #152]	; (800570c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6892      	ldr	r2, [r2, #8]
 8005680:	0211      	lsls	r1, r2, #8
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	68d2      	ldr	r2, [r2, #12]
 8005686:	0912      	lsrs	r2, r2, #4
 8005688:	0452      	lsls	r2, r2, #17
 800568a:	430a      	orrs	r2, r1
 800568c:	491f      	ldr	r1, [pc, #124]	; (800570c <RCCEx_PLLSAI2_Config+0x1b8>)
 800568e:	4313      	orrs	r3, r2
 8005690:	614b      	str	r3, [r1, #20]
 8005692:	e011      	b.n	80056b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005694:	4b1d      	ldr	r3, [pc, #116]	; (800570c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800569c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6892      	ldr	r2, [r2, #8]
 80056a4:	0211      	lsls	r1, r2, #8
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	6912      	ldr	r2, [r2, #16]
 80056aa:	0852      	lsrs	r2, r2, #1
 80056ac:	3a01      	subs	r2, #1
 80056ae:	0652      	lsls	r2, r2, #25
 80056b0:	430a      	orrs	r2, r1
 80056b2:	4916      	ldr	r1, [pc, #88]	; (800570c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80056b8:	4b14      	ldr	r3, [pc, #80]	; (800570c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a13      	ldr	r2, [pc, #76]	; (800570c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c4:	f7fc fd9c 	bl	8002200 <HAL_GetTick>
 80056c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80056ca:	e009      	b.n	80056e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80056cc:	f7fc fd98 	bl	8002200 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d902      	bls.n	80056e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	73fb      	strb	r3, [r7, #15]
          break;
 80056de:	e005      	b.n	80056ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80056e0:	4b0a      	ldr	r3, [pc, #40]	; (800570c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d0ef      	beq.n	80056cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d106      	bne.n	8005700 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80056f2:	4b06      	ldr	r3, [pc, #24]	; (800570c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056f4:	695a      	ldr	r2, [r3, #20]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	4904      	ldr	r1, [pc, #16]	; (800570c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005700:	7bfb      	ldrb	r3, [r7, #15]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	40021000 	.word	0x40021000

08005710 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e049      	b.n	80057b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d106      	bne.n	800573c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7fc fb52 	bl	8001de0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3304      	adds	r3, #4
 800574c:	4619      	mov	r1, r3
 800574e:	4610      	mov	r0, r2
 8005750:	f000 ff72 	bl	8006638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
	...

080057c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d001      	beq.n	80057d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e04f      	b.n	8005878 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0201 	orr.w	r2, r2, #1
 80057ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a23      	ldr	r2, [pc, #140]	; (8005884 <HAL_TIM_Base_Start_IT+0xc4>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d01d      	beq.n	8005836 <HAL_TIM_Base_Start_IT+0x76>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005802:	d018      	beq.n	8005836 <HAL_TIM_Base_Start_IT+0x76>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a1f      	ldr	r2, [pc, #124]	; (8005888 <HAL_TIM_Base_Start_IT+0xc8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d013      	beq.n	8005836 <HAL_TIM_Base_Start_IT+0x76>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a1e      	ldr	r2, [pc, #120]	; (800588c <HAL_TIM_Base_Start_IT+0xcc>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00e      	beq.n	8005836 <HAL_TIM_Base_Start_IT+0x76>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a1c      	ldr	r2, [pc, #112]	; (8005890 <HAL_TIM_Base_Start_IT+0xd0>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d009      	beq.n	8005836 <HAL_TIM_Base_Start_IT+0x76>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a1b      	ldr	r2, [pc, #108]	; (8005894 <HAL_TIM_Base_Start_IT+0xd4>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d004      	beq.n	8005836 <HAL_TIM_Base_Start_IT+0x76>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a19      	ldr	r2, [pc, #100]	; (8005898 <HAL_TIM_Base_Start_IT+0xd8>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d115      	bne.n	8005862 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	4b17      	ldr	r3, [pc, #92]	; (800589c <HAL_TIM_Base_Start_IT+0xdc>)
 800583e:	4013      	ands	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2b06      	cmp	r3, #6
 8005846:	d015      	beq.n	8005874 <HAL_TIM_Base_Start_IT+0xb4>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800584e:	d011      	beq.n	8005874 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0201 	orr.w	r2, r2, #1
 800585e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005860:	e008      	b.n	8005874 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f042 0201 	orr.w	r2, r2, #1
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	e000      	b.n	8005876 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005874:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	40012c00 	.word	0x40012c00
 8005888:	40000400 	.word	0x40000400
 800588c:	40000800 	.word	0x40000800
 8005890:	40000c00 	.word	0x40000c00
 8005894:	40013400 	.word	0x40013400
 8005898:	40014000 	.word	0x40014000
 800589c:	00010007 	.word	0x00010007

080058a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e049      	b.n	8005946 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d106      	bne.n	80058cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f841 	bl	800594e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3304      	adds	r3, #4
 80058dc:	4619      	mov	r1, r3
 80058de:	4610      	mov	r0, r2
 80058e0:	f000 feaa 	bl	8006638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3708      	adds	r7, #8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800594e:	b480      	push	{r7}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
	...

08005964 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d109      	bne.n	8005988 <HAL_TIM_PWM_Start+0x24>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b01      	cmp	r3, #1
 800597e:	bf14      	ite	ne
 8005980:	2301      	movne	r3, #1
 8005982:	2300      	moveq	r3, #0
 8005984:	b2db      	uxtb	r3, r3
 8005986:	e03c      	b.n	8005a02 <HAL_TIM_PWM_Start+0x9e>
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	2b04      	cmp	r3, #4
 800598c:	d109      	bne.n	80059a2 <HAL_TIM_PWM_Start+0x3e>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b01      	cmp	r3, #1
 8005998:	bf14      	ite	ne
 800599a:	2301      	movne	r3, #1
 800599c:	2300      	moveq	r3, #0
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	e02f      	b.n	8005a02 <HAL_TIM_PWM_Start+0x9e>
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b08      	cmp	r3, #8
 80059a6:	d109      	bne.n	80059bc <HAL_TIM_PWM_Start+0x58>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	bf14      	ite	ne
 80059b4:	2301      	movne	r3, #1
 80059b6:	2300      	moveq	r3, #0
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	e022      	b.n	8005a02 <HAL_TIM_PWM_Start+0x9e>
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	2b0c      	cmp	r3, #12
 80059c0:	d109      	bne.n	80059d6 <HAL_TIM_PWM_Start+0x72>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	bf14      	ite	ne
 80059ce:	2301      	movne	r3, #1
 80059d0:	2300      	moveq	r3, #0
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	e015      	b.n	8005a02 <HAL_TIM_PWM_Start+0x9e>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b10      	cmp	r3, #16
 80059da:	d109      	bne.n	80059f0 <HAL_TIM_PWM_Start+0x8c>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	bf14      	ite	ne
 80059e8:	2301      	movne	r3, #1
 80059ea:	2300      	moveq	r3, #0
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	e008      	b.n	8005a02 <HAL_TIM_PWM_Start+0x9e>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	bf14      	ite	ne
 80059fc:	2301      	movne	r3, #1
 80059fe:	2300      	moveq	r3, #0
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e09c      	b.n	8005b44 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d104      	bne.n	8005a1a <HAL_TIM_PWM_Start+0xb6>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a18:	e023      	b.n	8005a62 <HAL_TIM_PWM_Start+0xfe>
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2b04      	cmp	r3, #4
 8005a1e:	d104      	bne.n	8005a2a <HAL_TIM_PWM_Start+0xc6>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a28:	e01b      	b.n	8005a62 <HAL_TIM_PWM_Start+0xfe>
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	2b08      	cmp	r3, #8
 8005a2e:	d104      	bne.n	8005a3a <HAL_TIM_PWM_Start+0xd6>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a38:	e013      	b.n	8005a62 <HAL_TIM_PWM_Start+0xfe>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b0c      	cmp	r3, #12
 8005a3e:	d104      	bne.n	8005a4a <HAL_TIM_PWM_Start+0xe6>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a48:	e00b      	b.n	8005a62 <HAL_TIM_PWM_Start+0xfe>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b10      	cmp	r3, #16
 8005a4e:	d104      	bne.n	8005a5a <HAL_TIM_PWM_Start+0xf6>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a58:	e003      	b.n	8005a62 <HAL_TIM_PWM_Start+0xfe>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2201      	movs	r2, #1
 8005a68:	6839      	ldr	r1, [r7, #0]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f001 fb12 	bl	8007094 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a35      	ldr	r2, [pc, #212]	; (8005b4c <HAL_TIM_PWM_Start+0x1e8>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d013      	beq.n	8005aa2 <HAL_TIM_PWM_Start+0x13e>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a34      	ldr	r2, [pc, #208]	; (8005b50 <HAL_TIM_PWM_Start+0x1ec>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d00e      	beq.n	8005aa2 <HAL_TIM_PWM_Start+0x13e>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a32      	ldr	r2, [pc, #200]	; (8005b54 <HAL_TIM_PWM_Start+0x1f0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d009      	beq.n	8005aa2 <HAL_TIM_PWM_Start+0x13e>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a31      	ldr	r2, [pc, #196]	; (8005b58 <HAL_TIM_PWM_Start+0x1f4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d004      	beq.n	8005aa2 <HAL_TIM_PWM_Start+0x13e>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a2f      	ldr	r2, [pc, #188]	; (8005b5c <HAL_TIM_PWM_Start+0x1f8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d101      	bne.n	8005aa6 <HAL_TIM_PWM_Start+0x142>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e000      	b.n	8005aa8 <HAL_TIM_PWM_Start+0x144>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d007      	beq.n	8005abc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005aba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a22      	ldr	r2, [pc, #136]	; (8005b4c <HAL_TIM_PWM_Start+0x1e8>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d01d      	beq.n	8005b02 <HAL_TIM_PWM_Start+0x19e>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ace:	d018      	beq.n	8005b02 <HAL_TIM_PWM_Start+0x19e>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a22      	ldr	r2, [pc, #136]	; (8005b60 <HAL_TIM_PWM_Start+0x1fc>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d013      	beq.n	8005b02 <HAL_TIM_PWM_Start+0x19e>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a21      	ldr	r2, [pc, #132]	; (8005b64 <HAL_TIM_PWM_Start+0x200>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d00e      	beq.n	8005b02 <HAL_TIM_PWM_Start+0x19e>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a1f      	ldr	r2, [pc, #124]	; (8005b68 <HAL_TIM_PWM_Start+0x204>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d009      	beq.n	8005b02 <HAL_TIM_PWM_Start+0x19e>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a17      	ldr	r2, [pc, #92]	; (8005b50 <HAL_TIM_PWM_Start+0x1ec>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d004      	beq.n	8005b02 <HAL_TIM_PWM_Start+0x19e>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a15      	ldr	r2, [pc, #84]	; (8005b54 <HAL_TIM_PWM_Start+0x1f0>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d115      	bne.n	8005b2e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	4b18      	ldr	r3, [pc, #96]	; (8005b6c <HAL_TIM_PWM_Start+0x208>)
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b06      	cmp	r3, #6
 8005b12:	d015      	beq.n	8005b40 <HAL_TIM_PWM_Start+0x1dc>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b1a:	d011      	beq.n	8005b40 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0201 	orr.w	r2, r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b2c:	e008      	b.n	8005b40 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0201 	orr.w	r2, r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	e000      	b.n	8005b42 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	40012c00 	.word	0x40012c00
 8005b50:	40013400 	.word	0x40013400
 8005b54:	40014000 	.word	0x40014000
 8005b58:	40014400 	.word	0x40014400
 8005b5c:	40014800 	.word	0x40014800
 8005b60:	40000400 	.word	0x40000400
 8005b64:	40000800 	.word	0x40000800
 8005b68:	40000c00 	.word	0x40000c00
 8005b6c:	00010007 	.word	0x00010007

08005b70 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e049      	b.n	8005c16 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d106      	bne.n	8005b9c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f841 	bl	8005c1e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3304      	adds	r3, #4
 8005bac:	4619      	mov	r1, r3
 8005bae:	4610      	mov	r0, r2
 8005bb0:	f000 fd42 	bl	8006638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b083      	sub	sp, #12
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
	...

08005c34 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d104      	bne.n	8005c4e <HAL_TIM_IC_Start+0x1a>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	e023      	b.n	8005c96 <HAL_TIM_IC_Start+0x62>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2b04      	cmp	r3, #4
 8005c52:	d104      	bne.n	8005c5e <HAL_TIM_IC_Start+0x2a>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	e01b      	b.n	8005c96 <HAL_TIM_IC_Start+0x62>
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d104      	bne.n	8005c6e <HAL_TIM_IC_Start+0x3a>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	e013      	b.n	8005c96 <HAL_TIM_IC_Start+0x62>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b0c      	cmp	r3, #12
 8005c72:	d104      	bne.n	8005c7e <HAL_TIM_IC_Start+0x4a>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	e00b      	b.n	8005c96 <HAL_TIM_IC_Start+0x62>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b10      	cmp	r3, #16
 8005c82:	d104      	bne.n	8005c8e <HAL_TIM_IC_Start+0x5a>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	e003      	b.n	8005c96 <HAL_TIM_IC_Start+0x62>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d104      	bne.n	8005ca8 <HAL_TIM_IC_Start+0x74>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	e013      	b.n	8005cd0 <HAL_TIM_IC_Start+0x9c>
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	2b04      	cmp	r3, #4
 8005cac:	d104      	bne.n	8005cb8 <HAL_TIM_IC_Start+0x84>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	e00b      	b.n	8005cd0 <HAL_TIM_IC_Start+0x9c>
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	2b08      	cmp	r3, #8
 8005cbc:	d104      	bne.n	8005cc8 <HAL_TIM_IC_Start+0x94>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	e003      	b.n	8005cd0 <HAL_TIM_IC_Start+0x9c>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d102      	bne.n	8005cde <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cd8:	7bbb      	ldrb	r3, [r7, #14]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d001      	beq.n	8005ce2 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e092      	b.n	8005e08 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d104      	bne.n	8005cf2 <HAL_TIM_IC_Start+0xbe>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2202      	movs	r2, #2
 8005cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cf0:	e023      	b.n	8005d3a <HAL_TIM_IC_Start+0x106>
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b04      	cmp	r3, #4
 8005cf6:	d104      	bne.n	8005d02 <HAL_TIM_IC_Start+0xce>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d00:	e01b      	b.n	8005d3a <HAL_TIM_IC_Start+0x106>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	d104      	bne.n	8005d12 <HAL_TIM_IC_Start+0xde>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d10:	e013      	b.n	8005d3a <HAL_TIM_IC_Start+0x106>
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b0c      	cmp	r3, #12
 8005d16:	d104      	bne.n	8005d22 <HAL_TIM_IC_Start+0xee>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d20:	e00b      	b.n	8005d3a <HAL_TIM_IC_Start+0x106>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b10      	cmp	r3, #16
 8005d26:	d104      	bne.n	8005d32 <HAL_TIM_IC_Start+0xfe>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d30:	e003      	b.n	8005d3a <HAL_TIM_IC_Start+0x106>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2202      	movs	r2, #2
 8005d36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d104      	bne.n	8005d4a <HAL_TIM_IC_Start+0x116>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d48:	e013      	b.n	8005d72 <HAL_TIM_IC_Start+0x13e>
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b04      	cmp	r3, #4
 8005d4e:	d104      	bne.n	8005d5a <HAL_TIM_IC_Start+0x126>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2202      	movs	r2, #2
 8005d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d58:	e00b      	b.n	8005d72 <HAL_TIM_IC_Start+0x13e>
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b08      	cmp	r3, #8
 8005d5e:	d104      	bne.n	8005d6a <HAL_TIM_IC_Start+0x136>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d68:	e003      	b.n	8005d72 <HAL_TIM_IC_Start+0x13e>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2201      	movs	r2, #1
 8005d78:	6839      	ldr	r1, [r7, #0]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f001 f98a 	bl	8007094 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a22      	ldr	r2, [pc, #136]	; (8005e10 <HAL_TIM_IC_Start+0x1dc>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d01d      	beq.n	8005dc6 <HAL_TIM_IC_Start+0x192>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d92:	d018      	beq.n	8005dc6 <HAL_TIM_IC_Start+0x192>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a1e      	ldr	r2, [pc, #120]	; (8005e14 <HAL_TIM_IC_Start+0x1e0>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d013      	beq.n	8005dc6 <HAL_TIM_IC_Start+0x192>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a1d      	ldr	r2, [pc, #116]	; (8005e18 <HAL_TIM_IC_Start+0x1e4>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d00e      	beq.n	8005dc6 <HAL_TIM_IC_Start+0x192>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a1b      	ldr	r2, [pc, #108]	; (8005e1c <HAL_TIM_IC_Start+0x1e8>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d009      	beq.n	8005dc6 <HAL_TIM_IC_Start+0x192>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a1a      	ldr	r2, [pc, #104]	; (8005e20 <HAL_TIM_IC_Start+0x1ec>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d004      	beq.n	8005dc6 <HAL_TIM_IC_Start+0x192>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a18      	ldr	r2, [pc, #96]	; (8005e24 <HAL_TIM_IC_Start+0x1f0>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d115      	bne.n	8005df2 <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	4b16      	ldr	r3, [pc, #88]	; (8005e28 <HAL_TIM_IC_Start+0x1f4>)
 8005dce:	4013      	ands	r3, r2
 8005dd0:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2b06      	cmp	r3, #6
 8005dd6:	d015      	beq.n	8005e04 <HAL_TIM_IC_Start+0x1d0>
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dde:	d011      	beq.n	8005e04 <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0201 	orr.w	r2, r2, #1
 8005dee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005df0:	e008      	b.n	8005e04 <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f042 0201 	orr.w	r2, r2, #1
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	e000      	b.n	8005e06 <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e04:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	40012c00 	.word	0x40012c00
 8005e14:	40000400 	.word	0x40000400
 8005e18:	40000800 	.word	0x40000800
 8005e1c:	40000c00 	.word	0x40000c00
 8005e20:	40013400 	.word	0x40013400
 8005e24:	40014000 	.word	0x40014000
 8005e28:	00010007 	.word	0x00010007

08005e2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d122      	bne.n	8005e88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	f003 0302 	and.w	r3, r3, #2
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d11b      	bne.n	8005e88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f06f 0202 	mvn.w	r2, #2
 8005e58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	f003 0303 	and.w	r3, r3, #3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fbc4 	bl	80065fc <HAL_TIM_IC_CaptureCallback>
 8005e74:	e005      	b.n	8005e82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fbb6 	bl	80065e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 fbc7 	bl	8006610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	f003 0304 	and.w	r3, r3, #4
 8005e92:	2b04      	cmp	r3, #4
 8005e94:	d122      	bne.n	8005edc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f003 0304 	and.w	r3, r3, #4
 8005ea0:	2b04      	cmp	r3, #4
 8005ea2:	d11b      	bne.n	8005edc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f06f 0204 	mvn.w	r2, #4
 8005eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fb9a 	bl	80065fc <HAL_TIM_IC_CaptureCallback>
 8005ec8:	e005      	b.n	8005ed6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fb8c 	bl	80065e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fb9d 	bl	8006610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	f003 0308 	and.w	r3, r3, #8
 8005ee6:	2b08      	cmp	r3, #8
 8005ee8:	d122      	bne.n	8005f30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f003 0308 	and.w	r3, r3, #8
 8005ef4:	2b08      	cmp	r3, #8
 8005ef6:	d11b      	bne.n	8005f30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f06f 0208 	mvn.w	r2, #8
 8005f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2204      	movs	r2, #4
 8005f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	f003 0303 	and.w	r3, r3, #3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 fb70 	bl	80065fc <HAL_TIM_IC_CaptureCallback>
 8005f1c:	e005      	b.n	8005f2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 fb62 	bl	80065e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 fb73 	bl	8006610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	f003 0310 	and.w	r3, r3, #16
 8005f3a:	2b10      	cmp	r3, #16
 8005f3c:	d122      	bne.n	8005f84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f003 0310 	and.w	r3, r3, #16
 8005f48:	2b10      	cmp	r3, #16
 8005f4a:	d11b      	bne.n	8005f84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f06f 0210 	mvn.w	r2, #16
 8005f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2208      	movs	r2, #8
 8005f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fb46 	bl	80065fc <HAL_TIM_IC_CaptureCallback>
 8005f70:	e005      	b.n	8005f7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 fb38 	bl	80065e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fb49 	bl	8006610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d10e      	bne.n	8005fb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d107      	bne.n	8005fb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f06f 0201 	mvn.w	r2, #1
 8005fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7fb fa2c 	bl	8001408 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fba:	2b80      	cmp	r3, #128	; 0x80
 8005fbc:	d10e      	bne.n	8005fdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc8:	2b80      	cmp	r3, #128	; 0x80
 8005fca:	d107      	bne.n	8005fdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f001 f914 	bl	8007204 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fea:	d10e      	bne.n	800600a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff6:	2b80      	cmp	r3, #128	; 0x80
 8005ff8:	d107      	bne.n	800600a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 f907 	bl	8007218 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006014:	2b40      	cmp	r3, #64	; 0x40
 8006016:	d10e      	bne.n	8006036 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006022:	2b40      	cmp	r3, #64	; 0x40
 8006024:	d107      	bne.n	8006036 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800602e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 faf7 	bl	8006624 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	f003 0320 	and.w	r3, r3, #32
 8006040:	2b20      	cmp	r3, #32
 8006042:	d10e      	bne.n	8006062 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f003 0320 	and.w	r3, r3, #32
 800604e:	2b20      	cmp	r3, #32
 8006050:	d107      	bne.n	8006062 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f06f 0220 	mvn.w	r2, #32
 800605a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f001 f8c7 	bl	80071f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006062:	bf00      	nop
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b086      	sub	sp, #24
 800606e:	af00      	add	r7, sp, #0
 8006070:	60f8      	str	r0, [r7, #12]
 8006072:	60b9      	str	r1, [r7, #8]
 8006074:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006076:	2300      	movs	r3, #0
 8006078:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006080:	2b01      	cmp	r3, #1
 8006082:	d101      	bne.n	8006088 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006084:	2302      	movs	r3, #2
 8006086:	e088      	b.n	800619a <HAL_TIM_IC_ConfigChannel+0x130>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d11b      	bne.n	80060ce <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6818      	ldr	r0, [r3, #0]
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	6819      	ldr	r1, [r3, #0]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	f000 fe37 	bl	8006d18 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	699a      	ldr	r2, [r3, #24]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 020c 	bic.w	r2, r2, #12
 80060b8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6999      	ldr	r1, [r3, #24]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	619a      	str	r2, [r3, #24]
 80060cc:	e060      	b.n	8006190 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b04      	cmp	r3, #4
 80060d2:	d11c      	bne.n	800610e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6818      	ldr	r0, [r3, #0]
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	6819      	ldr	r1, [r3, #0]
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f000 feb5 	bl	8006e52 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699a      	ldr	r2, [r3, #24]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80060f6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6999      	ldr	r1, [r3, #24]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	021a      	lsls	r2, r3, #8
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	619a      	str	r2, [r3, #24]
 800610c:	e040      	b.n	8006190 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b08      	cmp	r3, #8
 8006112:	d11b      	bne.n	800614c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6818      	ldr	r0, [r3, #0]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	6819      	ldr	r1, [r3, #0]
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f000 ff02 	bl	8006f2c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	69da      	ldr	r2, [r3, #28]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 020c 	bic.w	r2, r2, #12
 8006136:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	69d9      	ldr	r1, [r3, #28]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	689a      	ldr	r2, [r3, #8]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	61da      	str	r2, [r3, #28]
 800614a:	e021      	b.n	8006190 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b0c      	cmp	r3, #12
 8006150:	d11c      	bne.n	800618c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6818      	ldr	r0, [r3, #0]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	6819      	ldr	r1, [r3, #0]
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	f000 ff1f 	bl	8006fa4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69da      	ldr	r2, [r3, #28]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006174:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	69d9      	ldr	r1, [r3, #28]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	021a      	lsls	r2, r3, #8
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	61da      	str	r2, [r3, #28]
 800618a:	e001      	b.n	8006190 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006198:	7dfb      	ldrb	r3, [r7, #23]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
	...

080061a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061b0:	2300      	movs	r3, #0
 80061b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d101      	bne.n	80061c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061be:	2302      	movs	r3, #2
 80061c0:	e0ff      	b.n	80063c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b14      	cmp	r3, #20
 80061ce:	f200 80f0 	bhi.w	80063b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80061d2:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d8:	0800622d 	.word	0x0800622d
 80061dc:	080063b3 	.word	0x080063b3
 80061e0:	080063b3 	.word	0x080063b3
 80061e4:	080063b3 	.word	0x080063b3
 80061e8:	0800626d 	.word	0x0800626d
 80061ec:	080063b3 	.word	0x080063b3
 80061f0:	080063b3 	.word	0x080063b3
 80061f4:	080063b3 	.word	0x080063b3
 80061f8:	080062af 	.word	0x080062af
 80061fc:	080063b3 	.word	0x080063b3
 8006200:	080063b3 	.word	0x080063b3
 8006204:	080063b3 	.word	0x080063b3
 8006208:	080062ef 	.word	0x080062ef
 800620c:	080063b3 	.word	0x080063b3
 8006210:	080063b3 	.word	0x080063b3
 8006214:	080063b3 	.word	0x080063b3
 8006218:	08006331 	.word	0x08006331
 800621c:	080063b3 	.word	0x080063b3
 8006220:	080063b3 	.word	0x080063b3
 8006224:	080063b3 	.word	0x080063b3
 8006228:	08006371 	.word	0x08006371
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68b9      	ldr	r1, [r7, #8]
 8006232:	4618      	mov	r0, r3
 8006234:	f000 fa9a 	bl	800676c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699a      	ldr	r2, [r3, #24]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f042 0208 	orr.w	r2, r2, #8
 8006246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	699a      	ldr	r2, [r3, #24]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 0204 	bic.w	r2, r2, #4
 8006256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6999      	ldr	r1, [r3, #24]
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	691a      	ldr	r2, [r3, #16]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	430a      	orrs	r2, r1
 8006268:	619a      	str	r2, [r3, #24]
      break;
 800626a:	e0a5      	b.n	80063b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68b9      	ldr	r1, [r7, #8]
 8006272:	4618      	mov	r0, r3
 8006274:	f000 fb0a 	bl	800688c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	699a      	ldr	r2, [r3, #24]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	699a      	ldr	r2, [r3, #24]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6999      	ldr	r1, [r3, #24]
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	021a      	lsls	r2, r3, #8
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	619a      	str	r2, [r3, #24]
      break;
 80062ac:	e084      	b.n	80063b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68b9      	ldr	r1, [r7, #8]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 fb73 	bl	80069a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	69da      	ldr	r2, [r3, #28]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f042 0208 	orr.w	r2, r2, #8
 80062c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	69da      	ldr	r2, [r3, #28]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0204 	bic.w	r2, r2, #4
 80062d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	69d9      	ldr	r1, [r3, #28]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	691a      	ldr	r2, [r3, #16]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	61da      	str	r2, [r3, #28]
      break;
 80062ec:	e064      	b.n	80063b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68b9      	ldr	r1, [r7, #8]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f000 fbdb 	bl	8006ab0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	69da      	ldr	r2, [r3, #28]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	69da      	ldr	r2, [r3, #28]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	69d9      	ldr	r1, [r3, #28]
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	021a      	lsls	r2, r3, #8
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	61da      	str	r2, [r3, #28]
      break;
 800632e:	e043      	b.n	80063b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68b9      	ldr	r1, [r7, #8]
 8006336:	4618      	mov	r0, r3
 8006338:	f000 fc24 	bl	8006b84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0208 	orr.w	r2, r2, #8
 800634a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 0204 	bic.w	r2, r2, #4
 800635a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	691a      	ldr	r2, [r3, #16]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	430a      	orrs	r2, r1
 800636c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800636e:	e023      	b.n	80063b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68b9      	ldr	r1, [r7, #8]
 8006376:	4618      	mov	r0, r3
 8006378:	f000 fc68 	bl	8006c4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800638a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800639a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	021a      	lsls	r2, r3, #8
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	430a      	orrs	r2, r1
 80063ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80063b0:	e002      	b.n	80063b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	75fb      	strb	r3, [r7, #23]
      break;
 80063b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3718      	adds	r7, #24
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop

080063cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063d6:	2300      	movs	r3, #0
 80063d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d101      	bne.n	80063e8 <HAL_TIM_ConfigClockSource+0x1c>
 80063e4:	2302      	movs	r3, #2
 80063e6:	e0b6      	b.n	8006556 <HAL_TIM_ConfigClockSource+0x18a>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006406:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800640a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006412:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006424:	d03e      	beq.n	80064a4 <HAL_TIM_ConfigClockSource+0xd8>
 8006426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800642a:	f200 8087 	bhi.w	800653c <HAL_TIM_ConfigClockSource+0x170>
 800642e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006432:	f000 8086 	beq.w	8006542 <HAL_TIM_ConfigClockSource+0x176>
 8006436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800643a:	d87f      	bhi.n	800653c <HAL_TIM_ConfigClockSource+0x170>
 800643c:	2b70      	cmp	r3, #112	; 0x70
 800643e:	d01a      	beq.n	8006476 <HAL_TIM_ConfigClockSource+0xaa>
 8006440:	2b70      	cmp	r3, #112	; 0x70
 8006442:	d87b      	bhi.n	800653c <HAL_TIM_ConfigClockSource+0x170>
 8006444:	2b60      	cmp	r3, #96	; 0x60
 8006446:	d050      	beq.n	80064ea <HAL_TIM_ConfigClockSource+0x11e>
 8006448:	2b60      	cmp	r3, #96	; 0x60
 800644a:	d877      	bhi.n	800653c <HAL_TIM_ConfigClockSource+0x170>
 800644c:	2b50      	cmp	r3, #80	; 0x50
 800644e:	d03c      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0xfe>
 8006450:	2b50      	cmp	r3, #80	; 0x50
 8006452:	d873      	bhi.n	800653c <HAL_TIM_ConfigClockSource+0x170>
 8006454:	2b40      	cmp	r3, #64	; 0x40
 8006456:	d058      	beq.n	800650a <HAL_TIM_ConfigClockSource+0x13e>
 8006458:	2b40      	cmp	r3, #64	; 0x40
 800645a:	d86f      	bhi.n	800653c <HAL_TIM_ConfigClockSource+0x170>
 800645c:	2b30      	cmp	r3, #48	; 0x30
 800645e:	d064      	beq.n	800652a <HAL_TIM_ConfigClockSource+0x15e>
 8006460:	2b30      	cmp	r3, #48	; 0x30
 8006462:	d86b      	bhi.n	800653c <HAL_TIM_ConfigClockSource+0x170>
 8006464:	2b20      	cmp	r3, #32
 8006466:	d060      	beq.n	800652a <HAL_TIM_ConfigClockSource+0x15e>
 8006468:	2b20      	cmp	r3, #32
 800646a:	d867      	bhi.n	800653c <HAL_TIM_ConfigClockSource+0x170>
 800646c:	2b00      	cmp	r3, #0
 800646e:	d05c      	beq.n	800652a <HAL_TIM_ConfigClockSource+0x15e>
 8006470:	2b10      	cmp	r3, #16
 8006472:	d05a      	beq.n	800652a <HAL_TIM_ConfigClockSource+0x15e>
 8006474:	e062      	b.n	800653c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6818      	ldr	r0, [r3, #0]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	6899      	ldr	r1, [r3, #8]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f000 fde5 	bl	8007054 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006498:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	609a      	str	r2, [r3, #8]
      break;
 80064a2:	e04f      	b.n	8006544 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6818      	ldr	r0, [r3, #0]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	6899      	ldr	r1, [r3, #8]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	f000 fdce 	bl	8007054 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689a      	ldr	r2, [r3, #8]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064c6:	609a      	str	r2, [r3, #8]
      break;
 80064c8:	e03c      	b.n	8006544 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6818      	ldr	r0, [r3, #0]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	6859      	ldr	r1, [r3, #4]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	461a      	mov	r2, r3
 80064d8:	f000 fc8c 	bl	8006df4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2150      	movs	r1, #80	; 0x50
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 fd9b 	bl	800701e <TIM_ITRx_SetConfig>
      break;
 80064e8:	e02c      	b.n	8006544 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6818      	ldr	r0, [r3, #0]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	6859      	ldr	r1, [r3, #4]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	461a      	mov	r2, r3
 80064f8:	f000 fce8 	bl	8006ecc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2160      	movs	r1, #96	; 0x60
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fd8b 	bl	800701e <TIM_ITRx_SetConfig>
      break;
 8006508:	e01c      	b.n	8006544 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6818      	ldr	r0, [r3, #0]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	6859      	ldr	r1, [r3, #4]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	461a      	mov	r2, r3
 8006518:	f000 fc6c 	bl	8006df4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2140      	movs	r1, #64	; 0x40
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fd7b 	bl	800701e <TIM_ITRx_SetConfig>
      break;
 8006528:	e00c      	b.n	8006544 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4619      	mov	r1, r3
 8006534:	4610      	mov	r0, r2
 8006536:	f000 fd72 	bl	800701e <TIM_ITRx_SetConfig>
      break;
 800653a:	e003      	b.n	8006544 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	73fb      	strb	r3, [r7, #15]
      break;
 8006540:	e000      	b.n	8006544 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006542:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006554:	7bfb      	ldrb	r3, [r7, #15]
}
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
	...

08006560 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800656a:	2300      	movs	r3, #0
 800656c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b0c      	cmp	r3, #12
 8006572:	d831      	bhi.n	80065d8 <HAL_TIM_ReadCapturedValue+0x78>
 8006574:	a201      	add	r2, pc, #4	; (adr r2, 800657c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657a:	bf00      	nop
 800657c:	080065b1 	.word	0x080065b1
 8006580:	080065d9 	.word	0x080065d9
 8006584:	080065d9 	.word	0x080065d9
 8006588:	080065d9 	.word	0x080065d9
 800658c:	080065bb 	.word	0x080065bb
 8006590:	080065d9 	.word	0x080065d9
 8006594:	080065d9 	.word	0x080065d9
 8006598:	080065d9 	.word	0x080065d9
 800659c:	080065c5 	.word	0x080065c5
 80065a0:	080065d9 	.word	0x080065d9
 80065a4:	080065d9 	.word	0x080065d9
 80065a8:	080065d9 	.word	0x080065d9
 80065ac:	080065cf 	.word	0x080065cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b6:	60fb      	str	r3, [r7, #12]

      break;
 80065b8:	e00f      	b.n	80065da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c0:	60fb      	str	r3, [r7, #12]

      break;
 80065c2:	e00a      	b.n	80065da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ca:	60fb      	str	r3, [r7, #12]

      break;
 80065cc:	e005      	b.n	80065da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d4:	60fb      	str	r3, [r7, #12]

      break;
 80065d6:	e000      	b.n	80065da <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80065d8:	bf00      	nop
  }

  return tmpreg;
 80065da:	68fb      	ldr	r3, [r7, #12]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a40      	ldr	r2, [pc, #256]	; (800674c <TIM_Base_SetConfig+0x114>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d013      	beq.n	8006678 <TIM_Base_SetConfig+0x40>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006656:	d00f      	beq.n	8006678 <TIM_Base_SetConfig+0x40>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a3d      	ldr	r2, [pc, #244]	; (8006750 <TIM_Base_SetConfig+0x118>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d00b      	beq.n	8006678 <TIM_Base_SetConfig+0x40>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a3c      	ldr	r2, [pc, #240]	; (8006754 <TIM_Base_SetConfig+0x11c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d007      	beq.n	8006678 <TIM_Base_SetConfig+0x40>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a3b      	ldr	r2, [pc, #236]	; (8006758 <TIM_Base_SetConfig+0x120>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d003      	beq.n	8006678 <TIM_Base_SetConfig+0x40>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a3a      	ldr	r2, [pc, #232]	; (800675c <TIM_Base_SetConfig+0x124>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d108      	bne.n	800668a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	4313      	orrs	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a2f      	ldr	r2, [pc, #188]	; (800674c <TIM_Base_SetConfig+0x114>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d01f      	beq.n	80066d2 <TIM_Base_SetConfig+0x9a>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006698:	d01b      	beq.n	80066d2 <TIM_Base_SetConfig+0x9a>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a2c      	ldr	r2, [pc, #176]	; (8006750 <TIM_Base_SetConfig+0x118>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d017      	beq.n	80066d2 <TIM_Base_SetConfig+0x9a>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a2b      	ldr	r2, [pc, #172]	; (8006754 <TIM_Base_SetConfig+0x11c>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d013      	beq.n	80066d2 <TIM_Base_SetConfig+0x9a>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a2a      	ldr	r2, [pc, #168]	; (8006758 <TIM_Base_SetConfig+0x120>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d00f      	beq.n	80066d2 <TIM_Base_SetConfig+0x9a>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a29      	ldr	r2, [pc, #164]	; (800675c <TIM_Base_SetConfig+0x124>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d00b      	beq.n	80066d2 <TIM_Base_SetConfig+0x9a>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a28      	ldr	r2, [pc, #160]	; (8006760 <TIM_Base_SetConfig+0x128>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d007      	beq.n	80066d2 <TIM_Base_SetConfig+0x9a>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a27      	ldr	r2, [pc, #156]	; (8006764 <TIM_Base_SetConfig+0x12c>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d003      	beq.n	80066d2 <TIM_Base_SetConfig+0x9a>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a26      	ldr	r2, [pc, #152]	; (8006768 <TIM_Base_SetConfig+0x130>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d108      	bne.n	80066e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a10      	ldr	r2, [pc, #64]	; (800674c <TIM_Base_SetConfig+0x114>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d00f      	beq.n	8006730 <TIM_Base_SetConfig+0xf8>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a12      	ldr	r2, [pc, #72]	; (800675c <TIM_Base_SetConfig+0x124>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d00b      	beq.n	8006730 <TIM_Base_SetConfig+0xf8>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a11      	ldr	r2, [pc, #68]	; (8006760 <TIM_Base_SetConfig+0x128>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d007      	beq.n	8006730 <TIM_Base_SetConfig+0xf8>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a10      	ldr	r2, [pc, #64]	; (8006764 <TIM_Base_SetConfig+0x12c>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d003      	beq.n	8006730 <TIM_Base_SetConfig+0xf8>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a0f      	ldr	r2, [pc, #60]	; (8006768 <TIM_Base_SetConfig+0x130>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d103      	bne.n	8006738 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	691a      	ldr	r2, [r3, #16]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	615a      	str	r2, [r3, #20]
}
 800673e:	bf00      	nop
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	40012c00 	.word	0x40012c00
 8006750:	40000400 	.word	0x40000400
 8006754:	40000800 	.word	0x40000800
 8006758:	40000c00 	.word	0x40000c00
 800675c:	40013400 	.word	0x40013400
 8006760:	40014000 	.word	0x40014000
 8006764:	40014400 	.word	0x40014400
 8006768:	40014800 	.word	0x40014800

0800676c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	f023 0201 	bic.w	r2, r3, #1
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800679a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800679e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f023 0303 	bic.w	r3, r3, #3
 80067a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f023 0302 	bic.w	r3, r3, #2
 80067b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a2c      	ldr	r2, [pc, #176]	; (8006878 <TIM_OC1_SetConfig+0x10c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d00f      	beq.n	80067ec <TIM_OC1_SetConfig+0x80>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a2b      	ldr	r2, [pc, #172]	; (800687c <TIM_OC1_SetConfig+0x110>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d00b      	beq.n	80067ec <TIM_OC1_SetConfig+0x80>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a2a      	ldr	r2, [pc, #168]	; (8006880 <TIM_OC1_SetConfig+0x114>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d007      	beq.n	80067ec <TIM_OC1_SetConfig+0x80>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a29      	ldr	r2, [pc, #164]	; (8006884 <TIM_OC1_SetConfig+0x118>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d003      	beq.n	80067ec <TIM_OC1_SetConfig+0x80>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a28      	ldr	r2, [pc, #160]	; (8006888 <TIM_OC1_SetConfig+0x11c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d10c      	bne.n	8006806 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	f023 0308 	bic.w	r3, r3, #8
 80067f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	f023 0304 	bic.w	r3, r3, #4
 8006804:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a1b      	ldr	r2, [pc, #108]	; (8006878 <TIM_OC1_SetConfig+0x10c>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d00f      	beq.n	800682e <TIM_OC1_SetConfig+0xc2>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a1a      	ldr	r2, [pc, #104]	; (800687c <TIM_OC1_SetConfig+0x110>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d00b      	beq.n	800682e <TIM_OC1_SetConfig+0xc2>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a19      	ldr	r2, [pc, #100]	; (8006880 <TIM_OC1_SetConfig+0x114>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d007      	beq.n	800682e <TIM_OC1_SetConfig+0xc2>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a18      	ldr	r2, [pc, #96]	; (8006884 <TIM_OC1_SetConfig+0x118>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d003      	beq.n	800682e <TIM_OC1_SetConfig+0xc2>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a17      	ldr	r2, [pc, #92]	; (8006888 <TIM_OC1_SetConfig+0x11c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d111      	bne.n	8006852 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800683c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	4313      	orrs	r3, r2
 8006846:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	4313      	orrs	r3, r2
 8006850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	621a      	str	r2, [r3, #32]
}
 800686c:	bf00      	nop
 800686e:	371c      	adds	r7, #28
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	40012c00 	.word	0x40012c00
 800687c:	40013400 	.word	0x40013400
 8006880:	40014000 	.word	0x40014000
 8006884:	40014400 	.word	0x40014400
 8006888:	40014800 	.word	0x40014800

0800688c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800688c:	b480      	push	{r7}
 800688e:	b087      	sub	sp, #28
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	f023 0210 	bic.w	r2, r3, #16
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	021b      	lsls	r3, r3, #8
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f023 0320 	bic.w	r3, r3, #32
 80068da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	011b      	lsls	r3, r3, #4
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a28      	ldr	r2, [pc, #160]	; (800698c <TIM_OC2_SetConfig+0x100>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d003      	beq.n	80068f8 <TIM_OC2_SetConfig+0x6c>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a27      	ldr	r2, [pc, #156]	; (8006990 <TIM_OC2_SetConfig+0x104>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d10d      	bne.n	8006914 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	011b      	lsls	r3, r3, #4
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	4313      	orrs	r3, r2
 800690a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006912:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a1d      	ldr	r2, [pc, #116]	; (800698c <TIM_OC2_SetConfig+0x100>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d00f      	beq.n	800693c <TIM_OC2_SetConfig+0xb0>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a1c      	ldr	r2, [pc, #112]	; (8006990 <TIM_OC2_SetConfig+0x104>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d00b      	beq.n	800693c <TIM_OC2_SetConfig+0xb0>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a1b      	ldr	r2, [pc, #108]	; (8006994 <TIM_OC2_SetConfig+0x108>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d007      	beq.n	800693c <TIM_OC2_SetConfig+0xb0>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a1a      	ldr	r2, [pc, #104]	; (8006998 <TIM_OC2_SetConfig+0x10c>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d003      	beq.n	800693c <TIM_OC2_SetConfig+0xb0>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a19      	ldr	r2, [pc, #100]	; (800699c <TIM_OC2_SetConfig+0x110>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d113      	bne.n	8006964 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006942:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800694a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	4313      	orrs	r3, r2
 8006956:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	4313      	orrs	r3, r2
 8006962:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	621a      	str	r2, [r3, #32]
}
 800697e:	bf00      	nop
 8006980:	371c      	adds	r7, #28
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	40012c00 	.word	0x40012c00
 8006990:	40013400 	.word	0x40013400
 8006994:	40014000 	.word	0x40014000
 8006998:	40014400 	.word	0x40014400
 800699c:	40014800 	.word	0x40014800

080069a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f023 0303 	bic.w	r3, r3, #3
 80069da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	021b      	lsls	r3, r3, #8
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a27      	ldr	r2, [pc, #156]	; (8006a9c <TIM_OC3_SetConfig+0xfc>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d003      	beq.n	8006a0a <TIM_OC3_SetConfig+0x6a>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a26      	ldr	r2, [pc, #152]	; (8006aa0 <TIM_OC3_SetConfig+0x100>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d10d      	bne.n	8006a26 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	021b      	lsls	r3, r3, #8
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a1c      	ldr	r2, [pc, #112]	; (8006a9c <TIM_OC3_SetConfig+0xfc>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00f      	beq.n	8006a4e <TIM_OC3_SetConfig+0xae>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a1b      	ldr	r2, [pc, #108]	; (8006aa0 <TIM_OC3_SetConfig+0x100>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d00b      	beq.n	8006a4e <TIM_OC3_SetConfig+0xae>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a1a      	ldr	r2, [pc, #104]	; (8006aa4 <TIM_OC3_SetConfig+0x104>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d007      	beq.n	8006a4e <TIM_OC3_SetConfig+0xae>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a19      	ldr	r2, [pc, #100]	; (8006aa8 <TIM_OC3_SetConfig+0x108>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d003      	beq.n	8006a4e <TIM_OC3_SetConfig+0xae>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a18      	ldr	r2, [pc, #96]	; (8006aac <TIM_OC3_SetConfig+0x10c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d113      	bne.n	8006a76 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	011b      	lsls	r3, r3, #4
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	011b      	lsls	r3, r3, #4
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	621a      	str	r2, [r3, #32]
}
 8006a90:	bf00      	nop
 8006a92:	371c      	adds	r7, #28
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	40012c00 	.word	0x40012c00
 8006aa0:	40013400 	.word	0x40013400
 8006aa4:	40014000 	.word	0x40014000
 8006aa8:	40014400 	.word	0x40014400
 8006aac:	40014800 	.word	0x40014800

08006ab0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	021b      	lsls	r3, r3, #8
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006afe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	031b      	lsls	r3, r3, #12
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a18      	ldr	r2, [pc, #96]	; (8006b70 <TIM_OC4_SetConfig+0xc0>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00f      	beq.n	8006b34 <TIM_OC4_SetConfig+0x84>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a17      	ldr	r2, [pc, #92]	; (8006b74 <TIM_OC4_SetConfig+0xc4>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d00b      	beq.n	8006b34 <TIM_OC4_SetConfig+0x84>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a16      	ldr	r2, [pc, #88]	; (8006b78 <TIM_OC4_SetConfig+0xc8>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d007      	beq.n	8006b34 <TIM_OC4_SetConfig+0x84>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a15      	ldr	r2, [pc, #84]	; (8006b7c <TIM_OC4_SetConfig+0xcc>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d003      	beq.n	8006b34 <TIM_OC4_SetConfig+0x84>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a14      	ldr	r2, [pc, #80]	; (8006b80 <TIM_OC4_SetConfig+0xd0>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d109      	bne.n	8006b48 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	019b      	lsls	r3, r3, #6
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	621a      	str	r2, [r3, #32]
}
 8006b62:	bf00      	nop
 8006b64:	371c      	adds	r7, #28
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	40012c00 	.word	0x40012c00
 8006b74:	40013400 	.word	0x40013400
 8006b78:	40014000 	.word	0x40014000
 8006b7c:	40014400 	.word	0x40014400
 8006b80:	40014800 	.word	0x40014800

08006b84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b087      	sub	sp, #28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006bc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	041b      	lsls	r3, r3, #16
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a17      	ldr	r2, [pc, #92]	; (8006c38 <TIM_OC5_SetConfig+0xb4>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d00f      	beq.n	8006bfe <TIM_OC5_SetConfig+0x7a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a16      	ldr	r2, [pc, #88]	; (8006c3c <TIM_OC5_SetConfig+0xb8>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d00b      	beq.n	8006bfe <TIM_OC5_SetConfig+0x7a>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a15      	ldr	r2, [pc, #84]	; (8006c40 <TIM_OC5_SetConfig+0xbc>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d007      	beq.n	8006bfe <TIM_OC5_SetConfig+0x7a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a14      	ldr	r2, [pc, #80]	; (8006c44 <TIM_OC5_SetConfig+0xc0>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d003      	beq.n	8006bfe <TIM_OC5_SetConfig+0x7a>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a13      	ldr	r2, [pc, #76]	; (8006c48 <TIM_OC5_SetConfig+0xc4>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d109      	bne.n	8006c12 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	021b      	lsls	r3, r3, #8
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	621a      	str	r2, [r3, #32]
}
 8006c2c:	bf00      	nop
 8006c2e:	371c      	adds	r7, #28
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr
 8006c38:	40012c00 	.word	0x40012c00
 8006c3c:	40013400 	.word	0x40013400
 8006c40:	40014000 	.word	0x40014000
 8006c44:	40014400 	.word	0x40014400
 8006c48:	40014800 	.word	0x40014800

08006c4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b087      	sub	sp, #28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	021b      	lsls	r3, r3, #8
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	051b      	lsls	r3, r3, #20
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a18      	ldr	r2, [pc, #96]	; (8006d04 <TIM_OC6_SetConfig+0xb8>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d00f      	beq.n	8006cc8 <TIM_OC6_SetConfig+0x7c>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a17      	ldr	r2, [pc, #92]	; (8006d08 <TIM_OC6_SetConfig+0xbc>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d00b      	beq.n	8006cc8 <TIM_OC6_SetConfig+0x7c>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a16      	ldr	r2, [pc, #88]	; (8006d0c <TIM_OC6_SetConfig+0xc0>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d007      	beq.n	8006cc8 <TIM_OC6_SetConfig+0x7c>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a15      	ldr	r2, [pc, #84]	; (8006d10 <TIM_OC6_SetConfig+0xc4>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d003      	beq.n	8006cc8 <TIM_OC6_SetConfig+0x7c>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a14      	ldr	r2, [pc, #80]	; (8006d14 <TIM_OC6_SetConfig+0xc8>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d109      	bne.n	8006cdc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	029b      	lsls	r3, r3, #10
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	621a      	str	r2, [r3, #32]
}
 8006cf6:	bf00      	nop
 8006cf8:	371c      	adds	r7, #28
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	40012c00 	.word	0x40012c00
 8006d08:	40013400 	.word	0x40013400
 8006d0c:	40014000 	.word	0x40014000
 8006d10:	40014400 	.word	0x40014400
 8006d14:	40014800 	.word	0x40014800

08006d18 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
 8006d24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	f023 0201 	bic.w	r2, r3, #1
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6a1b      	ldr	r3, [r3, #32]
 8006d3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	4a26      	ldr	r2, [pc, #152]	; (8006ddc <TIM_TI1_SetConfig+0xc4>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d017      	beq.n	8006d76 <TIM_TI1_SetConfig+0x5e>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d4c:	d013      	beq.n	8006d76 <TIM_TI1_SetConfig+0x5e>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	4a23      	ldr	r2, [pc, #140]	; (8006de0 <TIM_TI1_SetConfig+0xc8>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d00f      	beq.n	8006d76 <TIM_TI1_SetConfig+0x5e>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	4a22      	ldr	r2, [pc, #136]	; (8006de4 <TIM_TI1_SetConfig+0xcc>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d00b      	beq.n	8006d76 <TIM_TI1_SetConfig+0x5e>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	4a21      	ldr	r2, [pc, #132]	; (8006de8 <TIM_TI1_SetConfig+0xd0>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d007      	beq.n	8006d76 <TIM_TI1_SetConfig+0x5e>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	4a20      	ldr	r2, [pc, #128]	; (8006dec <TIM_TI1_SetConfig+0xd4>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d003      	beq.n	8006d76 <TIM_TI1_SetConfig+0x5e>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	4a1f      	ldr	r2, [pc, #124]	; (8006df0 <TIM_TI1_SetConfig+0xd8>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d101      	bne.n	8006d7a <TIM_TI1_SetConfig+0x62>
 8006d76:	2301      	movs	r3, #1
 8006d78:	e000      	b.n	8006d7c <TIM_TI1_SetConfig+0x64>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d008      	beq.n	8006d92 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f023 0303 	bic.w	r3, r3, #3
 8006d86:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	617b      	str	r3, [r7, #20]
 8006d90:	e003      	b.n	8006d9a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f043 0301 	orr.w	r3, r3, #1
 8006d98:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006da0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	011b      	lsls	r3, r3, #4
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f023 030a 	bic.w	r3, r3, #10
 8006db4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f003 030a 	and.w	r3, r3, #10
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	621a      	str	r2, [r3, #32]
}
 8006dce:	bf00      	nop
 8006dd0:	371c      	adds	r7, #28
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	40012c00 	.word	0x40012c00
 8006de0:	40000400 	.word	0x40000400
 8006de4:	40000800 	.word	0x40000800
 8006de8:	40000c00 	.word	0x40000c00
 8006dec:	40013400 	.word	0x40013400
 8006df0:	40014000 	.word	0x40014000

08006df4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6a1b      	ldr	r3, [r3, #32]
 8006e04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	f023 0201 	bic.w	r2, r3, #1
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	011b      	lsls	r3, r3, #4
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f023 030a 	bic.w	r3, r3, #10
 8006e30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	621a      	str	r2, [r3, #32]
}
 8006e46:	bf00      	nop
 8006e48:	371c      	adds	r7, #28
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr

08006e52 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e52:	b480      	push	{r7}
 8006e54:	b087      	sub	sp, #28
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	60f8      	str	r0, [r7, #12]
 8006e5a:	60b9      	str	r1, [r7, #8]
 8006e5c:	607a      	str	r2, [r7, #4]
 8006e5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6a1b      	ldr	r3, [r3, #32]
 8006e64:	f023 0210 	bic.w	r2, r3, #16
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	021b      	lsls	r3, r3, #8
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	031b      	lsls	r3, r3, #12
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ea4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	011b      	lsls	r3, r3, #4
 8006eaa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	621a      	str	r2, [r3, #32]
}
 8006ec0:	bf00      	nop
 8006ec2:	371c      	adds	r7, #28
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b087      	sub	sp, #28
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6a1b      	ldr	r3, [r3, #32]
 8006edc:	f023 0210 	bic.w	r2, r3, #16
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ef6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	031b      	lsls	r3, r3, #12
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	011b      	lsls	r3, r3, #4
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	621a      	str	r2, [r3, #32]
}
 8006f20:	bf00      	nop
 8006f22:	371c      	adds	r7, #28
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6a1b      	ldr	r3, [r3, #32]
 8006f50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f023 0303 	bic.w	r3, r3, #3
 8006f58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006f7c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	021b      	lsls	r3, r3, #8
 8006f82:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	693a      	ldr	r2, [r7, #16]
 8006f96:	621a      	str	r2, [r3, #32]
}
 8006f98:	bf00      	nop
 8006f9a:	371c      	adds	r7, #28
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
 8006fb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fd0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	021b      	lsls	r3, r3, #8
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fe2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	031b      	lsls	r3, r3, #12
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006ff6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	031b      	lsls	r3, r3, #12
 8006ffc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	4313      	orrs	r3, r2
 8007004:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	621a      	str	r2, [r3, #32]
}
 8007012:	bf00      	nop
 8007014:	371c      	adds	r7, #28
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800701e:	b480      	push	{r7}
 8007020:	b085      	sub	sp, #20
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007034:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	4313      	orrs	r3, r2
 800703c:	f043 0307 	orr.w	r3, r3, #7
 8007040:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	609a      	str	r2, [r3, #8]
}
 8007048:	bf00      	nop
 800704a:	3714      	adds	r7, #20
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007054:	b480      	push	{r7}
 8007056:	b087      	sub	sp, #28
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
 8007060:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800706e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	021a      	lsls	r2, r3, #8
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	431a      	orrs	r2, r3
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	4313      	orrs	r3, r2
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	4313      	orrs	r3, r2
 8007080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	609a      	str	r2, [r3, #8]
}
 8007088:	bf00      	nop
 800708a:	371c      	adds	r7, #28
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007094:	b480      	push	{r7}
 8007096:	b087      	sub	sp, #28
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	f003 031f 	and.w	r3, r3, #31
 80070a6:	2201      	movs	r2, #1
 80070a8:	fa02 f303 	lsl.w	r3, r2, r3
 80070ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6a1a      	ldr	r2, [r3, #32]
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	43db      	mvns	r3, r3
 80070b6:	401a      	ands	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6a1a      	ldr	r2, [r3, #32]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f003 031f 	and.w	r3, r3, #31
 80070c6:	6879      	ldr	r1, [r7, #4]
 80070c8:	fa01 f303 	lsl.w	r3, r1, r3
 80070cc:	431a      	orrs	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	621a      	str	r2, [r3, #32]
}
 80070d2:	bf00      	nop
 80070d4:	371c      	adds	r7, #28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
	...

080070e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d101      	bne.n	80070f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070f4:	2302      	movs	r3, #2
 80070f6:	e068      	b.n	80071ca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2202      	movs	r2, #2
 8007104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a2e      	ldr	r2, [pc, #184]	; (80071d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d004      	beq.n	800712c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a2d      	ldr	r2, [pc, #180]	; (80071dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d108      	bne.n	800713e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007132:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	4313      	orrs	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007144:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	4313      	orrs	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a1e      	ldr	r2, [pc, #120]	; (80071d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d01d      	beq.n	800719e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800716a:	d018      	beq.n	800719e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a1b      	ldr	r2, [pc, #108]	; (80071e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d013      	beq.n	800719e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a1a      	ldr	r2, [pc, #104]	; (80071e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d00e      	beq.n	800719e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a18      	ldr	r2, [pc, #96]	; (80071e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d009      	beq.n	800719e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a13      	ldr	r2, [pc, #76]	; (80071dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d004      	beq.n	800719e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a14      	ldr	r2, [pc, #80]	; (80071ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d10c      	bne.n	80071b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	40012c00 	.word	0x40012c00
 80071dc:	40013400 	.word	0x40013400
 80071e0:	40000400 	.word	0x40000400
 80071e4:	40000800 	.word	0x40000800
 80071e8:	40000c00 	.word	0x40000c00
 80071ec:	40014000 	.word	0x40014000

080071f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800720c:	bf00      	nop
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d101      	bne.n	800723e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e040      	b.n	80072c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007242:	2b00      	cmp	r3, #0
 8007244:	d106      	bne.n	8007254 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7fa fee8 	bl	8002024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2224      	movs	r2, #36	; 0x24
 8007258:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f022 0201 	bic.w	r2, r2, #1
 8007268:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f8c0 	bl	80073f0 <UART_SetConfig>
 8007270:	4603      	mov	r3, r0
 8007272:	2b01      	cmp	r3, #1
 8007274:	d101      	bne.n	800727a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e022      	b.n	80072c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727e:	2b00      	cmp	r3, #0
 8007280:	d002      	beq.n	8007288 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 fb6c 	bl	8007960 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	685a      	ldr	r2, [r3, #4]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007296:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689a      	ldr	r2, [r3, #8]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f042 0201 	orr.w	r2, r2, #1
 80072b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fbf3 	bl	8007aa4 <UART_CheckIdleState>
 80072be:	4603      	mov	r3, r0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b08a      	sub	sp, #40	; 0x28
 80072cc:	af02      	add	r7, sp, #8
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	603b      	str	r3, [r7, #0]
 80072d4:	4613      	mov	r3, r2
 80072d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072dc:	2b20      	cmp	r3, #32
 80072de:	f040 8082 	bne.w	80073e6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d002      	beq.n	80072ee <HAL_UART_Transmit+0x26>
 80072e8:	88fb      	ldrh	r3, [r7, #6]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d101      	bne.n	80072f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e07a      	b.n	80073e8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d101      	bne.n	8007300 <HAL_UART_Transmit+0x38>
 80072fc:	2302      	movs	r3, #2
 80072fe:	e073      	b.n	80073e8 <HAL_UART_Transmit+0x120>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2221      	movs	r2, #33	; 0x21
 8007314:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007316:	f7fa ff73 	bl	8002200 <HAL_GetTick>
 800731a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	88fa      	ldrh	r2, [r7, #6]
 8007320:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	88fa      	ldrh	r2, [r7, #6]
 8007328:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007334:	d108      	bne.n	8007348 <HAL_UART_Transmit+0x80>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d104      	bne.n	8007348 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800733e:	2300      	movs	r3, #0
 8007340:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	61bb      	str	r3, [r7, #24]
 8007346:	e003      	b.n	8007350 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800734c:	2300      	movs	r3, #0
 800734e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007358:	e02d      	b.n	80073b6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	2200      	movs	r2, #0
 8007362:	2180      	movs	r1, #128	; 0x80
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f000 fbe6 	bl	8007b36 <UART_WaitOnFlagUntilTimeout>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d001      	beq.n	8007374 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e039      	b.n	80073e8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10b      	bne.n	8007392 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	881a      	ldrh	r2, [r3, #0]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007386:	b292      	uxth	r2, r2
 8007388:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	3302      	adds	r3, #2
 800738e:	61bb      	str	r3, [r7, #24]
 8007390:	e008      	b.n	80073a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	781a      	ldrb	r2, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	b292      	uxth	r2, r2
 800739c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	3301      	adds	r3, #1
 80073a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	3b01      	subs	r3, #1
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073bc:	b29b      	uxth	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1cb      	bne.n	800735a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	2200      	movs	r2, #0
 80073ca:	2140      	movs	r1, #64	; 0x40
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f000 fbb2 	bl	8007b36 <UART_WaitOnFlagUntilTimeout>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	e005      	b.n	80073e8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2220      	movs	r2, #32
 80073e0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80073e2:	2300      	movs	r3, #0
 80073e4:	e000      	b.n	80073e8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80073e6:	2302      	movs	r3, #2
  }
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3720      	adds	r7, #32
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073f4:	b08a      	sub	sp, #40	; 0x28
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	689a      	ldr	r2, [r3, #8]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	431a      	orrs	r2, r3
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	431a      	orrs	r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	69db      	ldr	r3, [r3, #28]
 8007414:	4313      	orrs	r3, r2
 8007416:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	4ba4      	ldr	r3, [pc, #656]	; (80076b0 <UART_SetConfig+0x2c0>)
 8007420:	4013      	ands	r3, r2
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	6812      	ldr	r2, [r2, #0]
 8007426:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007428:	430b      	orrs	r3, r1
 800742a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	68da      	ldr	r2, [r3, #12]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	430a      	orrs	r2, r1
 8007440:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a99      	ldr	r2, [pc, #612]	; (80076b4 <UART_SetConfig+0x2c4>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d004      	beq.n	800745c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6a1b      	ldr	r3, [r3, #32]
 8007456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007458:	4313      	orrs	r3, r2
 800745a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800746c:	430a      	orrs	r2, r1
 800746e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a90      	ldr	r2, [pc, #576]	; (80076b8 <UART_SetConfig+0x2c8>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d126      	bne.n	80074c8 <UART_SetConfig+0xd8>
 800747a:	4b90      	ldr	r3, [pc, #576]	; (80076bc <UART_SetConfig+0x2cc>)
 800747c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007480:	f003 0303 	and.w	r3, r3, #3
 8007484:	2b03      	cmp	r3, #3
 8007486:	d81b      	bhi.n	80074c0 <UART_SetConfig+0xd0>
 8007488:	a201      	add	r2, pc, #4	; (adr r2, 8007490 <UART_SetConfig+0xa0>)
 800748a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748e:	bf00      	nop
 8007490:	080074a1 	.word	0x080074a1
 8007494:	080074b1 	.word	0x080074b1
 8007498:	080074a9 	.word	0x080074a9
 800749c:	080074b9 	.word	0x080074b9
 80074a0:	2301      	movs	r3, #1
 80074a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074a6:	e116      	b.n	80076d6 <UART_SetConfig+0x2e6>
 80074a8:	2302      	movs	r3, #2
 80074aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074ae:	e112      	b.n	80076d6 <UART_SetConfig+0x2e6>
 80074b0:	2304      	movs	r3, #4
 80074b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074b6:	e10e      	b.n	80076d6 <UART_SetConfig+0x2e6>
 80074b8:	2308      	movs	r3, #8
 80074ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074be:	e10a      	b.n	80076d6 <UART_SetConfig+0x2e6>
 80074c0:	2310      	movs	r3, #16
 80074c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074c6:	e106      	b.n	80076d6 <UART_SetConfig+0x2e6>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a7c      	ldr	r2, [pc, #496]	; (80076c0 <UART_SetConfig+0x2d0>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d138      	bne.n	8007544 <UART_SetConfig+0x154>
 80074d2:	4b7a      	ldr	r3, [pc, #488]	; (80076bc <UART_SetConfig+0x2cc>)
 80074d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074d8:	f003 030c 	and.w	r3, r3, #12
 80074dc:	2b0c      	cmp	r3, #12
 80074de:	d82d      	bhi.n	800753c <UART_SetConfig+0x14c>
 80074e0:	a201      	add	r2, pc, #4	; (adr r2, 80074e8 <UART_SetConfig+0xf8>)
 80074e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e6:	bf00      	nop
 80074e8:	0800751d 	.word	0x0800751d
 80074ec:	0800753d 	.word	0x0800753d
 80074f0:	0800753d 	.word	0x0800753d
 80074f4:	0800753d 	.word	0x0800753d
 80074f8:	0800752d 	.word	0x0800752d
 80074fc:	0800753d 	.word	0x0800753d
 8007500:	0800753d 	.word	0x0800753d
 8007504:	0800753d 	.word	0x0800753d
 8007508:	08007525 	.word	0x08007525
 800750c:	0800753d 	.word	0x0800753d
 8007510:	0800753d 	.word	0x0800753d
 8007514:	0800753d 	.word	0x0800753d
 8007518:	08007535 	.word	0x08007535
 800751c:	2300      	movs	r3, #0
 800751e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007522:	e0d8      	b.n	80076d6 <UART_SetConfig+0x2e6>
 8007524:	2302      	movs	r3, #2
 8007526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800752a:	e0d4      	b.n	80076d6 <UART_SetConfig+0x2e6>
 800752c:	2304      	movs	r3, #4
 800752e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007532:	e0d0      	b.n	80076d6 <UART_SetConfig+0x2e6>
 8007534:	2308      	movs	r3, #8
 8007536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800753a:	e0cc      	b.n	80076d6 <UART_SetConfig+0x2e6>
 800753c:	2310      	movs	r3, #16
 800753e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007542:	e0c8      	b.n	80076d6 <UART_SetConfig+0x2e6>
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a5e      	ldr	r2, [pc, #376]	; (80076c4 <UART_SetConfig+0x2d4>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d125      	bne.n	800759a <UART_SetConfig+0x1aa>
 800754e:	4b5b      	ldr	r3, [pc, #364]	; (80076bc <UART_SetConfig+0x2cc>)
 8007550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007554:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007558:	2b30      	cmp	r3, #48	; 0x30
 800755a:	d016      	beq.n	800758a <UART_SetConfig+0x19a>
 800755c:	2b30      	cmp	r3, #48	; 0x30
 800755e:	d818      	bhi.n	8007592 <UART_SetConfig+0x1a2>
 8007560:	2b20      	cmp	r3, #32
 8007562:	d00a      	beq.n	800757a <UART_SetConfig+0x18a>
 8007564:	2b20      	cmp	r3, #32
 8007566:	d814      	bhi.n	8007592 <UART_SetConfig+0x1a2>
 8007568:	2b00      	cmp	r3, #0
 800756a:	d002      	beq.n	8007572 <UART_SetConfig+0x182>
 800756c:	2b10      	cmp	r3, #16
 800756e:	d008      	beq.n	8007582 <UART_SetConfig+0x192>
 8007570:	e00f      	b.n	8007592 <UART_SetConfig+0x1a2>
 8007572:	2300      	movs	r3, #0
 8007574:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007578:	e0ad      	b.n	80076d6 <UART_SetConfig+0x2e6>
 800757a:	2302      	movs	r3, #2
 800757c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007580:	e0a9      	b.n	80076d6 <UART_SetConfig+0x2e6>
 8007582:	2304      	movs	r3, #4
 8007584:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007588:	e0a5      	b.n	80076d6 <UART_SetConfig+0x2e6>
 800758a:	2308      	movs	r3, #8
 800758c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007590:	e0a1      	b.n	80076d6 <UART_SetConfig+0x2e6>
 8007592:	2310      	movs	r3, #16
 8007594:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007598:	e09d      	b.n	80076d6 <UART_SetConfig+0x2e6>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a4a      	ldr	r2, [pc, #296]	; (80076c8 <UART_SetConfig+0x2d8>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d125      	bne.n	80075f0 <UART_SetConfig+0x200>
 80075a4:	4b45      	ldr	r3, [pc, #276]	; (80076bc <UART_SetConfig+0x2cc>)
 80075a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80075ae:	2bc0      	cmp	r3, #192	; 0xc0
 80075b0:	d016      	beq.n	80075e0 <UART_SetConfig+0x1f0>
 80075b2:	2bc0      	cmp	r3, #192	; 0xc0
 80075b4:	d818      	bhi.n	80075e8 <UART_SetConfig+0x1f8>
 80075b6:	2b80      	cmp	r3, #128	; 0x80
 80075b8:	d00a      	beq.n	80075d0 <UART_SetConfig+0x1e0>
 80075ba:	2b80      	cmp	r3, #128	; 0x80
 80075bc:	d814      	bhi.n	80075e8 <UART_SetConfig+0x1f8>
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <UART_SetConfig+0x1d8>
 80075c2:	2b40      	cmp	r3, #64	; 0x40
 80075c4:	d008      	beq.n	80075d8 <UART_SetConfig+0x1e8>
 80075c6:	e00f      	b.n	80075e8 <UART_SetConfig+0x1f8>
 80075c8:	2300      	movs	r3, #0
 80075ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075ce:	e082      	b.n	80076d6 <UART_SetConfig+0x2e6>
 80075d0:	2302      	movs	r3, #2
 80075d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075d6:	e07e      	b.n	80076d6 <UART_SetConfig+0x2e6>
 80075d8:	2304      	movs	r3, #4
 80075da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075de:	e07a      	b.n	80076d6 <UART_SetConfig+0x2e6>
 80075e0:	2308      	movs	r3, #8
 80075e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075e6:	e076      	b.n	80076d6 <UART_SetConfig+0x2e6>
 80075e8:	2310      	movs	r3, #16
 80075ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075ee:	e072      	b.n	80076d6 <UART_SetConfig+0x2e6>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a35      	ldr	r2, [pc, #212]	; (80076cc <UART_SetConfig+0x2dc>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d12a      	bne.n	8007650 <UART_SetConfig+0x260>
 80075fa:	4b30      	ldr	r3, [pc, #192]	; (80076bc <UART_SetConfig+0x2cc>)
 80075fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007604:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007608:	d01a      	beq.n	8007640 <UART_SetConfig+0x250>
 800760a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800760e:	d81b      	bhi.n	8007648 <UART_SetConfig+0x258>
 8007610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007614:	d00c      	beq.n	8007630 <UART_SetConfig+0x240>
 8007616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800761a:	d815      	bhi.n	8007648 <UART_SetConfig+0x258>
 800761c:	2b00      	cmp	r3, #0
 800761e:	d003      	beq.n	8007628 <UART_SetConfig+0x238>
 8007620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007624:	d008      	beq.n	8007638 <UART_SetConfig+0x248>
 8007626:	e00f      	b.n	8007648 <UART_SetConfig+0x258>
 8007628:	2300      	movs	r3, #0
 800762a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800762e:	e052      	b.n	80076d6 <UART_SetConfig+0x2e6>
 8007630:	2302      	movs	r3, #2
 8007632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007636:	e04e      	b.n	80076d6 <UART_SetConfig+0x2e6>
 8007638:	2304      	movs	r3, #4
 800763a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800763e:	e04a      	b.n	80076d6 <UART_SetConfig+0x2e6>
 8007640:	2308      	movs	r3, #8
 8007642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007646:	e046      	b.n	80076d6 <UART_SetConfig+0x2e6>
 8007648:	2310      	movs	r3, #16
 800764a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800764e:	e042      	b.n	80076d6 <UART_SetConfig+0x2e6>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a17      	ldr	r2, [pc, #92]	; (80076b4 <UART_SetConfig+0x2c4>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d13a      	bne.n	80076d0 <UART_SetConfig+0x2e0>
 800765a:	4b18      	ldr	r3, [pc, #96]	; (80076bc <UART_SetConfig+0x2cc>)
 800765c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007660:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007664:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007668:	d01a      	beq.n	80076a0 <UART_SetConfig+0x2b0>
 800766a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800766e:	d81b      	bhi.n	80076a8 <UART_SetConfig+0x2b8>
 8007670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007674:	d00c      	beq.n	8007690 <UART_SetConfig+0x2a0>
 8007676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800767a:	d815      	bhi.n	80076a8 <UART_SetConfig+0x2b8>
 800767c:	2b00      	cmp	r3, #0
 800767e:	d003      	beq.n	8007688 <UART_SetConfig+0x298>
 8007680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007684:	d008      	beq.n	8007698 <UART_SetConfig+0x2a8>
 8007686:	e00f      	b.n	80076a8 <UART_SetConfig+0x2b8>
 8007688:	2300      	movs	r3, #0
 800768a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800768e:	e022      	b.n	80076d6 <UART_SetConfig+0x2e6>
 8007690:	2302      	movs	r3, #2
 8007692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007696:	e01e      	b.n	80076d6 <UART_SetConfig+0x2e6>
 8007698:	2304      	movs	r3, #4
 800769a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800769e:	e01a      	b.n	80076d6 <UART_SetConfig+0x2e6>
 80076a0:	2308      	movs	r3, #8
 80076a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076a6:	e016      	b.n	80076d6 <UART_SetConfig+0x2e6>
 80076a8:	2310      	movs	r3, #16
 80076aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ae:	e012      	b.n	80076d6 <UART_SetConfig+0x2e6>
 80076b0:	efff69f3 	.word	0xefff69f3
 80076b4:	40008000 	.word	0x40008000
 80076b8:	40013800 	.word	0x40013800
 80076bc:	40021000 	.word	0x40021000
 80076c0:	40004400 	.word	0x40004400
 80076c4:	40004800 	.word	0x40004800
 80076c8:	40004c00 	.word	0x40004c00
 80076cc:	40005000 	.word	0x40005000
 80076d0:	2310      	movs	r3, #16
 80076d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a9f      	ldr	r2, [pc, #636]	; (8007958 <UART_SetConfig+0x568>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d17a      	bne.n	80077d6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076e4:	2b08      	cmp	r3, #8
 80076e6:	d824      	bhi.n	8007732 <UART_SetConfig+0x342>
 80076e8:	a201      	add	r2, pc, #4	; (adr r2, 80076f0 <UART_SetConfig+0x300>)
 80076ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ee:	bf00      	nop
 80076f0:	08007715 	.word	0x08007715
 80076f4:	08007733 	.word	0x08007733
 80076f8:	0800771d 	.word	0x0800771d
 80076fc:	08007733 	.word	0x08007733
 8007700:	08007723 	.word	0x08007723
 8007704:	08007733 	.word	0x08007733
 8007708:	08007733 	.word	0x08007733
 800770c:	08007733 	.word	0x08007733
 8007710:	0800772b 	.word	0x0800772b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007714:	f7fd fab4 	bl	8004c80 <HAL_RCC_GetPCLK1Freq>
 8007718:	61f8      	str	r0, [r7, #28]
        break;
 800771a:	e010      	b.n	800773e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800771c:	4b8f      	ldr	r3, [pc, #572]	; (800795c <UART_SetConfig+0x56c>)
 800771e:	61fb      	str	r3, [r7, #28]
        break;
 8007720:	e00d      	b.n	800773e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007722:	f7fd fa15 	bl	8004b50 <HAL_RCC_GetSysClockFreq>
 8007726:	61f8      	str	r0, [r7, #28]
        break;
 8007728:	e009      	b.n	800773e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800772a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800772e:	61fb      	str	r3, [r7, #28]
        break;
 8007730:	e005      	b.n	800773e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007732:	2300      	movs	r3, #0
 8007734:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800773c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 80fb 	beq.w	800793c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	4613      	mov	r3, r2
 800774c:	005b      	lsls	r3, r3, #1
 800774e:	4413      	add	r3, r2
 8007750:	69fa      	ldr	r2, [r7, #28]
 8007752:	429a      	cmp	r2, r3
 8007754:	d305      	bcc.n	8007762 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800775c:	69fa      	ldr	r2, [r7, #28]
 800775e:	429a      	cmp	r2, r3
 8007760:	d903      	bls.n	800776a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007768:	e0e8      	b.n	800793c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	2200      	movs	r2, #0
 800776e:	461c      	mov	r4, r3
 8007770:	4615      	mov	r5, r2
 8007772:	f04f 0200 	mov.w	r2, #0
 8007776:	f04f 0300 	mov.w	r3, #0
 800777a:	022b      	lsls	r3, r5, #8
 800777c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007780:	0222      	lsls	r2, r4, #8
 8007782:	68f9      	ldr	r1, [r7, #12]
 8007784:	6849      	ldr	r1, [r1, #4]
 8007786:	0849      	lsrs	r1, r1, #1
 8007788:	2000      	movs	r0, #0
 800778a:	4688      	mov	r8, r1
 800778c:	4681      	mov	r9, r0
 800778e:	eb12 0a08 	adds.w	sl, r2, r8
 8007792:	eb43 0b09 	adc.w	fp, r3, r9
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	603b      	str	r3, [r7, #0]
 800779e:	607a      	str	r2, [r7, #4]
 80077a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077a4:	4650      	mov	r0, sl
 80077a6:	4659      	mov	r1, fp
 80077a8:	f7f9 fa6e 	bl	8000c88 <__aeabi_uldivmod>
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	4613      	mov	r3, r2
 80077b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077ba:	d308      	bcc.n	80077ce <UART_SetConfig+0x3de>
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077c2:	d204      	bcs.n	80077ce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	69ba      	ldr	r2, [r7, #24]
 80077ca:	60da      	str	r2, [r3, #12]
 80077cc:	e0b6      	b.n	800793c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80077d4:	e0b2      	b.n	800793c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077de:	d15e      	bne.n	800789e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80077e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077e4:	2b08      	cmp	r3, #8
 80077e6:	d828      	bhi.n	800783a <UART_SetConfig+0x44a>
 80077e8:	a201      	add	r2, pc, #4	; (adr r2, 80077f0 <UART_SetConfig+0x400>)
 80077ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ee:	bf00      	nop
 80077f0:	08007815 	.word	0x08007815
 80077f4:	0800781d 	.word	0x0800781d
 80077f8:	08007825 	.word	0x08007825
 80077fc:	0800783b 	.word	0x0800783b
 8007800:	0800782b 	.word	0x0800782b
 8007804:	0800783b 	.word	0x0800783b
 8007808:	0800783b 	.word	0x0800783b
 800780c:	0800783b 	.word	0x0800783b
 8007810:	08007833 	.word	0x08007833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007814:	f7fd fa34 	bl	8004c80 <HAL_RCC_GetPCLK1Freq>
 8007818:	61f8      	str	r0, [r7, #28]
        break;
 800781a:	e014      	b.n	8007846 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800781c:	f7fd fa46 	bl	8004cac <HAL_RCC_GetPCLK2Freq>
 8007820:	61f8      	str	r0, [r7, #28]
        break;
 8007822:	e010      	b.n	8007846 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007824:	4b4d      	ldr	r3, [pc, #308]	; (800795c <UART_SetConfig+0x56c>)
 8007826:	61fb      	str	r3, [r7, #28]
        break;
 8007828:	e00d      	b.n	8007846 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800782a:	f7fd f991 	bl	8004b50 <HAL_RCC_GetSysClockFreq>
 800782e:	61f8      	str	r0, [r7, #28]
        break;
 8007830:	e009      	b.n	8007846 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007836:	61fb      	str	r3, [r7, #28]
        break;
 8007838:	e005      	b.n	8007846 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800783a:	2300      	movs	r3, #0
 800783c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007844:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d077      	beq.n	800793c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	005a      	lsls	r2, r3, #1
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	085b      	lsrs	r3, r3, #1
 8007856:	441a      	add	r2, r3
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007860:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	2b0f      	cmp	r3, #15
 8007866:	d916      	bls.n	8007896 <UART_SetConfig+0x4a6>
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800786e:	d212      	bcs.n	8007896 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	b29b      	uxth	r3, r3
 8007874:	f023 030f 	bic.w	r3, r3, #15
 8007878:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	085b      	lsrs	r3, r3, #1
 800787e:	b29b      	uxth	r3, r3
 8007880:	f003 0307 	and.w	r3, r3, #7
 8007884:	b29a      	uxth	r2, r3
 8007886:	8afb      	ldrh	r3, [r7, #22]
 8007888:	4313      	orrs	r3, r2
 800788a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	8afa      	ldrh	r2, [r7, #22]
 8007892:	60da      	str	r2, [r3, #12]
 8007894:	e052      	b.n	800793c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800789c:	e04e      	b.n	800793c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800789e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078a2:	2b08      	cmp	r3, #8
 80078a4:	d827      	bhi.n	80078f6 <UART_SetConfig+0x506>
 80078a6:	a201      	add	r2, pc, #4	; (adr r2, 80078ac <UART_SetConfig+0x4bc>)
 80078a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ac:	080078d1 	.word	0x080078d1
 80078b0:	080078d9 	.word	0x080078d9
 80078b4:	080078e1 	.word	0x080078e1
 80078b8:	080078f7 	.word	0x080078f7
 80078bc:	080078e7 	.word	0x080078e7
 80078c0:	080078f7 	.word	0x080078f7
 80078c4:	080078f7 	.word	0x080078f7
 80078c8:	080078f7 	.word	0x080078f7
 80078cc:	080078ef 	.word	0x080078ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078d0:	f7fd f9d6 	bl	8004c80 <HAL_RCC_GetPCLK1Freq>
 80078d4:	61f8      	str	r0, [r7, #28]
        break;
 80078d6:	e014      	b.n	8007902 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078d8:	f7fd f9e8 	bl	8004cac <HAL_RCC_GetPCLK2Freq>
 80078dc:	61f8      	str	r0, [r7, #28]
        break;
 80078de:	e010      	b.n	8007902 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078e0:	4b1e      	ldr	r3, [pc, #120]	; (800795c <UART_SetConfig+0x56c>)
 80078e2:	61fb      	str	r3, [r7, #28]
        break;
 80078e4:	e00d      	b.n	8007902 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078e6:	f7fd f933 	bl	8004b50 <HAL_RCC_GetSysClockFreq>
 80078ea:	61f8      	str	r0, [r7, #28]
        break;
 80078ec:	e009      	b.n	8007902 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078f2:	61fb      	str	r3, [r7, #28]
        break;
 80078f4:	e005      	b.n	8007902 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80078f6:	2300      	movs	r3, #0
 80078f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007900:	bf00      	nop
    }

    if (pclk != 0U)
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d019      	beq.n	800793c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	085a      	lsrs	r2, r3, #1
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	441a      	add	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	fbb2 f3f3 	udiv	r3, r2, r3
 800791a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	2b0f      	cmp	r3, #15
 8007920:	d909      	bls.n	8007936 <UART_SetConfig+0x546>
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007928:	d205      	bcs.n	8007936 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	b29a      	uxth	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	60da      	str	r2, [r3, #12]
 8007934:	e002      	b.n	800793c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007948:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800794c:	4618      	mov	r0, r3
 800794e:	3728      	adds	r7, #40	; 0x28
 8007950:	46bd      	mov	sp, r7
 8007952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007956:	bf00      	nop
 8007958:	40008000 	.word	0x40008000
 800795c:	00f42400 	.word	0x00f42400

08007960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796c:	f003 0301 	and.w	r3, r3, #1
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00a      	beq.n	800798a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	430a      	orrs	r2, r1
 8007988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798e:	f003 0302 	and.w	r3, r3, #2
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00a      	beq.n	80079ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	430a      	orrs	r2, r1
 80079aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b0:	f003 0304 	and.w	r3, r3, #4
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00a      	beq.n	80079ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	430a      	orrs	r2, r1
 80079cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d2:	f003 0308 	and.w	r3, r3, #8
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00a      	beq.n	80079f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	430a      	orrs	r2, r1
 80079ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f4:	f003 0310 	and.w	r3, r3, #16
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00a      	beq.n	8007a12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	430a      	orrs	r2, r1
 8007a10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a16:	f003 0320 	and.w	r3, r3, #32
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00a      	beq.n	8007a34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	430a      	orrs	r2, r1
 8007a32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d01a      	beq.n	8007a76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a5e:	d10a      	bne.n	8007a76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	430a      	orrs	r2, r1
 8007a74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00a      	beq.n	8007a98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	430a      	orrs	r2, r1
 8007a96:	605a      	str	r2, [r3, #4]
  }
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af02      	add	r7, sp, #8
 8007aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ab4:	f7fa fba4 	bl	8002200 <HAL_GetTick>
 8007ab8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0308 	and.w	r3, r3, #8
 8007ac4:	2b08      	cmp	r3, #8
 8007ac6:	d10e      	bne.n	8007ae6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f82d 	bl	8007b36 <UART_WaitOnFlagUntilTimeout>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d001      	beq.n	8007ae6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e023      	b.n	8007b2e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0304 	and.w	r3, r3, #4
 8007af0:	2b04      	cmp	r3, #4
 8007af2:	d10e      	bne.n	8007b12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007af4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007af8:	9300      	str	r3, [sp, #0]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f817 	bl	8007b36 <UART_WaitOnFlagUntilTimeout>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e00d      	b.n	8007b2e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2220      	movs	r2, #32
 8007b16:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2220      	movs	r2, #32
 8007b1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b09c      	sub	sp, #112	; 0x70
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	60f8      	str	r0, [r7, #12]
 8007b3e:	60b9      	str	r1, [r7, #8]
 8007b40:	603b      	str	r3, [r7, #0]
 8007b42:	4613      	mov	r3, r2
 8007b44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b46:	e0a5      	b.n	8007c94 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4e:	f000 80a1 	beq.w	8007c94 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b52:	f7fa fb55 	bl	8002200 <HAL_GetTick>
 8007b56:	4602      	mov	r2, r0
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d302      	bcc.n	8007b68 <UART_WaitOnFlagUntilTimeout+0x32>
 8007b62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d13e      	bne.n	8007be6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b70:	e853 3f00 	ldrex	r3, [r3]
 8007b74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b7c:	667b      	str	r3, [r7, #100]	; 0x64
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	461a      	mov	r2, r3
 8007b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b88:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e6      	bne.n	8007b68 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	3308      	adds	r3, #8
 8007ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba4:	e853 3f00 	ldrex	r3, [r3]
 8007ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bac:	f023 0301 	bic.w	r3, r3, #1
 8007bb0:	663b      	str	r3, [r7, #96]	; 0x60
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	3308      	adds	r3, #8
 8007bb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007bba:	64ba      	str	r2, [r7, #72]	; 0x48
 8007bbc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007bc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bc2:	e841 2300 	strex	r3, r2, [r1]
 8007bc6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1e5      	bne.n	8007b9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2220      	movs	r2, #32
 8007bd2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2220      	movs	r2, #32
 8007bd8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e067      	b.n	8007cb6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0304 	and.w	r3, r3, #4
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d04f      	beq.n	8007c94 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c02:	d147      	bne.n	8007c94 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c0c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c16:	e853 3f00 	ldrex	r3, [r3]
 8007c1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	461a      	mov	r2, r3
 8007c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c34:	e841 2300 	strex	r3, r2, [r1]
 8007c38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1e6      	bne.n	8007c0e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	3308      	adds	r3, #8
 8007c46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	e853 3f00 	ldrex	r3, [r3]
 8007c4e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	f023 0301 	bic.w	r3, r3, #1
 8007c56:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	3308      	adds	r3, #8
 8007c5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c60:	623a      	str	r2, [r7, #32]
 8007c62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c64:	69f9      	ldr	r1, [r7, #28]
 8007c66:	6a3a      	ldr	r2, [r7, #32]
 8007c68:	e841 2300 	strex	r3, r2, [r1]
 8007c6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1e5      	bne.n	8007c40 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2220      	movs	r2, #32
 8007c78:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2220      	movs	r2, #32
 8007c7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2220      	movs	r2, #32
 8007c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007c90:	2303      	movs	r3, #3
 8007c92:	e010      	b.n	8007cb6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	69da      	ldr	r2, [r3, #28]
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	68ba      	ldr	r2, [r7, #8]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	bf0c      	ite	eq
 8007ca4:	2301      	moveq	r3, #1
 8007ca6:	2300      	movne	r3, #0
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	461a      	mov	r2, r3
 8007cac:	79fb      	ldrb	r3, [r7, #7]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	f43f af4a 	beq.w	8007b48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3770      	adds	r7, #112	; 0x70
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
	...

08007cc0 <__errno>:
 8007cc0:	4b01      	ldr	r3, [pc, #4]	; (8007cc8 <__errno+0x8>)
 8007cc2:	6818      	ldr	r0, [r3, #0]
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	2000000c 	.word	0x2000000c

08007ccc <__libc_init_array>:
 8007ccc:	b570      	push	{r4, r5, r6, lr}
 8007cce:	4d0d      	ldr	r5, [pc, #52]	; (8007d04 <__libc_init_array+0x38>)
 8007cd0:	4c0d      	ldr	r4, [pc, #52]	; (8007d08 <__libc_init_array+0x3c>)
 8007cd2:	1b64      	subs	r4, r4, r5
 8007cd4:	10a4      	asrs	r4, r4, #2
 8007cd6:	2600      	movs	r6, #0
 8007cd8:	42a6      	cmp	r6, r4
 8007cda:	d109      	bne.n	8007cf0 <__libc_init_array+0x24>
 8007cdc:	4d0b      	ldr	r5, [pc, #44]	; (8007d0c <__libc_init_array+0x40>)
 8007cde:	4c0c      	ldr	r4, [pc, #48]	; (8007d10 <__libc_init_array+0x44>)
 8007ce0:	f002 fd36 	bl	800a750 <_init>
 8007ce4:	1b64      	subs	r4, r4, r5
 8007ce6:	10a4      	asrs	r4, r4, #2
 8007ce8:	2600      	movs	r6, #0
 8007cea:	42a6      	cmp	r6, r4
 8007cec:	d105      	bne.n	8007cfa <__libc_init_array+0x2e>
 8007cee:	bd70      	pop	{r4, r5, r6, pc}
 8007cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cf4:	4798      	blx	r3
 8007cf6:	3601      	adds	r6, #1
 8007cf8:	e7ee      	b.n	8007cd8 <__libc_init_array+0xc>
 8007cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cfe:	4798      	blx	r3
 8007d00:	3601      	adds	r6, #1
 8007d02:	e7f2      	b.n	8007cea <__libc_init_array+0x1e>
 8007d04:	0800ab9c 	.word	0x0800ab9c
 8007d08:	0800ab9c 	.word	0x0800ab9c
 8007d0c:	0800ab9c 	.word	0x0800ab9c
 8007d10:	0800aba0 	.word	0x0800aba0

08007d14 <memset>:
 8007d14:	4402      	add	r2, r0
 8007d16:	4603      	mov	r3, r0
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d100      	bne.n	8007d1e <memset+0xa>
 8007d1c:	4770      	bx	lr
 8007d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d22:	e7f9      	b.n	8007d18 <memset+0x4>

08007d24 <__cvt>:
 8007d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d28:	ec55 4b10 	vmov	r4, r5, d0
 8007d2c:	2d00      	cmp	r5, #0
 8007d2e:	460e      	mov	r6, r1
 8007d30:	4619      	mov	r1, r3
 8007d32:	462b      	mov	r3, r5
 8007d34:	bfbb      	ittet	lt
 8007d36:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007d3a:	461d      	movlt	r5, r3
 8007d3c:	2300      	movge	r3, #0
 8007d3e:	232d      	movlt	r3, #45	; 0x2d
 8007d40:	700b      	strb	r3, [r1, #0]
 8007d42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d44:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007d48:	4691      	mov	r9, r2
 8007d4a:	f023 0820 	bic.w	r8, r3, #32
 8007d4e:	bfbc      	itt	lt
 8007d50:	4622      	movlt	r2, r4
 8007d52:	4614      	movlt	r4, r2
 8007d54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d58:	d005      	beq.n	8007d66 <__cvt+0x42>
 8007d5a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007d5e:	d100      	bne.n	8007d62 <__cvt+0x3e>
 8007d60:	3601      	adds	r6, #1
 8007d62:	2102      	movs	r1, #2
 8007d64:	e000      	b.n	8007d68 <__cvt+0x44>
 8007d66:	2103      	movs	r1, #3
 8007d68:	ab03      	add	r3, sp, #12
 8007d6a:	9301      	str	r3, [sp, #4]
 8007d6c:	ab02      	add	r3, sp, #8
 8007d6e:	9300      	str	r3, [sp, #0]
 8007d70:	ec45 4b10 	vmov	d0, r4, r5
 8007d74:	4653      	mov	r3, sl
 8007d76:	4632      	mov	r2, r6
 8007d78:	f000 fcca 	bl	8008710 <_dtoa_r>
 8007d7c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007d80:	4607      	mov	r7, r0
 8007d82:	d102      	bne.n	8007d8a <__cvt+0x66>
 8007d84:	f019 0f01 	tst.w	r9, #1
 8007d88:	d022      	beq.n	8007dd0 <__cvt+0xac>
 8007d8a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d8e:	eb07 0906 	add.w	r9, r7, r6
 8007d92:	d110      	bne.n	8007db6 <__cvt+0x92>
 8007d94:	783b      	ldrb	r3, [r7, #0]
 8007d96:	2b30      	cmp	r3, #48	; 0x30
 8007d98:	d10a      	bne.n	8007db0 <__cvt+0x8c>
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	4620      	mov	r0, r4
 8007da0:	4629      	mov	r1, r5
 8007da2:	f7f8 fe91 	bl	8000ac8 <__aeabi_dcmpeq>
 8007da6:	b918      	cbnz	r0, 8007db0 <__cvt+0x8c>
 8007da8:	f1c6 0601 	rsb	r6, r6, #1
 8007dac:	f8ca 6000 	str.w	r6, [sl]
 8007db0:	f8da 3000 	ldr.w	r3, [sl]
 8007db4:	4499      	add	r9, r3
 8007db6:	2200      	movs	r2, #0
 8007db8:	2300      	movs	r3, #0
 8007dba:	4620      	mov	r0, r4
 8007dbc:	4629      	mov	r1, r5
 8007dbe:	f7f8 fe83 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dc2:	b108      	cbz	r0, 8007dc8 <__cvt+0xa4>
 8007dc4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007dc8:	2230      	movs	r2, #48	; 0x30
 8007dca:	9b03      	ldr	r3, [sp, #12]
 8007dcc:	454b      	cmp	r3, r9
 8007dce:	d307      	bcc.n	8007de0 <__cvt+0xbc>
 8007dd0:	9b03      	ldr	r3, [sp, #12]
 8007dd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007dd4:	1bdb      	subs	r3, r3, r7
 8007dd6:	4638      	mov	r0, r7
 8007dd8:	6013      	str	r3, [r2, #0]
 8007dda:	b004      	add	sp, #16
 8007ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007de0:	1c59      	adds	r1, r3, #1
 8007de2:	9103      	str	r1, [sp, #12]
 8007de4:	701a      	strb	r2, [r3, #0]
 8007de6:	e7f0      	b.n	8007dca <__cvt+0xa6>

08007de8 <__exponent>:
 8007de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dea:	4603      	mov	r3, r0
 8007dec:	2900      	cmp	r1, #0
 8007dee:	bfb8      	it	lt
 8007df0:	4249      	neglt	r1, r1
 8007df2:	f803 2b02 	strb.w	r2, [r3], #2
 8007df6:	bfb4      	ite	lt
 8007df8:	222d      	movlt	r2, #45	; 0x2d
 8007dfa:	222b      	movge	r2, #43	; 0x2b
 8007dfc:	2909      	cmp	r1, #9
 8007dfe:	7042      	strb	r2, [r0, #1]
 8007e00:	dd2a      	ble.n	8007e58 <__exponent+0x70>
 8007e02:	f10d 0407 	add.w	r4, sp, #7
 8007e06:	46a4      	mov	ip, r4
 8007e08:	270a      	movs	r7, #10
 8007e0a:	46a6      	mov	lr, r4
 8007e0c:	460a      	mov	r2, r1
 8007e0e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007e12:	fb07 1516 	mls	r5, r7, r6, r1
 8007e16:	3530      	adds	r5, #48	; 0x30
 8007e18:	2a63      	cmp	r2, #99	; 0x63
 8007e1a:	f104 34ff 	add.w	r4, r4, #4294967295
 8007e1e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007e22:	4631      	mov	r1, r6
 8007e24:	dcf1      	bgt.n	8007e0a <__exponent+0x22>
 8007e26:	3130      	adds	r1, #48	; 0x30
 8007e28:	f1ae 0502 	sub.w	r5, lr, #2
 8007e2c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007e30:	1c44      	adds	r4, r0, #1
 8007e32:	4629      	mov	r1, r5
 8007e34:	4561      	cmp	r1, ip
 8007e36:	d30a      	bcc.n	8007e4e <__exponent+0x66>
 8007e38:	f10d 0209 	add.w	r2, sp, #9
 8007e3c:	eba2 020e 	sub.w	r2, r2, lr
 8007e40:	4565      	cmp	r5, ip
 8007e42:	bf88      	it	hi
 8007e44:	2200      	movhi	r2, #0
 8007e46:	4413      	add	r3, r2
 8007e48:	1a18      	subs	r0, r3, r0
 8007e4a:	b003      	add	sp, #12
 8007e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e52:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007e56:	e7ed      	b.n	8007e34 <__exponent+0x4c>
 8007e58:	2330      	movs	r3, #48	; 0x30
 8007e5a:	3130      	adds	r1, #48	; 0x30
 8007e5c:	7083      	strb	r3, [r0, #2]
 8007e5e:	70c1      	strb	r1, [r0, #3]
 8007e60:	1d03      	adds	r3, r0, #4
 8007e62:	e7f1      	b.n	8007e48 <__exponent+0x60>

08007e64 <_printf_float>:
 8007e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e68:	ed2d 8b02 	vpush	{d8}
 8007e6c:	b08d      	sub	sp, #52	; 0x34
 8007e6e:	460c      	mov	r4, r1
 8007e70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007e74:	4616      	mov	r6, r2
 8007e76:	461f      	mov	r7, r3
 8007e78:	4605      	mov	r5, r0
 8007e7a:	f001 fa37 	bl	80092ec <_localeconv_r>
 8007e7e:	f8d0 a000 	ldr.w	sl, [r0]
 8007e82:	4650      	mov	r0, sl
 8007e84:	f7f8 f9a4 	bl	80001d0 <strlen>
 8007e88:	2300      	movs	r3, #0
 8007e8a:	930a      	str	r3, [sp, #40]	; 0x28
 8007e8c:	6823      	ldr	r3, [r4, #0]
 8007e8e:	9305      	str	r3, [sp, #20]
 8007e90:	f8d8 3000 	ldr.w	r3, [r8]
 8007e94:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007e98:	3307      	adds	r3, #7
 8007e9a:	f023 0307 	bic.w	r3, r3, #7
 8007e9e:	f103 0208 	add.w	r2, r3, #8
 8007ea2:	f8c8 2000 	str.w	r2, [r8]
 8007ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eaa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007eae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007eb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007eb6:	9307      	str	r3, [sp, #28]
 8007eb8:	f8cd 8018 	str.w	r8, [sp, #24]
 8007ebc:	ee08 0a10 	vmov	s16, r0
 8007ec0:	4b9f      	ldr	r3, [pc, #636]	; (8008140 <_printf_float+0x2dc>)
 8007ec2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eca:	f7f8 fe2f 	bl	8000b2c <__aeabi_dcmpun>
 8007ece:	bb88      	cbnz	r0, 8007f34 <_printf_float+0xd0>
 8007ed0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ed4:	4b9a      	ldr	r3, [pc, #616]	; (8008140 <_printf_float+0x2dc>)
 8007ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eda:	f7f8 fe09 	bl	8000af0 <__aeabi_dcmple>
 8007ede:	bb48      	cbnz	r0, 8007f34 <_printf_float+0xd0>
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	4640      	mov	r0, r8
 8007ee6:	4649      	mov	r1, r9
 8007ee8:	f7f8 fdf8 	bl	8000adc <__aeabi_dcmplt>
 8007eec:	b110      	cbz	r0, 8007ef4 <_printf_float+0x90>
 8007eee:	232d      	movs	r3, #45	; 0x2d
 8007ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ef4:	4b93      	ldr	r3, [pc, #588]	; (8008144 <_printf_float+0x2e0>)
 8007ef6:	4894      	ldr	r0, [pc, #592]	; (8008148 <_printf_float+0x2e4>)
 8007ef8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007efc:	bf94      	ite	ls
 8007efe:	4698      	movls	r8, r3
 8007f00:	4680      	movhi	r8, r0
 8007f02:	2303      	movs	r3, #3
 8007f04:	6123      	str	r3, [r4, #16]
 8007f06:	9b05      	ldr	r3, [sp, #20]
 8007f08:	f023 0204 	bic.w	r2, r3, #4
 8007f0c:	6022      	str	r2, [r4, #0]
 8007f0e:	f04f 0900 	mov.w	r9, #0
 8007f12:	9700      	str	r7, [sp, #0]
 8007f14:	4633      	mov	r3, r6
 8007f16:	aa0b      	add	r2, sp, #44	; 0x2c
 8007f18:	4621      	mov	r1, r4
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	f000 f9d8 	bl	80082d0 <_printf_common>
 8007f20:	3001      	adds	r0, #1
 8007f22:	f040 8090 	bne.w	8008046 <_printf_float+0x1e2>
 8007f26:	f04f 30ff 	mov.w	r0, #4294967295
 8007f2a:	b00d      	add	sp, #52	; 0x34
 8007f2c:	ecbd 8b02 	vpop	{d8}
 8007f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f34:	4642      	mov	r2, r8
 8007f36:	464b      	mov	r3, r9
 8007f38:	4640      	mov	r0, r8
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	f7f8 fdf6 	bl	8000b2c <__aeabi_dcmpun>
 8007f40:	b140      	cbz	r0, 8007f54 <_printf_float+0xf0>
 8007f42:	464b      	mov	r3, r9
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	bfbc      	itt	lt
 8007f48:	232d      	movlt	r3, #45	; 0x2d
 8007f4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f4e:	487f      	ldr	r0, [pc, #508]	; (800814c <_printf_float+0x2e8>)
 8007f50:	4b7f      	ldr	r3, [pc, #508]	; (8008150 <_printf_float+0x2ec>)
 8007f52:	e7d1      	b.n	8007ef8 <_printf_float+0x94>
 8007f54:	6863      	ldr	r3, [r4, #4]
 8007f56:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007f5a:	9206      	str	r2, [sp, #24]
 8007f5c:	1c5a      	adds	r2, r3, #1
 8007f5e:	d13f      	bne.n	8007fe0 <_printf_float+0x17c>
 8007f60:	2306      	movs	r3, #6
 8007f62:	6063      	str	r3, [r4, #4]
 8007f64:	9b05      	ldr	r3, [sp, #20]
 8007f66:	6861      	ldr	r1, [r4, #4]
 8007f68:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	9303      	str	r3, [sp, #12]
 8007f70:	ab0a      	add	r3, sp, #40	; 0x28
 8007f72:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007f76:	ab09      	add	r3, sp, #36	; 0x24
 8007f78:	ec49 8b10 	vmov	d0, r8, r9
 8007f7c:	9300      	str	r3, [sp, #0]
 8007f7e:	6022      	str	r2, [r4, #0]
 8007f80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007f84:	4628      	mov	r0, r5
 8007f86:	f7ff fecd 	bl	8007d24 <__cvt>
 8007f8a:	9b06      	ldr	r3, [sp, #24]
 8007f8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f8e:	2b47      	cmp	r3, #71	; 0x47
 8007f90:	4680      	mov	r8, r0
 8007f92:	d108      	bne.n	8007fa6 <_printf_float+0x142>
 8007f94:	1cc8      	adds	r0, r1, #3
 8007f96:	db02      	blt.n	8007f9e <_printf_float+0x13a>
 8007f98:	6863      	ldr	r3, [r4, #4]
 8007f9a:	4299      	cmp	r1, r3
 8007f9c:	dd41      	ble.n	8008022 <_printf_float+0x1be>
 8007f9e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007fa2:	fa5f fb8b 	uxtb.w	fp, fp
 8007fa6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007faa:	d820      	bhi.n	8007fee <_printf_float+0x18a>
 8007fac:	3901      	subs	r1, #1
 8007fae:	465a      	mov	r2, fp
 8007fb0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007fb4:	9109      	str	r1, [sp, #36]	; 0x24
 8007fb6:	f7ff ff17 	bl	8007de8 <__exponent>
 8007fba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fbc:	1813      	adds	r3, r2, r0
 8007fbe:	2a01      	cmp	r2, #1
 8007fc0:	4681      	mov	r9, r0
 8007fc2:	6123      	str	r3, [r4, #16]
 8007fc4:	dc02      	bgt.n	8007fcc <_printf_float+0x168>
 8007fc6:	6822      	ldr	r2, [r4, #0]
 8007fc8:	07d2      	lsls	r2, r2, #31
 8007fca:	d501      	bpl.n	8007fd0 <_printf_float+0x16c>
 8007fcc:	3301      	adds	r3, #1
 8007fce:	6123      	str	r3, [r4, #16]
 8007fd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d09c      	beq.n	8007f12 <_printf_float+0xae>
 8007fd8:	232d      	movs	r3, #45	; 0x2d
 8007fda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fde:	e798      	b.n	8007f12 <_printf_float+0xae>
 8007fe0:	9a06      	ldr	r2, [sp, #24]
 8007fe2:	2a47      	cmp	r2, #71	; 0x47
 8007fe4:	d1be      	bne.n	8007f64 <_printf_float+0x100>
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1bc      	bne.n	8007f64 <_printf_float+0x100>
 8007fea:	2301      	movs	r3, #1
 8007fec:	e7b9      	b.n	8007f62 <_printf_float+0xfe>
 8007fee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007ff2:	d118      	bne.n	8008026 <_printf_float+0x1c2>
 8007ff4:	2900      	cmp	r1, #0
 8007ff6:	6863      	ldr	r3, [r4, #4]
 8007ff8:	dd0b      	ble.n	8008012 <_printf_float+0x1ae>
 8007ffa:	6121      	str	r1, [r4, #16]
 8007ffc:	b913      	cbnz	r3, 8008004 <_printf_float+0x1a0>
 8007ffe:	6822      	ldr	r2, [r4, #0]
 8008000:	07d0      	lsls	r0, r2, #31
 8008002:	d502      	bpl.n	800800a <_printf_float+0x1a6>
 8008004:	3301      	adds	r3, #1
 8008006:	440b      	add	r3, r1
 8008008:	6123      	str	r3, [r4, #16]
 800800a:	65a1      	str	r1, [r4, #88]	; 0x58
 800800c:	f04f 0900 	mov.w	r9, #0
 8008010:	e7de      	b.n	8007fd0 <_printf_float+0x16c>
 8008012:	b913      	cbnz	r3, 800801a <_printf_float+0x1b6>
 8008014:	6822      	ldr	r2, [r4, #0]
 8008016:	07d2      	lsls	r2, r2, #31
 8008018:	d501      	bpl.n	800801e <_printf_float+0x1ba>
 800801a:	3302      	adds	r3, #2
 800801c:	e7f4      	b.n	8008008 <_printf_float+0x1a4>
 800801e:	2301      	movs	r3, #1
 8008020:	e7f2      	b.n	8008008 <_printf_float+0x1a4>
 8008022:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008028:	4299      	cmp	r1, r3
 800802a:	db05      	blt.n	8008038 <_printf_float+0x1d4>
 800802c:	6823      	ldr	r3, [r4, #0]
 800802e:	6121      	str	r1, [r4, #16]
 8008030:	07d8      	lsls	r0, r3, #31
 8008032:	d5ea      	bpl.n	800800a <_printf_float+0x1a6>
 8008034:	1c4b      	adds	r3, r1, #1
 8008036:	e7e7      	b.n	8008008 <_printf_float+0x1a4>
 8008038:	2900      	cmp	r1, #0
 800803a:	bfd4      	ite	le
 800803c:	f1c1 0202 	rsble	r2, r1, #2
 8008040:	2201      	movgt	r2, #1
 8008042:	4413      	add	r3, r2
 8008044:	e7e0      	b.n	8008008 <_printf_float+0x1a4>
 8008046:	6823      	ldr	r3, [r4, #0]
 8008048:	055a      	lsls	r2, r3, #21
 800804a:	d407      	bmi.n	800805c <_printf_float+0x1f8>
 800804c:	6923      	ldr	r3, [r4, #16]
 800804e:	4642      	mov	r2, r8
 8008050:	4631      	mov	r1, r6
 8008052:	4628      	mov	r0, r5
 8008054:	47b8      	blx	r7
 8008056:	3001      	adds	r0, #1
 8008058:	d12c      	bne.n	80080b4 <_printf_float+0x250>
 800805a:	e764      	b.n	8007f26 <_printf_float+0xc2>
 800805c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008060:	f240 80e0 	bls.w	8008224 <_printf_float+0x3c0>
 8008064:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008068:	2200      	movs	r2, #0
 800806a:	2300      	movs	r3, #0
 800806c:	f7f8 fd2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008070:	2800      	cmp	r0, #0
 8008072:	d034      	beq.n	80080de <_printf_float+0x27a>
 8008074:	4a37      	ldr	r2, [pc, #220]	; (8008154 <_printf_float+0x2f0>)
 8008076:	2301      	movs	r3, #1
 8008078:	4631      	mov	r1, r6
 800807a:	4628      	mov	r0, r5
 800807c:	47b8      	blx	r7
 800807e:	3001      	adds	r0, #1
 8008080:	f43f af51 	beq.w	8007f26 <_printf_float+0xc2>
 8008084:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008088:	429a      	cmp	r2, r3
 800808a:	db02      	blt.n	8008092 <_printf_float+0x22e>
 800808c:	6823      	ldr	r3, [r4, #0]
 800808e:	07d8      	lsls	r0, r3, #31
 8008090:	d510      	bpl.n	80080b4 <_printf_float+0x250>
 8008092:	ee18 3a10 	vmov	r3, s16
 8008096:	4652      	mov	r2, sl
 8008098:	4631      	mov	r1, r6
 800809a:	4628      	mov	r0, r5
 800809c:	47b8      	blx	r7
 800809e:	3001      	adds	r0, #1
 80080a0:	f43f af41 	beq.w	8007f26 <_printf_float+0xc2>
 80080a4:	f04f 0800 	mov.w	r8, #0
 80080a8:	f104 091a 	add.w	r9, r4, #26
 80080ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ae:	3b01      	subs	r3, #1
 80080b0:	4543      	cmp	r3, r8
 80080b2:	dc09      	bgt.n	80080c8 <_printf_float+0x264>
 80080b4:	6823      	ldr	r3, [r4, #0]
 80080b6:	079b      	lsls	r3, r3, #30
 80080b8:	f100 8105 	bmi.w	80082c6 <_printf_float+0x462>
 80080bc:	68e0      	ldr	r0, [r4, #12]
 80080be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080c0:	4298      	cmp	r0, r3
 80080c2:	bfb8      	it	lt
 80080c4:	4618      	movlt	r0, r3
 80080c6:	e730      	b.n	8007f2a <_printf_float+0xc6>
 80080c8:	2301      	movs	r3, #1
 80080ca:	464a      	mov	r2, r9
 80080cc:	4631      	mov	r1, r6
 80080ce:	4628      	mov	r0, r5
 80080d0:	47b8      	blx	r7
 80080d2:	3001      	adds	r0, #1
 80080d4:	f43f af27 	beq.w	8007f26 <_printf_float+0xc2>
 80080d8:	f108 0801 	add.w	r8, r8, #1
 80080dc:	e7e6      	b.n	80080ac <_printf_float+0x248>
 80080de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	dc39      	bgt.n	8008158 <_printf_float+0x2f4>
 80080e4:	4a1b      	ldr	r2, [pc, #108]	; (8008154 <_printf_float+0x2f0>)
 80080e6:	2301      	movs	r3, #1
 80080e8:	4631      	mov	r1, r6
 80080ea:	4628      	mov	r0, r5
 80080ec:	47b8      	blx	r7
 80080ee:	3001      	adds	r0, #1
 80080f0:	f43f af19 	beq.w	8007f26 <_printf_float+0xc2>
 80080f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080f8:	4313      	orrs	r3, r2
 80080fa:	d102      	bne.n	8008102 <_printf_float+0x29e>
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	07d9      	lsls	r1, r3, #31
 8008100:	d5d8      	bpl.n	80080b4 <_printf_float+0x250>
 8008102:	ee18 3a10 	vmov	r3, s16
 8008106:	4652      	mov	r2, sl
 8008108:	4631      	mov	r1, r6
 800810a:	4628      	mov	r0, r5
 800810c:	47b8      	blx	r7
 800810e:	3001      	adds	r0, #1
 8008110:	f43f af09 	beq.w	8007f26 <_printf_float+0xc2>
 8008114:	f04f 0900 	mov.w	r9, #0
 8008118:	f104 0a1a 	add.w	sl, r4, #26
 800811c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800811e:	425b      	negs	r3, r3
 8008120:	454b      	cmp	r3, r9
 8008122:	dc01      	bgt.n	8008128 <_printf_float+0x2c4>
 8008124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008126:	e792      	b.n	800804e <_printf_float+0x1ea>
 8008128:	2301      	movs	r3, #1
 800812a:	4652      	mov	r2, sl
 800812c:	4631      	mov	r1, r6
 800812e:	4628      	mov	r0, r5
 8008130:	47b8      	blx	r7
 8008132:	3001      	adds	r0, #1
 8008134:	f43f aef7 	beq.w	8007f26 <_printf_float+0xc2>
 8008138:	f109 0901 	add.w	r9, r9, #1
 800813c:	e7ee      	b.n	800811c <_printf_float+0x2b8>
 800813e:	bf00      	nop
 8008140:	7fefffff 	.word	0x7fefffff
 8008144:	0800a7c0 	.word	0x0800a7c0
 8008148:	0800a7c4 	.word	0x0800a7c4
 800814c:	0800a7cc 	.word	0x0800a7cc
 8008150:	0800a7c8 	.word	0x0800a7c8
 8008154:	0800a7d0 	.word	0x0800a7d0
 8008158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800815a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800815c:	429a      	cmp	r2, r3
 800815e:	bfa8      	it	ge
 8008160:	461a      	movge	r2, r3
 8008162:	2a00      	cmp	r2, #0
 8008164:	4691      	mov	r9, r2
 8008166:	dc37      	bgt.n	80081d8 <_printf_float+0x374>
 8008168:	f04f 0b00 	mov.w	fp, #0
 800816c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008170:	f104 021a 	add.w	r2, r4, #26
 8008174:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008176:	9305      	str	r3, [sp, #20]
 8008178:	eba3 0309 	sub.w	r3, r3, r9
 800817c:	455b      	cmp	r3, fp
 800817e:	dc33      	bgt.n	80081e8 <_printf_float+0x384>
 8008180:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008184:	429a      	cmp	r2, r3
 8008186:	db3b      	blt.n	8008200 <_printf_float+0x39c>
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	07da      	lsls	r2, r3, #31
 800818c:	d438      	bmi.n	8008200 <_printf_float+0x39c>
 800818e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008190:	9a05      	ldr	r2, [sp, #20]
 8008192:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008194:	1a9a      	subs	r2, r3, r2
 8008196:	eba3 0901 	sub.w	r9, r3, r1
 800819a:	4591      	cmp	r9, r2
 800819c:	bfa8      	it	ge
 800819e:	4691      	movge	r9, r2
 80081a0:	f1b9 0f00 	cmp.w	r9, #0
 80081a4:	dc35      	bgt.n	8008212 <_printf_float+0x3ae>
 80081a6:	f04f 0800 	mov.w	r8, #0
 80081aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081ae:	f104 0a1a 	add.w	sl, r4, #26
 80081b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081b6:	1a9b      	subs	r3, r3, r2
 80081b8:	eba3 0309 	sub.w	r3, r3, r9
 80081bc:	4543      	cmp	r3, r8
 80081be:	f77f af79 	ble.w	80080b4 <_printf_float+0x250>
 80081c2:	2301      	movs	r3, #1
 80081c4:	4652      	mov	r2, sl
 80081c6:	4631      	mov	r1, r6
 80081c8:	4628      	mov	r0, r5
 80081ca:	47b8      	blx	r7
 80081cc:	3001      	adds	r0, #1
 80081ce:	f43f aeaa 	beq.w	8007f26 <_printf_float+0xc2>
 80081d2:	f108 0801 	add.w	r8, r8, #1
 80081d6:	e7ec      	b.n	80081b2 <_printf_float+0x34e>
 80081d8:	4613      	mov	r3, r2
 80081da:	4631      	mov	r1, r6
 80081dc:	4642      	mov	r2, r8
 80081de:	4628      	mov	r0, r5
 80081e0:	47b8      	blx	r7
 80081e2:	3001      	adds	r0, #1
 80081e4:	d1c0      	bne.n	8008168 <_printf_float+0x304>
 80081e6:	e69e      	b.n	8007f26 <_printf_float+0xc2>
 80081e8:	2301      	movs	r3, #1
 80081ea:	4631      	mov	r1, r6
 80081ec:	4628      	mov	r0, r5
 80081ee:	9205      	str	r2, [sp, #20]
 80081f0:	47b8      	blx	r7
 80081f2:	3001      	adds	r0, #1
 80081f4:	f43f ae97 	beq.w	8007f26 <_printf_float+0xc2>
 80081f8:	9a05      	ldr	r2, [sp, #20]
 80081fa:	f10b 0b01 	add.w	fp, fp, #1
 80081fe:	e7b9      	b.n	8008174 <_printf_float+0x310>
 8008200:	ee18 3a10 	vmov	r3, s16
 8008204:	4652      	mov	r2, sl
 8008206:	4631      	mov	r1, r6
 8008208:	4628      	mov	r0, r5
 800820a:	47b8      	blx	r7
 800820c:	3001      	adds	r0, #1
 800820e:	d1be      	bne.n	800818e <_printf_float+0x32a>
 8008210:	e689      	b.n	8007f26 <_printf_float+0xc2>
 8008212:	9a05      	ldr	r2, [sp, #20]
 8008214:	464b      	mov	r3, r9
 8008216:	4442      	add	r2, r8
 8008218:	4631      	mov	r1, r6
 800821a:	4628      	mov	r0, r5
 800821c:	47b8      	blx	r7
 800821e:	3001      	adds	r0, #1
 8008220:	d1c1      	bne.n	80081a6 <_printf_float+0x342>
 8008222:	e680      	b.n	8007f26 <_printf_float+0xc2>
 8008224:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008226:	2a01      	cmp	r2, #1
 8008228:	dc01      	bgt.n	800822e <_printf_float+0x3ca>
 800822a:	07db      	lsls	r3, r3, #31
 800822c:	d538      	bpl.n	80082a0 <_printf_float+0x43c>
 800822e:	2301      	movs	r3, #1
 8008230:	4642      	mov	r2, r8
 8008232:	4631      	mov	r1, r6
 8008234:	4628      	mov	r0, r5
 8008236:	47b8      	blx	r7
 8008238:	3001      	adds	r0, #1
 800823a:	f43f ae74 	beq.w	8007f26 <_printf_float+0xc2>
 800823e:	ee18 3a10 	vmov	r3, s16
 8008242:	4652      	mov	r2, sl
 8008244:	4631      	mov	r1, r6
 8008246:	4628      	mov	r0, r5
 8008248:	47b8      	blx	r7
 800824a:	3001      	adds	r0, #1
 800824c:	f43f ae6b 	beq.w	8007f26 <_printf_float+0xc2>
 8008250:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008254:	2200      	movs	r2, #0
 8008256:	2300      	movs	r3, #0
 8008258:	f7f8 fc36 	bl	8000ac8 <__aeabi_dcmpeq>
 800825c:	b9d8      	cbnz	r0, 8008296 <_printf_float+0x432>
 800825e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008260:	f108 0201 	add.w	r2, r8, #1
 8008264:	3b01      	subs	r3, #1
 8008266:	4631      	mov	r1, r6
 8008268:	4628      	mov	r0, r5
 800826a:	47b8      	blx	r7
 800826c:	3001      	adds	r0, #1
 800826e:	d10e      	bne.n	800828e <_printf_float+0x42a>
 8008270:	e659      	b.n	8007f26 <_printf_float+0xc2>
 8008272:	2301      	movs	r3, #1
 8008274:	4652      	mov	r2, sl
 8008276:	4631      	mov	r1, r6
 8008278:	4628      	mov	r0, r5
 800827a:	47b8      	blx	r7
 800827c:	3001      	adds	r0, #1
 800827e:	f43f ae52 	beq.w	8007f26 <_printf_float+0xc2>
 8008282:	f108 0801 	add.w	r8, r8, #1
 8008286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008288:	3b01      	subs	r3, #1
 800828a:	4543      	cmp	r3, r8
 800828c:	dcf1      	bgt.n	8008272 <_printf_float+0x40e>
 800828e:	464b      	mov	r3, r9
 8008290:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008294:	e6dc      	b.n	8008050 <_printf_float+0x1ec>
 8008296:	f04f 0800 	mov.w	r8, #0
 800829a:	f104 0a1a 	add.w	sl, r4, #26
 800829e:	e7f2      	b.n	8008286 <_printf_float+0x422>
 80082a0:	2301      	movs	r3, #1
 80082a2:	4642      	mov	r2, r8
 80082a4:	e7df      	b.n	8008266 <_printf_float+0x402>
 80082a6:	2301      	movs	r3, #1
 80082a8:	464a      	mov	r2, r9
 80082aa:	4631      	mov	r1, r6
 80082ac:	4628      	mov	r0, r5
 80082ae:	47b8      	blx	r7
 80082b0:	3001      	adds	r0, #1
 80082b2:	f43f ae38 	beq.w	8007f26 <_printf_float+0xc2>
 80082b6:	f108 0801 	add.w	r8, r8, #1
 80082ba:	68e3      	ldr	r3, [r4, #12]
 80082bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082be:	1a5b      	subs	r3, r3, r1
 80082c0:	4543      	cmp	r3, r8
 80082c2:	dcf0      	bgt.n	80082a6 <_printf_float+0x442>
 80082c4:	e6fa      	b.n	80080bc <_printf_float+0x258>
 80082c6:	f04f 0800 	mov.w	r8, #0
 80082ca:	f104 0919 	add.w	r9, r4, #25
 80082ce:	e7f4      	b.n	80082ba <_printf_float+0x456>

080082d0 <_printf_common>:
 80082d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082d4:	4616      	mov	r6, r2
 80082d6:	4699      	mov	r9, r3
 80082d8:	688a      	ldr	r2, [r1, #8]
 80082da:	690b      	ldr	r3, [r1, #16]
 80082dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082e0:	4293      	cmp	r3, r2
 80082e2:	bfb8      	it	lt
 80082e4:	4613      	movlt	r3, r2
 80082e6:	6033      	str	r3, [r6, #0]
 80082e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082ec:	4607      	mov	r7, r0
 80082ee:	460c      	mov	r4, r1
 80082f0:	b10a      	cbz	r2, 80082f6 <_printf_common+0x26>
 80082f2:	3301      	adds	r3, #1
 80082f4:	6033      	str	r3, [r6, #0]
 80082f6:	6823      	ldr	r3, [r4, #0]
 80082f8:	0699      	lsls	r1, r3, #26
 80082fa:	bf42      	ittt	mi
 80082fc:	6833      	ldrmi	r3, [r6, #0]
 80082fe:	3302      	addmi	r3, #2
 8008300:	6033      	strmi	r3, [r6, #0]
 8008302:	6825      	ldr	r5, [r4, #0]
 8008304:	f015 0506 	ands.w	r5, r5, #6
 8008308:	d106      	bne.n	8008318 <_printf_common+0x48>
 800830a:	f104 0a19 	add.w	sl, r4, #25
 800830e:	68e3      	ldr	r3, [r4, #12]
 8008310:	6832      	ldr	r2, [r6, #0]
 8008312:	1a9b      	subs	r3, r3, r2
 8008314:	42ab      	cmp	r3, r5
 8008316:	dc26      	bgt.n	8008366 <_printf_common+0x96>
 8008318:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800831c:	1e13      	subs	r3, r2, #0
 800831e:	6822      	ldr	r2, [r4, #0]
 8008320:	bf18      	it	ne
 8008322:	2301      	movne	r3, #1
 8008324:	0692      	lsls	r2, r2, #26
 8008326:	d42b      	bmi.n	8008380 <_printf_common+0xb0>
 8008328:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800832c:	4649      	mov	r1, r9
 800832e:	4638      	mov	r0, r7
 8008330:	47c0      	blx	r8
 8008332:	3001      	adds	r0, #1
 8008334:	d01e      	beq.n	8008374 <_printf_common+0xa4>
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	68e5      	ldr	r5, [r4, #12]
 800833a:	6832      	ldr	r2, [r6, #0]
 800833c:	f003 0306 	and.w	r3, r3, #6
 8008340:	2b04      	cmp	r3, #4
 8008342:	bf08      	it	eq
 8008344:	1aad      	subeq	r5, r5, r2
 8008346:	68a3      	ldr	r3, [r4, #8]
 8008348:	6922      	ldr	r2, [r4, #16]
 800834a:	bf0c      	ite	eq
 800834c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008350:	2500      	movne	r5, #0
 8008352:	4293      	cmp	r3, r2
 8008354:	bfc4      	itt	gt
 8008356:	1a9b      	subgt	r3, r3, r2
 8008358:	18ed      	addgt	r5, r5, r3
 800835a:	2600      	movs	r6, #0
 800835c:	341a      	adds	r4, #26
 800835e:	42b5      	cmp	r5, r6
 8008360:	d11a      	bne.n	8008398 <_printf_common+0xc8>
 8008362:	2000      	movs	r0, #0
 8008364:	e008      	b.n	8008378 <_printf_common+0xa8>
 8008366:	2301      	movs	r3, #1
 8008368:	4652      	mov	r2, sl
 800836a:	4649      	mov	r1, r9
 800836c:	4638      	mov	r0, r7
 800836e:	47c0      	blx	r8
 8008370:	3001      	adds	r0, #1
 8008372:	d103      	bne.n	800837c <_printf_common+0xac>
 8008374:	f04f 30ff 	mov.w	r0, #4294967295
 8008378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800837c:	3501      	adds	r5, #1
 800837e:	e7c6      	b.n	800830e <_printf_common+0x3e>
 8008380:	18e1      	adds	r1, r4, r3
 8008382:	1c5a      	adds	r2, r3, #1
 8008384:	2030      	movs	r0, #48	; 0x30
 8008386:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800838a:	4422      	add	r2, r4
 800838c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008390:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008394:	3302      	adds	r3, #2
 8008396:	e7c7      	b.n	8008328 <_printf_common+0x58>
 8008398:	2301      	movs	r3, #1
 800839a:	4622      	mov	r2, r4
 800839c:	4649      	mov	r1, r9
 800839e:	4638      	mov	r0, r7
 80083a0:	47c0      	blx	r8
 80083a2:	3001      	adds	r0, #1
 80083a4:	d0e6      	beq.n	8008374 <_printf_common+0xa4>
 80083a6:	3601      	adds	r6, #1
 80083a8:	e7d9      	b.n	800835e <_printf_common+0x8e>
	...

080083ac <_printf_i>:
 80083ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083b0:	7e0f      	ldrb	r7, [r1, #24]
 80083b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80083b4:	2f78      	cmp	r7, #120	; 0x78
 80083b6:	4691      	mov	r9, r2
 80083b8:	4680      	mov	r8, r0
 80083ba:	460c      	mov	r4, r1
 80083bc:	469a      	mov	sl, r3
 80083be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80083c2:	d807      	bhi.n	80083d4 <_printf_i+0x28>
 80083c4:	2f62      	cmp	r7, #98	; 0x62
 80083c6:	d80a      	bhi.n	80083de <_printf_i+0x32>
 80083c8:	2f00      	cmp	r7, #0
 80083ca:	f000 80d8 	beq.w	800857e <_printf_i+0x1d2>
 80083ce:	2f58      	cmp	r7, #88	; 0x58
 80083d0:	f000 80a3 	beq.w	800851a <_printf_i+0x16e>
 80083d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083dc:	e03a      	b.n	8008454 <_printf_i+0xa8>
 80083de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083e2:	2b15      	cmp	r3, #21
 80083e4:	d8f6      	bhi.n	80083d4 <_printf_i+0x28>
 80083e6:	a101      	add	r1, pc, #4	; (adr r1, 80083ec <_printf_i+0x40>)
 80083e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083ec:	08008445 	.word	0x08008445
 80083f0:	08008459 	.word	0x08008459
 80083f4:	080083d5 	.word	0x080083d5
 80083f8:	080083d5 	.word	0x080083d5
 80083fc:	080083d5 	.word	0x080083d5
 8008400:	080083d5 	.word	0x080083d5
 8008404:	08008459 	.word	0x08008459
 8008408:	080083d5 	.word	0x080083d5
 800840c:	080083d5 	.word	0x080083d5
 8008410:	080083d5 	.word	0x080083d5
 8008414:	080083d5 	.word	0x080083d5
 8008418:	08008565 	.word	0x08008565
 800841c:	08008489 	.word	0x08008489
 8008420:	08008547 	.word	0x08008547
 8008424:	080083d5 	.word	0x080083d5
 8008428:	080083d5 	.word	0x080083d5
 800842c:	08008587 	.word	0x08008587
 8008430:	080083d5 	.word	0x080083d5
 8008434:	08008489 	.word	0x08008489
 8008438:	080083d5 	.word	0x080083d5
 800843c:	080083d5 	.word	0x080083d5
 8008440:	0800854f 	.word	0x0800854f
 8008444:	682b      	ldr	r3, [r5, #0]
 8008446:	1d1a      	adds	r2, r3, #4
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	602a      	str	r2, [r5, #0]
 800844c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008450:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008454:	2301      	movs	r3, #1
 8008456:	e0a3      	b.n	80085a0 <_printf_i+0x1f4>
 8008458:	6820      	ldr	r0, [r4, #0]
 800845a:	6829      	ldr	r1, [r5, #0]
 800845c:	0606      	lsls	r6, r0, #24
 800845e:	f101 0304 	add.w	r3, r1, #4
 8008462:	d50a      	bpl.n	800847a <_printf_i+0xce>
 8008464:	680e      	ldr	r6, [r1, #0]
 8008466:	602b      	str	r3, [r5, #0]
 8008468:	2e00      	cmp	r6, #0
 800846a:	da03      	bge.n	8008474 <_printf_i+0xc8>
 800846c:	232d      	movs	r3, #45	; 0x2d
 800846e:	4276      	negs	r6, r6
 8008470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008474:	485e      	ldr	r0, [pc, #376]	; (80085f0 <_printf_i+0x244>)
 8008476:	230a      	movs	r3, #10
 8008478:	e019      	b.n	80084ae <_printf_i+0x102>
 800847a:	680e      	ldr	r6, [r1, #0]
 800847c:	602b      	str	r3, [r5, #0]
 800847e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008482:	bf18      	it	ne
 8008484:	b236      	sxthne	r6, r6
 8008486:	e7ef      	b.n	8008468 <_printf_i+0xbc>
 8008488:	682b      	ldr	r3, [r5, #0]
 800848a:	6820      	ldr	r0, [r4, #0]
 800848c:	1d19      	adds	r1, r3, #4
 800848e:	6029      	str	r1, [r5, #0]
 8008490:	0601      	lsls	r1, r0, #24
 8008492:	d501      	bpl.n	8008498 <_printf_i+0xec>
 8008494:	681e      	ldr	r6, [r3, #0]
 8008496:	e002      	b.n	800849e <_printf_i+0xf2>
 8008498:	0646      	lsls	r6, r0, #25
 800849a:	d5fb      	bpl.n	8008494 <_printf_i+0xe8>
 800849c:	881e      	ldrh	r6, [r3, #0]
 800849e:	4854      	ldr	r0, [pc, #336]	; (80085f0 <_printf_i+0x244>)
 80084a0:	2f6f      	cmp	r7, #111	; 0x6f
 80084a2:	bf0c      	ite	eq
 80084a4:	2308      	moveq	r3, #8
 80084a6:	230a      	movne	r3, #10
 80084a8:	2100      	movs	r1, #0
 80084aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084ae:	6865      	ldr	r5, [r4, #4]
 80084b0:	60a5      	str	r5, [r4, #8]
 80084b2:	2d00      	cmp	r5, #0
 80084b4:	bfa2      	ittt	ge
 80084b6:	6821      	ldrge	r1, [r4, #0]
 80084b8:	f021 0104 	bicge.w	r1, r1, #4
 80084bc:	6021      	strge	r1, [r4, #0]
 80084be:	b90e      	cbnz	r6, 80084c4 <_printf_i+0x118>
 80084c0:	2d00      	cmp	r5, #0
 80084c2:	d04d      	beq.n	8008560 <_printf_i+0x1b4>
 80084c4:	4615      	mov	r5, r2
 80084c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80084ca:	fb03 6711 	mls	r7, r3, r1, r6
 80084ce:	5dc7      	ldrb	r7, [r0, r7]
 80084d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80084d4:	4637      	mov	r7, r6
 80084d6:	42bb      	cmp	r3, r7
 80084d8:	460e      	mov	r6, r1
 80084da:	d9f4      	bls.n	80084c6 <_printf_i+0x11a>
 80084dc:	2b08      	cmp	r3, #8
 80084de:	d10b      	bne.n	80084f8 <_printf_i+0x14c>
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	07de      	lsls	r6, r3, #31
 80084e4:	d508      	bpl.n	80084f8 <_printf_i+0x14c>
 80084e6:	6923      	ldr	r3, [r4, #16]
 80084e8:	6861      	ldr	r1, [r4, #4]
 80084ea:	4299      	cmp	r1, r3
 80084ec:	bfde      	ittt	le
 80084ee:	2330      	movle	r3, #48	; 0x30
 80084f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80084f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80084f8:	1b52      	subs	r2, r2, r5
 80084fa:	6122      	str	r2, [r4, #16]
 80084fc:	f8cd a000 	str.w	sl, [sp]
 8008500:	464b      	mov	r3, r9
 8008502:	aa03      	add	r2, sp, #12
 8008504:	4621      	mov	r1, r4
 8008506:	4640      	mov	r0, r8
 8008508:	f7ff fee2 	bl	80082d0 <_printf_common>
 800850c:	3001      	adds	r0, #1
 800850e:	d14c      	bne.n	80085aa <_printf_i+0x1fe>
 8008510:	f04f 30ff 	mov.w	r0, #4294967295
 8008514:	b004      	add	sp, #16
 8008516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800851a:	4835      	ldr	r0, [pc, #212]	; (80085f0 <_printf_i+0x244>)
 800851c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008520:	6829      	ldr	r1, [r5, #0]
 8008522:	6823      	ldr	r3, [r4, #0]
 8008524:	f851 6b04 	ldr.w	r6, [r1], #4
 8008528:	6029      	str	r1, [r5, #0]
 800852a:	061d      	lsls	r5, r3, #24
 800852c:	d514      	bpl.n	8008558 <_printf_i+0x1ac>
 800852e:	07df      	lsls	r7, r3, #31
 8008530:	bf44      	itt	mi
 8008532:	f043 0320 	orrmi.w	r3, r3, #32
 8008536:	6023      	strmi	r3, [r4, #0]
 8008538:	b91e      	cbnz	r6, 8008542 <_printf_i+0x196>
 800853a:	6823      	ldr	r3, [r4, #0]
 800853c:	f023 0320 	bic.w	r3, r3, #32
 8008540:	6023      	str	r3, [r4, #0]
 8008542:	2310      	movs	r3, #16
 8008544:	e7b0      	b.n	80084a8 <_printf_i+0xfc>
 8008546:	6823      	ldr	r3, [r4, #0]
 8008548:	f043 0320 	orr.w	r3, r3, #32
 800854c:	6023      	str	r3, [r4, #0]
 800854e:	2378      	movs	r3, #120	; 0x78
 8008550:	4828      	ldr	r0, [pc, #160]	; (80085f4 <_printf_i+0x248>)
 8008552:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008556:	e7e3      	b.n	8008520 <_printf_i+0x174>
 8008558:	0659      	lsls	r1, r3, #25
 800855a:	bf48      	it	mi
 800855c:	b2b6      	uxthmi	r6, r6
 800855e:	e7e6      	b.n	800852e <_printf_i+0x182>
 8008560:	4615      	mov	r5, r2
 8008562:	e7bb      	b.n	80084dc <_printf_i+0x130>
 8008564:	682b      	ldr	r3, [r5, #0]
 8008566:	6826      	ldr	r6, [r4, #0]
 8008568:	6961      	ldr	r1, [r4, #20]
 800856a:	1d18      	adds	r0, r3, #4
 800856c:	6028      	str	r0, [r5, #0]
 800856e:	0635      	lsls	r5, r6, #24
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	d501      	bpl.n	8008578 <_printf_i+0x1cc>
 8008574:	6019      	str	r1, [r3, #0]
 8008576:	e002      	b.n	800857e <_printf_i+0x1d2>
 8008578:	0670      	lsls	r0, r6, #25
 800857a:	d5fb      	bpl.n	8008574 <_printf_i+0x1c8>
 800857c:	8019      	strh	r1, [r3, #0]
 800857e:	2300      	movs	r3, #0
 8008580:	6123      	str	r3, [r4, #16]
 8008582:	4615      	mov	r5, r2
 8008584:	e7ba      	b.n	80084fc <_printf_i+0x150>
 8008586:	682b      	ldr	r3, [r5, #0]
 8008588:	1d1a      	adds	r2, r3, #4
 800858a:	602a      	str	r2, [r5, #0]
 800858c:	681d      	ldr	r5, [r3, #0]
 800858e:	6862      	ldr	r2, [r4, #4]
 8008590:	2100      	movs	r1, #0
 8008592:	4628      	mov	r0, r5
 8008594:	f7f7 fe24 	bl	80001e0 <memchr>
 8008598:	b108      	cbz	r0, 800859e <_printf_i+0x1f2>
 800859a:	1b40      	subs	r0, r0, r5
 800859c:	6060      	str	r0, [r4, #4]
 800859e:	6863      	ldr	r3, [r4, #4]
 80085a0:	6123      	str	r3, [r4, #16]
 80085a2:	2300      	movs	r3, #0
 80085a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085a8:	e7a8      	b.n	80084fc <_printf_i+0x150>
 80085aa:	6923      	ldr	r3, [r4, #16]
 80085ac:	462a      	mov	r2, r5
 80085ae:	4649      	mov	r1, r9
 80085b0:	4640      	mov	r0, r8
 80085b2:	47d0      	blx	sl
 80085b4:	3001      	adds	r0, #1
 80085b6:	d0ab      	beq.n	8008510 <_printf_i+0x164>
 80085b8:	6823      	ldr	r3, [r4, #0]
 80085ba:	079b      	lsls	r3, r3, #30
 80085bc:	d413      	bmi.n	80085e6 <_printf_i+0x23a>
 80085be:	68e0      	ldr	r0, [r4, #12]
 80085c0:	9b03      	ldr	r3, [sp, #12]
 80085c2:	4298      	cmp	r0, r3
 80085c4:	bfb8      	it	lt
 80085c6:	4618      	movlt	r0, r3
 80085c8:	e7a4      	b.n	8008514 <_printf_i+0x168>
 80085ca:	2301      	movs	r3, #1
 80085cc:	4632      	mov	r2, r6
 80085ce:	4649      	mov	r1, r9
 80085d0:	4640      	mov	r0, r8
 80085d2:	47d0      	blx	sl
 80085d4:	3001      	adds	r0, #1
 80085d6:	d09b      	beq.n	8008510 <_printf_i+0x164>
 80085d8:	3501      	adds	r5, #1
 80085da:	68e3      	ldr	r3, [r4, #12]
 80085dc:	9903      	ldr	r1, [sp, #12]
 80085de:	1a5b      	subs	r3, r3, r1
 80085e0:	42ab      	cmp	r3, r5
 80085e2:	dcf2      	bgt.n	80085ca <_printf_i+0x21e>
 80085e4:	e7eb      	b.n	80085be <_printf_i+0x212>
 80085e6:	2500      	movs	r5, #0
 80085e8:	f104 0619 	add.w	r6, r4, #25
 80085ec:	e7f5      	b.n	80085da <_printf_i+0x22e>
 80085ee:	bf00      	nop
 80085f0:	0800a7d2 	.word	0x0800a7d2
 80085f4:	0800a7e3 	.word	0x0800a7e3

080085f8 <quorem>:
 80085f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085fc:	6903      	ldr	r3, [r0, #16]
 80085fe:	690c      	ldr	r4, [r1, #16]
 8008600:	42a3      	cmp	r3, r4
 8008602:	4607      	mov	r7, r0
 8008604:	f2c0 8081 	blt.w	800870a <quorem+0x112>
 8008608:	3c01      	subs	r4, #1
 800860a:	f101 0814 	add.w	r8, r1, #20
 800860e:	f100 0514 	add.w	r5, r0, #20
 8008612:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008616:	9301      	str	r3, [sp, #4]
 8008618:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800861c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008620:	3301      	adds	r3, #1
 8008622:	429a      	cmp	r2, r3
 8008624:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008628:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800862c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008630:	d331      	bcc.n	8008696 <quorem+0x9e>
 8008632:	f04f 0e00 	mov.w	lr, #0
 8008636:	4640      	mov	r0, r8
 8008638:	46ac      	mov	ip, r5
 800863a:	46f2      	mov	sl, lr
 800863c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008640:	b293      	uxth	r3, r2
 8008642:	fb06 e303 	mla	r3, r6, r3, lr
 8008646:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800864a:	b29b      	uxth	r3, r3
 800864c:	ebaa 0303 	sub.w	r3, sl, r3
 8008650:	f8dc a000 	ldr.w	sl, [ip]
 8008654:	0c12      	lsrs	r2, r2, #16
 8008656:	fa13 f38a 	uxtah	r3, r3, sl
 800865a:	fb06 e202 	mla	r2, r6, r2, lr
 800865e:	9300      	str	r3, [sp, #0]
 8008660:	9b00      	ldr	r3, [sp, #0]
 8008662:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008666:	b292      	uxth	r2, r2
 8008668:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800866c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008670:	f8bd 3000 	ldrh.w	r3, [sp]
 8008674:	4581      	cmp	r9, r0
 8008676:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800867a:	f84c 3b04 	str.w	r3, [ip], #4
 800867e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008682:	d2db      	bcs.n	800863c <quorem+0x44>
 8008684:	f855 300b 	ldr.w	r3, [r5, fp]
 8008688:	b92b      	cbnz	r3, 8008696 <quorem+0x9e>
 800868a:	9b01      	ldr	r3, [sp, #4]
 800868c:	3b04      	subs	r3, #4
 800868e:	429d      	cmp	r5, r3
 8008690:	461a      	mov	r2, r3
 8008692:	d32e      	bcc.n	80086f2 <quorem+0xfa>
 8008694:	613c      	str	r4, [r7, #16]
 8008696:	4638      	mov	r0, r7
 8008698:	f001 f8c4 	bl	8009824 <__mcmp>
 800869c:	2800      	cmp	r0, #0
 800869e:	db24      	blt.n	80086ea <quorem+0xf2>
 80086a0:	3601      	adds	r6, #1
 80086a2:	4628      	mov	r0, r5
 80086a4:	f04f 0c00 	mov.w	ip, #0
 80086a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80086ac:	f8d0 e000 	ldr.w	lr, [r0]
 80086b0:	b293      	uxth	r3, r2
 80086b2:	ebac 0303 	sub.w	r3, ip, r3
 80086b6:	0c12      	lsrs	r2, r2, #16
 80086b8:	fa13 f38e 	uxtah	r3, r3, lr
 80086bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80086c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086ca:	45c1      	cmp	r9, r8
 80086cc:	f840 3b04 	str.w	r3, [r0], #4
 80086d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80086d4:	d2e8      	bcs.n	80086a8 <quorem+0xb0>
 80086d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80086da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086de:	b922      	cbnz	r2, 80086ea <quorem+0xf2>
 80086e0:	3b04      	subs	r3, #4
 80086e2:	429d      	cmp	r5, r3
 80086e4:	461a      	mov	r2, r3
 80086e6:	d30a      	bcc.n	80086fe <quorem+0x106>
 80086e8:	613c      	str	r4, [r7, #16]
 80086ea:	4630      	mov	r0, r6
 80086ec:	b003      	add	sp, #12
 80086ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f2:	6812      	ldr	r2, [r2, #0]
 80086f4:	3b04      	subs	r3, #4
 80086f6:	2a00      	cmp	r2, #0
 80086f8:	d1cc      	bne.n	8008694 <quorem+0x9c>
 80086fa:	3c01      	subs	r4, #1
 80086fc:	e7c7      	b.n	800868e <quorem+0x96>
 80086fe:	6812      	ldr	r2, [r2, #0]
 8008700:	3b04      	subs	r3, #4
 8008702:	2a00      	cmp	r2, #0
 8008704:	d1f0      	bne.n	80086e8 <quorem+0xf0>
 8008706:	3c01      	subs	r4, #1
 8008708:	e7eb      	b.n	80086e2 <quorem+0xea>
 800870a:	2000      	movs	r0, #0
 800870c:	e7ee      	b.n	80086ec <quorem+0xf4>
	...

08008710 <_dtoa_r>:
 8008710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008714:	ed2d 8b04 	vpush	{d8-d9}
 8008718:	ec57 6b10 	vmov	r6, r7, d0
 800871c:	b093      	sub	sp, #76	; 0x4c
 800871e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008720:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008724:	9106      	str	r1, [sp, #24]
 8008726:	ee10 aa10 	vmov	sl, s0
 800872a:	4604      	mov	r4, r0
 800872c:	9209      	str	r2, [sp, #36]	; 0x24
 800872e:	930c      	str	r3, [sp, #48]	; 0x30
 8008730:	46bb      	mov	fp, r7
 8008732:	b975      	cbnz	r5, 8008752 <_dtoa_r+0x42>
 8008734:	2010      	movs	r0, #16
 8008736:	f000 fddd 	bl	80092f4 <malloc>
 800873a:	4602      	mov	r2, r0
 800873c:	6260      	str	r0, [r4, #36]	; 0x24
 800873e:	b920      	cbnz	r0, 800874a <_dtoa_r+0x3a>
 8008740:	4ba7      	ldr	r3, [pc, #668]	; (80089e0 <_dtoa_r+0x2d0>)
 8008742:	21ea      	movs	r1, #234	; 0xea
 8008744:	48a7      	ldr	r0, [pc, #668]	; (80089e4 <_dtoa_r+0x2d4>)
 8008746:	f001 fa75 	bl	8009c34 <__assert_func>
 800874a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800874e:	6005      	str	r5, [r0, #0]
 8008750:	60c5      	str	r5, [r0, #12]
 8008752:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008754:	6819      	ldr	r1, [r3, #0]
 8008756:	b151      	cbz	r1, 800876e <_dtoa_r+0x5e>
 8008758:	685a      	ldr	r2, [r3, #4]
 800875a:	604a      	str	r2, [r1, #4]
 800875c:	2301      	movs	r3, #1
 800875e:	4093      	lsls	r3, r2
 8008760:	608b      	str	r3, [r1, #8]
 8008762:	4620      	mov	r0, r4
 8008764:	f000 fe1c 	bl	80093a0 <_Bfree>
 8008768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800876a:	2200      	movs	r2, #0
 800876c:	601a      	str	r2, [r3, #0]
 800876e:	1e3b      	subs	r3, r7, #0
 8008770:	bfaa      	itet	ge
 8008772:	2300      	movge	r3, #0
 8008774:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008778:	f8c8 3000 	strge.w	r3, [r8]
 800877c:	4b9a      	ldr	r3, [pc, #616]	; (80089e8 <_dtoa_r+0x2d8>)
 800877e:	bfbc      	itt	lt
 8008780:	2201      	movlt	r2, #1
 8008782:	f8c8 2000 	strlt.w	r2, [r8]
 8008786:	ea33 030b 	bics.w	r3, r3, fp
 800878a:	d11b      	bne.n	80087c4 <_dtoa_r+0xb4>
 800878c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800878e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008792:	6013      	str	r3, [r2, #0]
 8008794:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008798:	4333      	orrs	r3, r6
 800879a:	f000 8592 	beq.w	80092c2 <_dtoa_r+0xbb2>
 800879e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087a0:	b963      	cbnz	r3, 80087bc <_dtoa_r+0xac>
 80087a2:	4b92      	ldr	r3, [pc, #584]	; (80089ec <_dtoa_r+0x2dc>)
 80087a4:	e022      	b.n	80087ec <_dtoa_r+0xdc>
 80087a6:	4b92      	ldr	r3, [pc, #584]	; (80089f0 <_dtoa_r+0x2e0>)
 80087a8:	9301      	str	r3, [sp, #4]
 80087aa:	3308      	adds	r3, #8
 80087ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80087ae:	6013      	str	r3, [r2, #0]
 80087b0:	9801      	ldr	r0, [sp, #4]
 80087b2:	b013      	add	sp, #76	; 0x4c
 80087b4:	ecbd 8b04 	vpop	{d8-d9}
 80087b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087bc:	4b8b      	ldr	r3, [pc, #556]	; (80089ec <_dtoa_r+0x2dc>)
 80087be:	9301      	str	r3, [sp, #4]
 80087c0:	3303      	adds	r3, #3
 80087c2:	e7f3      	b.n	80087ac <_dtoa_r+0x9c>
 80087c4:	2200      	movs	r2, #0
 80087c6:	2300      	movs	r3, #0
 80087c8:	4650      	mov	r0, sl
 80087ca:	4659      	mov	r1, fp
 80087cc:	f7f8 f97c 	bl	8000ac8 <__aeabi_dcmpeq>
 80087d0:	ec4b ab19 	vmov	d9, sl, fp
 80087d4:	4680      	mov	r8, r0
 80087d6:	b158      	cbz	r0, 80087f0 <_dtoa_r+0xe0>
 80087d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087da:	2301      	movs	r3, #1
 80087dc:	6013      	str	r3, [r2, #0]
 80087de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f000 856b 	beq.w	80092bc <_dtoa_r+0xbac>
 80087e6:	4883      	ldr	r0, [pc, #524]	; (80089f4 <_dtoa_r+0x2e4>)
 80087e8:	6018      	str	r0, [r3, #0]
 80087ea:	1e43      	subs	r3, r0, #1
 80087ec:	9301      	str	r3, [sp, #4]
 80087ee:	e7df      	b.n	80087b0 <_dtoa_r+0xa0>
 80087f0:	ec4b ab10 	vmov	d0, sl, fp
 80087f4:	aa10      	add	r2, sp, #64	; 0x40
 80087f6:	a911      	add	r1, sp, #68	; 0x44
 80087f8:	4620      	mov	r0, r4
 80087fa:	f001 f8b9 	bl	8009970 <__d2b>
 80087fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008802:	ee08 0a10 	vmov	s16, r0
 8008806:	2d00      	cmp	r5, #0
 8008808:	f000 8084 	beq.w	8008914 <_dtoa_r+0x204>
 800880c:	ee19 3a90 	vmov	r3, s19
 8008810:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008814:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008818:	4656      	mov	r6, sl
 800881a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800881e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008822:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008826:	4b74      	ldr	r3, [pc, #464]	; (80089f8 <_dtoa_r+0x2e8>)
 8008828:	2200      	movs	r2, #0
 800882a:	4630      	mov	r0, r6
 800882c:	4639      	mov	r1, r7
 800882e:	f7f7 fd2b 	bl	8000288 <__aeabi_dsub>
 8008832:	a365      	add	r3, pc, #404	; (adr r3, 80089c8 <_dtoa_r+0x2b8>)
 8008834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008838:	f7f7 fede 	bl	80005f8 <__aeabi_dmul>
 800883c:	a364      	add	r3, pc, #400	; (adr r3, 80089d0 <_dtoa_r+0x2c0>)
 800883e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008842:	f7f7 fd23 	bl	800028c <__adddf3>
 8008846:	4606      	mov	r6, r0
 8008848:	4628      	mov	r0, r5
 800884a:	460f      	mov	r7, r1
 800884c:	f7f7 fe6a 	bl	8000524 <__aeabi_i2d>
 8008850:	a361      	add	r3, pc, #388	; (adr r3, 80089d8 <_dtoa_r+0x2c8>)
 8008852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008856:	f7f7 fecf 	bl	80005f8 <__aeabi_dmul>
 800885a:	4602      	mov	r2, r0
 800885c:	460b      	mov	r3, r1
 800885e:	4630      	mov	r0, r6
 8008860:	4639      	mov	r1, r7
 8008862:	f7f7 fd13 	bl	800028c <__adddf3>
 8008866:	4606      	mov	r6, r0
 8008868:	460f      	mov	r7, r1
 800886a:	f7f8 f975 	bl	8000b58 <__aeabi_d2iz>
 800886e:	2200      	movs	r2, #0
 8008870:	9000      	str	r0, [sp, #0]
 8008872:	2300      	movs	r3, #0
 8008874:	4630      	mov	r0, r6
 8008876:	4639      	mov	r1, r7
 8008878:	f7f8 f930 	bl	8000adc <__aeabi_dcmplt>
 800887c:	b150      	cbz	r0, 8008894 <_dtoa_r+0x184>
 800887e:	9800      	ldr	r0, [sp, #0]
 8008880:	f7f7 fe50 	bl	8000524 <__aeabi_i2d>
 8008884:	4632      	mov	r2, r6
 8008886:	463b      	mov	r3, r7
 8008888:	f7f8 f91e 	bl	8000ac8 <__aeabi_dcmpeq>
 800888c:	b910      	cbnz	r0, 8008894 <_dtoa_r+0x184>
 800888e:	9b00      	ldr	r3, [sp, #0]
 8008890:	3b01      	subs	r3, #1
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	9b00      	ldr	r3, [sp, #0]
 8008896:	2b16      	cmp	r3, #22
 8008898:	d85a      	bhi.n	8008950 <_dtoa_r+0x240>
 800889a:	9a00      	ldr	r2, [sp, #0]
 800889c:	4b57      	ldr	r3, [pc, #348]	; (80089fc <_dtoa_r+0x2ec>)
 800889e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	ec51 0b19 	vmov	r0, r1, d9
 80088aa:	f7f8 f917 	bl	8000adc <__aeabi_dcmplt>
 80088ae:	2800      	cmp	r0, #0
 80088b0:	d050      	beq.n	8008954 <_dtoa_r+0x244>
 80088b2:	9b00      	ldr	r3, [sp, #0]
 80088b4:	3b01      	subs	r3, #1
 80088b6:	9300      	str	r3, [sp, #0]
 80088b8:	2300      	movs	r3, #0
 80088ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80088bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088be:	1b5d      	subs	r5, r3, r5
 80088c0:	1e6b      	subs	r3, r5, #1
 80088c2:	9305      	str	r3, [sp, #20]
 80088c4:	bf45      	ittet	mi
 80088c6:	f1c5 0301 	rsbmi	r3, r5, #1
 80088ca:	9304      	strmi	r3, [sp, #16]
 80088cc:	2300      	movpl	r3, #0
 80088ce:	2300      	movmi	r3, #0
 80088d0:	bf4c      	ite	mi
 80088d2:	9305      	strmi	r3, [sp, #20]
 80088d4:	9304      	strpl	r3, [sp, #16]
 80088d6:	9b00      	ldr	r3, [sp, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	db3d      	blt.n	8008958 <_dtoa_r+0x248>
 80088dc:	9b05      	ldr	r3, [sp, #20]
 80088de:	9a00      	ldr	r2, [sp, #0]
 80088e0:	920a      	str	r2, [sp, #40]	; 0x28
 80088e2:	4413      	add	r3, r2
 80088e4:	9305      	str	r3, [sp, #20]
 80088e6:	2300      	movs	r3, #0
 80088e8:	9307      	str	r3, [sp, #28]
 80088ea:	9b06      	ldr	r3, [sp, #24]
 80088ec:	2b09      	cmp	r3, #9
 80088ee:	f200 8089 	bhi.w	8008a04 <_dtoa_r+0x2f4>
 80088f2:	2b05      	cmp	r3, #5
 80088f4:	bfc4      	itt	gt
 80088f6:	3b04      	subgt	r3, #4
 80088f8:	9306      	strgt	r3, [sp, #24]
 80088fa:	9b06      	ldr	r3, [sp, #24]
 80088fc:	f1a3 0302 	sub.w	r3, r3, #2
 8008900:	bfcc      	ite	gt
 8008902:	2500      	movgt	r5, #0
 8008904:	2501      	movle	r5, #1
 8008906:	2b03      	cmp	r3, #3
 8008908:	f200 8087 	bhi.w	8008a1a <_dtoa_r+0x30a>
 800890c:	e8df f003 	tbb	[pc, r3]
 8008910:	59383a2d 	.word	0x59383a2d
 8008914:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008918:	441d      	add	r5, r3
 800891a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800891e:	2b20      	cmp	r3, #32
 8008920:	bfc1      	itttt	gt
 8008922:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008926:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800892a:	fa0b f303 	lslgt.w	r3, fp, r3
 800892e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008932:	bfda      	itte	le
 8008934:	f1c3 0320 	rsble	r3, r3, #32
 8008938:	fa06 f003 	lslle.w	r0, r6, r3
 800893c:	4318      	orrgt	r0, r3
 800893e:	f7f7 fde1 	bl	8000504 <__aeabi_ui2d>
 8008942:	2301      	movs	r3, #1
 8008944:	4606      	mov	r6, r0
 8008946:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800894a:	3d01      	subs	r5, #1
 800894c:	930e      	str	r3, [sp, #56]	; 0x38
 800894e:	e76a      	b.n	8008826 <_dtoa_r+0x116>
 8008950:	2301      	movs	r3, #1
 8008952:	e7b2      	b.n	80088ba <_dtoa_r+0x1aa>
 8008954:	900b      	str	r0, [sp, #44]	; 0x2c
 8008956:	e7b1      	b.n	80088bc <_dtoa_r+0x1ac>
 8008958:	9b04      	ldr	r3, [sp, #16]
 800895a:	9a00      	ldr	r2, [sp, #0]
 800895c:	1a9b      	subs	r3, r3, r2
 800895e:	9304      	str	r3, [sp, #16]
 8008960:	4253      	negs	r3, r2
 8008962:	9307      	str	r3, [sp, #28]
 8008964:	2300      	movs	r3, #0
 8008966:	930a      	str	r3, [sp, #40]	; 0x28
 8008968:	e7bf      	b.n	80088ea <_dtoa_r+0x1da>
 800896a:	2300      	movs	r3, #0
 800896c:	9308      	str	r3, [sp, #32]
 800896e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008970:	2b00      	cmp	r3, #0
 8008972:	dc55      	bgt.n	8008a20 <_dtoa_r+0x310>
 8008974:	2301      	movs	r3, #1
 8008976:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800897a:	461a      	mov	r2, r3
 800897c:	9209      	str	r2, [sp, #36]	; 0x24
 800897e:	e00c      	b.n	800899a <_dtoa_r+0x28a>
 8008980:	2301      	movs	r3, #1
 8008982:	e7f3      	b.n	800896c <_dtoa_r+0x25c>
 8008984:	2300      	movs	r3, #0
 8008986:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008988:	9308      	str	r3, [sp, #32]
 800898a:	9b00      	ldr	r3, [sp, #0]
 800898c:	4413      	add	r3, r2
 800898e:	9302      	str	r3, [sp, #8]
 8008990:	3301      	adds	r3, #1
 8008992:	2b01      	cmp	r3, #1
 8008994:	9303      	str	r3, [sp, #12]
 8008996:	bfb8      	it	lt
 8008998:	2301      	movlt	r3, #1
 800899a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800899c:	2200      	movs	r2, #0
 800899e:	6042      	str	r2, [r0, #4]
 80089a0:	2204      	movs	r2, #4
 80089a2:	f102 0614 	add.w	r6, r2, #20
 80089a6:	429e      	cmp	r6, r3
 80089a8:	6841      	ldr	r1, [r0, #4]
 80089aa:	d93d      	bls.n	8008a28 <_dtoa_r+0x318>
 80089ac:	4620      	mov	r0, r4
 80089ae:	f000 fcb7 	bl	8009320 <_Balloc>
 80089b2:	9001      	str	r0, [sp, #4]
 80089b4:	2800      	cmp	r0, #0
 80089b6:	d13b      	bne.n	8008a30 <_dtoa_r+0x320>
 80089b8:	4b11      	ldr	r3, [pc, #68]	; (8008a00 <_dtoa_r+0x2f0>)
 80089ba:	4602      	mov	r2, r0
 80089bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80089c0:	e6c0      	b.n	8008744 <_dtoa_r+0x34>
 80089c2:	2301      	movs	r3, #1
 80089c4:	e7df      	b.n	8008986 <_dtoa_r+0x276>
 80089c6:	bf00      	nop
 80089c8:	636f4361 	.word	0x636f4361
 80089cc:	3fd287a7 	.word	0x3fd287a7
 80089d0:	8b60c8b3 	.word	0x8b60c8b3
 80089d4:	3fc68a28 	.word	0x3fc68a28
 80089d8:	509f79fb 	.word	0x509f79fb
 80089dc:	3fd34413 	.word	0x3fd34413
 80089e0:	0800a801 	.word	0x0800a801
 80089e4:	0800a818 	.word	0x0800a818
 80089e8:	7ff00000 	.word	0x7ff00000
 80089ec:	0800a7fd 	.word	0x0800a7fd
 80089f0:	0800a7f4 	.word	0x0800a7f4
 80089f4:	0800a7d1 	.word	0x0800a7d1
 80089f8:	3ff80000 	.word	0x3ff80000
 80089fc:	0800a908 	.word	0x0800a908
 8008a00:	0800a873 	.word	0x0800a873
 8008a04:	2501      	movs	r5, #1
 8008a06:	2300      	movs	r3, #0
 8008a08:	9306      	str	r3, [sp, #24]
 8008a0a:	9508      	str	r5, [sp, #32]
 8008a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a10:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008a14:	2200      	movs	r2, #0
 8008a16:	2312      	movs	r3, #18
 8008a18:	e7b0      	b.n	800897c <_dtoa_r+0x26c>
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	9308      	str	r3, [sp, #32]
 8008a1e:	e7f5      	b.n	8008a0c <_dtoa_r+0x2fc>
 8008a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a22:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008a26:	e7b8      	b.n	800899a <_dtoa_r+0x28a>
 8008a28:	3101      	adds	r1, #1
 8008a2a:	6041      	str	r1, [r0, #4]
 8008a2c:	0052      	lsls	r2, r2, #1
 8008a2e:	e7b8      	b.n	80089a2 <_dtoa_r+0x292>
 8008a30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a32:	9a01      	ldr	r2, [sp, #4]
 8008a34:	601a      	str	r2, [r3, #0]
 8008a36:	9b03      	ldr	r3, [sp, #12]
 8008a38:	2b0e      	cmp	r3, #14
 8008a3a:	f200 809d 	bhi.w	8008b78 <_dtoa_r+0x468>
 8008a3e:	2d00      	cmp	r5, #0
 8008a40:	f000 809a 	beq.w	8008b78 <_dtoa_r+0x468>
 8008a44:	9b00      	ldr	r3, [sp, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	dd32      	ble.n	8008ab0 <_dtoa_r+0x3a0>
 8008a4a:	4ab7      	ldr	r2, [pc, #732]	; (8008d28 <_dtoa_r+0x618>)
 8008a4c:	f003 030f 	and.w	r3, r3, #15
 8008a50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008a54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a58:	9b00      	ldr	r3, [sp, #0]
 8008a5a:	05d8      	lsls	r0, r3, #23
 8008a5c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008a60:	d516      	bpl.n	8008a90 <_dtoa_r+0x380>
 8008a62:	4bb2      	ldr	r3, [pc, #712]	; (8008d2c <_dtoa_r+0x61c>)
 8008a64:	ec51 0b19 	vmov	r0, r1, d9
 8008a68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a6c:	f7f7 feee 	bl	800084c <__aeabi_ddiv>
 8008a70:	f007 070f 	and.w	r7, r7, #15
 8008a74:	4682      	mov	sl, r0
 8008a76:	468b      	mov	fp, r1
 8008a78:	2503      	movs	r5, #3
 8008a7a:	4eac      	ldr	r6, [pc, #688]	; (8008d2c <_dtoa_r+0x61c>)
 8008a7c:	b957      	cbnz	r7, 8008a94 <_dtoa_r+0x384>
 8008a7e:	4642      	mov	r2, r8
 8008a80:	464b      	mov	r3, r9
 8008a82:	4650      	mov	r0, sl
 8008a84:	4659      	mov	r1, fp
 8008a86:	f7f7 fee1 	bl	800084c <__aeabi_ddiv>
 8008a8a:	4682      	mov	sl, r0
 8008a8c:	468b      	mov	fp, r1
 8008a8e:	e028      	b.n	8008ae2 <_dtoa_r+0x3d2>
 8008a90:	2502      	movs	r5, #2
 8008a92:	e7f2      	b.n	8008a7a <_dtoa_r+0x36a>
 8008a94:	07f9      	lsls	r1, r7, #31
 8008a96:	d508      	bpl.n	8008aaa <_dtoa_r+0x39a>
 8008a98:	4640      	mov	r0, r8
 8008a9a:	4649      	mov	r1, r9
 8008a9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008aa0:	f7f7 fdaa 	bl	80005f8 <__aeabi_dmul>
 8008aa4:	3501      	adds	r5, #1
 8008aa6:	4680      	mov	r8, r0
 8008aa8:	4689      	mov	r9, r1
 8008aaa:	107f      	asrs	r7, r7, #1
 8008aac:	3608      	adds	r6, #8
 8008aae:	e7e5      	b.n	8008a7c <_dtoa_r+0x36c>
 8008ab0:	f000 809b 	beq.w	8008bea <_dtoa_r+0x4da>
 8008ab4:	9b00      	ldr	r3, [sp, #0]
 8008ab6:	4f9d      	ldr	r7, [pc, #628]	; (8008d2c <_dtoa_r+0x61c>)
 8008ab8:	425e      	negs	r6, r3
 8008aba:	4b9b      	ldr	r3, [pc, #620]	; (8008d28 <_dtoa_r+0x618>)
 8008abc:	f006 020f 	and.w	r2, r6, #15
 8008ac0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac8:	ec51 0b19 	vmov	r0, r1, d9
 8008acc:	f7f7 fd94 	bl	80005f8 <__aeabi_dmul>
 8008ad0:	1136      	asrs	r6, r6, #4
 8008ad2:	4682      	mov	sl, r0
 8008ad4:	468b      	mov	fp, r1
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	2502      	movs	r5, #2
 8008ada:	2e00      	cmp	r6, #0
 8008adc:	d17a      	bne.n	8008bd4 <_dtoa_r+0x4c4>
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1d3      	bne.n	8008a8a <_dtoa_r+0x37a>
 8008ae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f000 8082 	beq.w	8008bee <_dtoa_r+0x4de>
 8008aea:	4b91      	ldr	r3, [pc, #580]	; (8008d30 <_dtoa_r+0x620>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	4650      	mov	r0, sl
 8008af0:	4659      	mov	r1, fp
 8008af2:	f7f7 fff3 	bl	8000adc <__aeabi_dcmplt>
 8008af6:	2800      	cmp	r0, #0
 8008af8:	d079      	beq.n	8008bee <_dtoa_r+0x4de>
 8008afa:	9b03      	ldr	r3, [sp, #12]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d076      	beq.n	8008bee <_dtoa_r+0x4de>
 8008b00:	9b02      	ldr	r3, [sp, #8]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	dd36      	ble.n	8008b74 <_dtoa_r+0x464>
 8008b06:	9b00      	ldr	r3, [sp, #0]
 8008b08:	4650      	mov	r0, sl
 8008b0a:	4659      	mov	r1, fp
 8008b0c:	1e5f      	subs	r7, r3, #1
 8008b0e:	2200      	movs	r2, #0
 8008b10:	4b88      	ldr	r3, [pc, #544]	; (8008d34 <_dtoa_r+0x624>)
 8008b12:	f7f7 fd71 	bl	80005f8 <__aeabi_dmul>
 8008b16:	9e02      	ldr	r6, [sp, #8]
 8008b18:	4682      	mov	sl, r0
 8008b1a:	468b      	mov	fp, r1
 8008b1c:	3501      	adds	r5, #1
 8008b1e:	4628      	mov	r0, r5
 8008b20:	f7f7 fd00 	bl	8000524 <__aeabi_i2d>
 8008b24:	4652      	mov	r2, sl
 8008b26:	465b      	mov	r3, fp
 8008b28:	f7f7 fd66 	bl	80005f8 <__aeabi_dmul>
 8008b2c:	4b82      	ldr	r3, [pc, #520]	; (8008d38 <_dtoa_r+0x628>)
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f7f7 fbac 	bl	800028c <__adddf3>
 8008b34:	46d0      	mov	r8, sl
 8008b36:	46d9      	mov	r9, fp
 8008b38:	4682      	mov	sl, r0
 8008b3a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008b3e:	2e00      	cmp	r6, #0
 8008b40:	d158      	bne.n	8008bf4 <_dtoa_r+0x4e4>
 8008b42:	4b7e      	ldr	r3, [pc, #504]	; (8008d3c <_dtoa_r+0x62c>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	4640      	mov	r0, r8
 8008b48:	4649      	mov	r1, r9
 8008b4a:	f7f7 fb9d 	bl	8000288 <__aeabi_dsub>
 8008b4e:	4652      	mov	r2, sl
 8008b50:	465b      	mov	r3, fp
 8008b52:	4680      	mov	r8, r0
 8008b54:	4689      	mov	r9, r1
 8008b56:	f7f7 ffdf 	bl	8000b18 <__aeabi_dcmpgt>
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	f040 8295 	bne.w	800908a <_dtoa_r+0x97a>
 8008b60:	4652      	mov	r2, sl
 8008b62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008b66:	4640      	mov	r0, r8
 8008b68:	4649      	mov	r1, r9
 8008b6a:	f7f7 ffb7 	bl	8000adc <__aeabi_dcmplt>
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	f040 8289 	bne.w	8009086 <_dtoa_r+0x976>
 8008b74:	ec5b ab19 	vmov	sl, fp, d9
 8008b78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	f2c0 8148 	blt.w	8008e10 <_dtoa_r+0x700>
 8008b80:	9a00      	ldr	r2, [sp, #0]
 8008b82:	2a0e      	cmp	r2, #14
 8008b84:	f300 8144 	bgt.w	8008e10 <_dtoa_r+0x700>
 8008b88:	4b67      	ldr	r3, [pc, #412]	; (8008d28 <_dtoa_r+0x618>)
 8008b8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f280 80d5 	bge.w	8008d44 <_dtoa_r+0x634>
 8008b9a:	9b03      	ldr	r3, [sp, #12]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f300 80d1 	bgt.w	8008d44 <_dtoa_r+0x634>
 8008ba2:	f040 826f 	bne.w	8009084 <_dtoa_r+0x974>
 8008ba6:	4b65      	ldr	r3, [pc, #404]	; (8008d3c <_dtoa_r+0x62c>)
 8008ba8:	2200      	movs	r2, #0
 8008baa:	4640      	mov	r0, r8
 8008bac:	4649      	mov	r1, r9
 8008bae:	f7f7 fd23 	bl	80005f8 <__aeabi_dmul>
 8008bb2:	4652      	mov	r2, sl
 8008bb4:	465b      	mov	r3, fp
 8008bb6:	f7f7 ffa5 	bl	8000b04 <__aeabi_dcmpge>
 8008bba:	9e03      	ldr	r6, [sp, #12]
 8008bbc:	4637      	mov	r7, r6
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	f040 8245 	bne.w	800904e <_dtoa_r+0x93e>
 8008bc4:	9d01      	ldr	r5, [sp, #4]
 8008bc6:	2331      	movs	r3, #49	; 0x31
 8008bc8:	f805 3b01 	strb.w	r3, [r5], #1
 8008bcc:	9b00      	ldr	r3, [sp, #0]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	9300      	str	r3, [sp, #0]
 8008bd2:	e240      	b.n	8009056 <_dtoa_r+0x946>
 8008bd4:	07f2      	lsls	r2, r6, #31
 8008bd6:	d505      	bpl.n	8008be4 <_dtoa_r+0x4d4>
 8008bd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bdc:	f7f7 fd0c 	bl	80005f8 <__aeabi_dmul>
 8008be0:	3501      	adds	r5, #1
 8008be2:	2301      	movs	r3, #1
 8008be4:	1076      	asrs	r6, r6, #1
 8008be6:	3708      	adds	r7, #8
 8008be8:	e777      	b.n	8008ada <_dtoa_r+0x3ca>
 8008bea:	2502      	movs	r5, #2
 8008bec:	e779      	b.n	8008ae2 <_dtoa_r+0x3d2>
 8008bee:	9f00      	ldr	r7, [sp, #0]
 8008bf0:	9e03      	ldr	r6, [sp, #12]
 8008bf2:	e794      	b.n	8008b1e <_dtoa_r+0x40e>
 8008bf4:	9901      	ldr	r1, [sp, #4]
 8008bf6:	4b4c      	ldr	r3, [pc, #304]	; (8008d28 <_dtoa_r+0x618>)
 8008bf8:	4431      	add	r1, r6
 8008bfa:	910d      	str	r1, [sp, #52]	; 0x34
 8008bfc:	9908      	ldr	r1, [sp, #32]
 8008bfe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008c02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008c06:	2900      	cmp	r1, #0
 8008c08:	d043      	beq.n	8008c92 <_dtoa_r+0x582>
 8008c0a:	494d      	ldr	r1, [pc, #308]	; (8008d40 <_dtoa_r+0x630>)
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	f7f7 fe1d 	bl	800084c <__aeabi_ddiv>
 8008c12:	4652      	mov	r2, sl
 8008c14:	465b      	mov	r3, fp
 8008c16:	f7f7 fb37 	bl	8000288 <__aeabi_dsub>
 8008c1a:	9d01      	ldr	r5, [sp, #4]
 8008c1c:	4682      	mov	sl, r0
 8008c1e:	468b      	mov	fp, r1
 8008c20:	4649      	mov	r1, r9
 8008c22:	4640      	mov	r0, r8
 8008c24:	f7f7 ff98 	bl	8000b58 <__aeabi_d2iz>
 8008c28:	4606      	mov	r6, r0
 8008c2a:	f7f7 fc7b 	bl	8000524 <__aeabi_i2d>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	4640      	mov	r0, r8
 8008c34:	4649      	mov	r1, r9
 8008c36:	f7f7 fb27 	bl	8000288 <__aeabi_dsub>
 8008c3a:	3630      	adds	r6, #48	; 0x30
 8008c3c:	f805 6b01 	strb.w	r6, [r5], #1
 8008c40:	4652      	mov	r2, sl
 8008c42:	465b      	mov	r3, fp
 8008c44:	4680      	mov	r8, r0
 8008c46:	4689      	mov	r9, r1
 8008c48:	f7f7 ff48 	bl	8000adc <__aeabi_dcmplt>
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	d163      	bne.n	8008d18 <_dtoa_r+0x608>
 8008c50:	4642      	mov	r2, r8
 8008c52:	464b      	mov	r3, r9
 8008c54:	4936      	ldr	r1, [pc, #216]	; (8008d30 <_dtoa_r+0x620>)
 8008c56:	2000      	movs	r0, #0
 8008c58:	f7f7 fb16 	bl	8000288 <__aeabi_dsub>
 8008c5c:	4652      	mov	r2, sl
 8008c5e:	465b      	mov	r3, fp
 8008c60:	f7f7 ff3c 	bl	8000adc <__aeabi_dcmplt>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	f040 80b5 	bne.w	8008dd4 <_dtoa_r+0x6c4>
 8008c6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c6c:	429d      	cmp	r5, r3
 8008c6e:	d081      	beq.n	8008b74 <_dtoa_r+0x464>
 8008c70:	4b30      	ldr	r3, [pc, #192]	; (8008d34 <_dtoa_r+0x624>)
 8008c72:	2200      	movs	r2, #0
 8008c74:	4650      	mov	r0, sl
 8008c76:	4659      	mov	r1, fp
 8008c78:	f7f7 fcbe 	bl	80005f8 <__aeabi_dmul>
 8008c7c:	4b2d      	ldr	r3, [pc, #180]	; (8008d34 <_dtoa_r+0x624>)
 8008c7e:	4682      	mov	sl, r0
 8008c80:	468b      	mov	fp, r1
 8008c82:	4640      	mov	r0, r8
 8008c84:	4649      	mov	r1, r9
 8008c86:	2200      	movs	r2, #0
 8008c88:	f7f7 fcb6 	bl	80005f8 <__aeabi_dmul>
 8008c8c:	4680      	mov	r8, r0
 8008c8e:	4689      	mov	r9, r1
 8008c90:	e7c6      	b.n	8008c20 <_dtoa_r+0x510>
 8008c92:	4650      	mov	r0, sl
 8008c94:	4659      	mov	r1, fp
 8008c96:	f7f7 fcaf 	bl	80005f8 <__aeabi_dmul>
 8008c9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c9c:	9d01      	ldr	r5, [sp, #4]
 8008c9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ca0:	4682      	mov	sl, r0
 8008ca2:	468b      	mov	fp, r1
 8008ca4:	4649      	mov	r1, r9
 8008ca6:	4640      	mov	r0, r8
 8008ca8:	f7f7 ff56 	bl	8000b58 <__aeabi_d2iz>
 8008cac:	4606      	mov	r6, r0
 8008cae:	f7f7 fc39 	bl	8000524 <__aeabi_i2d>
 8008cb2:	3630      	adds	r6, #48	; 0x30
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	4640      	mov	r0, r8
 8008cba:	4649      	mov	r1, r9
 8008cbc:	f7f7 fae4 	bl	8000288 <__aeabi_dsub>
 8008cc0:	f805 6b01 	strb.w	r6, [r5], #1
 8008cc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008cc6:	429d      	cmp	r5, r3
 8008cc8:	4680      	mov	r8, r0
 8008cca:	4689      	mov	r9, r1
 8008ccc:	f04f 0200 	mov.w	r2, #0
 8008cd0:	d124      	bne.n	8008d1c <_dtoa_r+0x60c>
 8008cd2:	4b1b      	ldr	r3, [pc, #108]	; (8008d40 <_dtoa_r+0x630>)
 8008cd4:	4650      	mov	r0, sl
 8008cd6:	4659      	mov	r1, fp
 8008cd8:	f7f7 fad8 	bl	800028c <__adddf3>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	460b      	mov	r3, r1
 8008ce0:	4640      	mov	r0, r8
 8008ce2:	4649      	mov	r1, r9
 8008ce4:	f7f7 ff18 	bl	8000b18 <__aeabi_dcmpgt>
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	d173      	bne.n	8008dd4 <_dtoa_r+0x6c4>
 8008cec:	4652      	mov	r2, sl
 8008cee:	465b      	mov	r3, fp
 8008cf0:	4913      	ldr	r1, [pc, #76]	; (8008d40 <_dtoa_r+0x630>)
 8008cf2:	2000      	movs	r0, #0
 8008cf4:	f7f7 fac8 	bl	8000288 <__aeabi_dsub>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	4640      	mov	r0, r8
 8008cfe:	4649      	mov	r1, r9
 8008d00:	f7f7 feec 	bl	8000adc <__aeabi_dcmplt>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	f43f af35 	beq.w	8008b74 <_dtoa_r+0x464>
 8008d0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008d0c:	1e6b      	subs	r3, r5, #1
 8008d0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d10:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008d14:	2b30      	cmp	r3, #48	; 0x30
 8008d16:	d0f8      	beq.n	8008d0a <_dtoa_r+0x5fa>
 8008d18:	9700      	str	r7, [sp, #0]
 8008d1a:	e049      	b.n	8008db0 <_dtoa_r+0x6a0>
 8008d1c:	4b05      	ldr	r3, [pc, #20]	; (8008d34 <_dtoa_r+0x624>)
 8008d1e:	f7f7 fc6b 	bl	80005f8 <__aeabi_dmul>
 8008d22:	4680      	mov	r8, r0
 8008d24:	4689      	mov	r9, r1
 8008d26:	e7bd      	b.n	8008ca4 <_dtoa_r+0x594>
 8008d28:	0800a908 	.word	0x0800a908
 8008d2c:	0800a8e0 	.word	0x0800a8e0
 8008d30:	3ff00000 	.word	0x3ff00000
 8008d34:	40240000 	.word	0x40240000
 8008d38:	401c0000 	.word	0x401c0000
 8008d3c:	40140000 	.word	0x40140000
 8008d40:	3fe00000 	.word	0x3fe00000
 8008d44:	9d01      	ldr	r5, [sp, #4]
 8008d46:	4656      	mov	r6, sl
 8008d48:	465f      	mov	r7, fp
 8008d4a:	4642      	mov	r2, r8
 8008d4c:	464b      	mov	r3, r9
 8008d4e:	4630      	mov	r0, r6
 8008d50:	4639      	mov	r1, r7
 8008d52:	f7f7 fd7b 	bl	800084c <__aeabi_ddiv>
 8008d56:	f7f7 feff 	bl	8000b58 <__aeabi_d2iz>
 8008d5a:	4682      	mov	sl, r0
 8008d5c:	f7f7 fbe2 	bl	8000524 <__aeabi_i2d>
 8008d60:	4642      	mov	r2, r8
 8008d62:	464b      	mov	r3, r9
 8008d64:	f7f7 fc48 	bl	80005f8 <__aeabi_dmul>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	4639      	mov	r1, r7
 8008d70:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008d74:	f7f7 fa88 	bl	8000288 <__aeabi_dsub>
 8008d78:	f805 6b01 	strb.w	r6, [r5], #1
 8008d7c:	9e01      	ldr	r6, [sp, #4]
 8008d7e:	9f03      	ldr	r7, [sp, #12]
 8008d80:	1bae      	subs	r6, r5, r6
 8008d82:	42b7      	cmp	r7, r6
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	d135      	bne.n	8008df6 <_dtoa_r+0x6e6>
 8008d8a:	f7f7 fa7f 	bl	800028c <__adddf3>
 8008d8e:	4642      	mov	r2, r8
 8008d90:	464b      	mov	r3, r9
 8008d92:	4606      	mov	r6, r0
 8008d94:	460f      	mov	r7, r1
 8008d96:	f7f7 febf 	bl	8000b18 <__aeabi_dcmpgt>
 8008d9a:	b9d0      	cbnz	r0, 8008dd2 <_dtoa_r+0x6c2>
 8008d9c:	4642      	mov	r2, r8
 8008d9e:	464b      	mov	r3, r9
 8008da0:	4630      	mov	r0, r6
 8008da2:	4639      	mov	r1, r7
 8008da4:	f7f7 fe90 	bl	8000ac8 <__aeabi_dcmpeq>
 8008da8:	b110      	cbz	r0, 8008db0 <_dtoa_r+0x6a0>
 8008daa:	f01a 0f01 	tst.w	sl, #1
 8008dae:	d110      	bne.n	8008dd2 <_dtoa_r+0x6c2>
 8008db0:	4620      	mov	r0, r4
 8008db2:	ee18 1a10 	vmov	r1, s16
 8008db6:	f000 faf3 	bl	80093a0 <_Bfree>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	9800      	ldr	r0, [sp, #0]
 8008dbe:	702b      	strb	r3, [r5, #0]
 8008dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dc2:	3001      	adds	r0, #1
 8008dc4:	6018      	str	r0, [r3, #0]
 8008dc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f43f acf1 	beq.w	80087b0 <_dtoa_r+0xa0>
 8008dce:	601d      	str	r5, [r3, #0]
 8008dd0:	e4ee      	b.n	80087b0 <_dtoa_r+0xa0>
 8008dd2:	9f00      	ldr	r7, [sp, #0]
 8008dd4:	462b      	mov	r3, r5
 8008dd6:	461d      	mov	r5, r3
 8008dd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ddc:	2a39      	cmp	r2, #57	; 0x39
 8008dde:	d106      	bne.n	8008dee <_dtoa_r+0x6de>
 8008de0:	9a01      	ldr	r2, [sp, #4]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d1f7      	bne.n	8008dd6 <_dtoa_r+0x6c6>
 8008de6:	9901      	ldr	r1, [sp, #4]
 8008de8:	2230      	movs	r2, #48	; 0x30
 8008dea:	3701      	adds	r7, #1
 8008dec:	700a      	strb	r2, [r1, #0]
 8008dee:	781a      	ldrb	r2, [r3, #0]
 8008df0:	3201      	adds	r2, #1
 8008df2:	701a      	strb	r2, [r3, #0]
 8008df4:	e790      	b.n	8008d18 <_dtoa_r+0x608>
 8008df6:	4ba6      	ldr	r3, [pc, #664]	; (8009090 <_dtoa_r+0x980>)
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f7f7 fbfd 	bl	80005f8 <__aeabi_dmul>
 8008dfe:	2200      	movs	r2, #0
 8008e00:	2300      	movs	r3, #0
 8008e02:	4606      	mov	r6, r0
 8008e04:	460f      	mov	r7, r1
 8008e06:	f7f7 fe5f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	d09d      	beq.n	8008d4a <_dtoa_r+0x63a>
 8008e0e:	e7cf      	b.n	8008db0 <_dtoa_r+0x6a0>
 8008e10:	9a08      	ldr	r2, [sp, #32]
 8008e12:	2a00      	cmp	r2, #0
 8008e14:	f000 80d7 	beq.w	8008fc6 <_dtoa_r+0x8b6>
 8008e18:	9a06      	ldr	r2, [sp, #24]
 8008e1a:	2a01      	cmp	r2, #1
 8008e1c:	f300 80ba 	bgt.w	8008f94 <_dtoa_r+0x884>
 8008e20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e22:	2a00      	cmp	r2, #0
 8008e24:	f000 80b2 	beq.w	8008f8c <_dtoa_r+0x87c>
 8008e28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008e2c:	9e07      	ldr	r6, [sp, #28]
 8008e2e:	9d04      	ldr	r5, [sp, #16]
 8008e30:	9a04      	ldr	r2, [sp, #16]
 8008e32:	441a      	add	r2, r3
 8008e34:	9204      	str	r2, [sp, #16]
 8008e36:	9a05      	ldr	r2, [sp, #20]
 8008e38:	2101      	movs	r1, #1
 8008e3a:	441a      	add	r2, r3
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	9205      	str	r2, [sp, #20]
 8008e40:	f000 fb66 	bl	8009510 <__i2b>
 8008e44:	4607      	mov	r7, r0
 8008e46:	2d00      	cmp	r5, #0
 8008e48:	dd0c      	ble.n	8008e64 <_dtoa_r+0x754>
 8008e4a:	9b05      	ldr	r3, [sp, #20]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	dd09      	ble.n	8008e64 <_dtoa_r+0x754>
 8008e50:	42ab      	cmp	r3, r5
 8008e52:	9a04      	ldr	r2, [sp, #16]
 8008e54:	bfa8      	it	ge
 8008e56:	462b      	movge	r3, r5
 8008e58:	1ad2      	subs	r2, r2, r3
 8008e5a:	9204      	str	r2, [sp, #16]
 8008e5c:	9a05      	ldr	r2, [sp, #20]
 8008e5e:	1aed      	subs	r5, r5, r3
 8008e60:	1ad3      	subs	r3, r2, r3
 8008e62:	9305      	str	r3, [sp, #20]
 8008e64:	9b07      	ldr	r3, [sp, #28]
 8008e66:	b31b      	cbz	r3, 8008eb0 <_dtoa_r+0x7a0>
 8008e68:	9b08      	ldr	r3, [sp, #32]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f000 80af 	beq.w	8008fce <_dtoa_r+0x8be>
 8008e70:	2e00      	cmp	r6, #0
 8008e72:	dd13      	ble.n	8008e9c <_dtoa_r+0x78c>
 8008e74:	4639      	mov	r1, r7
 8008e76:	4632      	mov	r2, r6
 8008e78:	4620      	mov	r0, r4
 8008e7a:	f000 fc09 	bl	8009690 <__pow5mult>
 8008e7e:	ee18 2a10 	vmov	r2, s16
 8008e82:	4601      	mov	r1, r0
 8008e84:	4607      	mov	r7, r0
 8008e86:	4620      	mov	r0, r4
 8008e88:	f000 fb58 	bl	800953c <__multiply>
 8008e8c:	ee18 1a10 	vmov	r1, s16
 8008e90:	4680      	mov	r8, r0
 8008e92:	4620      	mov	r0, r4
 8008e94:	f000 fa84 	bl	80093a0 <_Bfree>
 8008e98:	ee08 8a10 	vmov	s16, r8
 8008e9c:	9b07      	ldr	r3, [sp, #28]
 8008e9e:	1b9a      	subs	r2, r3, r6
 8008ea0:	d006      	beq.n	8008eb0 <_dtoa_r+0x7a0>
 8008ea2:	ee18 1a10 	vmov	r1, s16
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	f000 fbf2 	bl	8009690 <__pow5mult>
 8008eac:	ee08 0a10 	vmov	s16, r0
 8008eb0:	2101      	movs	r1, #1
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	f000 fb2c 	bl	8009510 <__i2b>
 8008eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	4606      	mov	r6, r0
 8008ebe:	f340 8088 	ble.w	8008fd2 <_dtoa_r+0x8c2>
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	4601      	mov	r1, r0
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f000 fbe2 	bl	8009690 <__pow5mult>
 8008ecc:	9b06      	ldr	r3, [sp, #24]
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	4606      	mov	r6, r0
 8008ed2:	f340 8081 	ble.w	8008fd8 <_dtoa_r+0x8c8>
 8008ed6:	f04f 0800 	mov.w	r8, #0
 8008eda:	6933      	ldr	r3, [r6, #16]
 8008edc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008ee0:	6918      	ldr	r0, [r3, #16]
 8008ee2:	f000 fac5 	bl	8009470 <__hi0bits>
 8008ee6:	f1c0 0020 	rsb	r0, r0, #32
 8008eea:	9b05      	ldr	r3, [sp, #20]
 8008eec:	4418      	add	r0, r3
 8008eee:	f010 001f 	ands.w	r0, r0, #31
 8008ef2:	f000 8092 	beq.w	800901a <_dtoa_r+0x90a>
 8008ef6:	f1c0 0320 	rsb	r3, r0, #32
 8008efa:	2b04      	cmp	r3, #4
 8008efc:	f340 808a 	ble.w	8009014 <_dtoa_r+0x904>
 8008f00:	f1c0 001c 	rsb	r0, r0, #28
 8008f04:	9b04      	ldr	r3, [sp, #16]
 8008f06:	4403      	add	r3, r0
 8008f08:	9304      	str	r3, [sp, #16]
 8008f0a:	9b05      	ldr	r3, [sp, #20]
 8008f0c:	4403      	add	r3, r0
 8008f0e:	4405      	add	r5, r0
 8008f10:	9305      	str	r3, [sp, #20]
 8008f12:	9b04      	ldr	r3, [sp, #16]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	dd07      	ble.n	8008f28 <_dtoa_r+0x818>
 8008f18:	ee18 1a10 	vmov	r1, s16
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f000 fc10 	bl	8009744 <__lshift>
 8008f24:	ee08 0a10 	vmov	s16, r0
 8008f28:	9b05      	ldr	r3, [sp, #20]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	dd05      	ble.n	8008f3a <_dtoa_r+0x82a>
 8008f2e:	4631      	mov	r1, r6
 8008f30:	461a      	mov	r2, r3
 8008f32:	4620      	mov	r0, r4
 8008f34:	f000 fc06 	bl	8009744 <__lshift>
 8008f38:	4606      	mov	r6, r0
 8008f3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d06e      	beq.n	800901e <_dtoa_r+0x90e>
 8008f40:	ee18 0a10 	vmov	r0, s16
 8008f44:	4631      	mov	r1, r6
 8008f46:	f000 fc6d 	bl	8009824 <__mcmp>
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	da67      	bge.n	800901e <_dtoa_r+0x90e>
 8008f4e:	9b00      	ldr	r3, [sp, #0]
 8008f50:	3b01      	subs	r3, #1
 8008f52:	ee18 1a10 	vmov	r1, s16
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	220a      	movs	r2, #10
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	f000 fa41 	bl	80093e4 <__multadd>
 8008f62:	9b08      	ldr	r3, [sp, #32]
 8008f64:	ee08 0a10 	vmov	s16, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	f000 81b1 	beq.w	80092d0 <_dtoa_r+0xbc0>
 8008f6e:	2300      	movs	r3, #0
 8008f70:	4639      	mov	r1, r7
 8008f72:	220a      	movs	r2, #10
 8008f74:	4620      	mov	r0, r4
 8008f76:	f000 fa35 	bl	80093e4 <__multadd>
 8008f7a:	9b02      	ldr	r3, [sp, #8]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	4607      	mov	r7, r0
 8008f80:	f300 808e 	bgt.w	80090a0 <_dtoa_r+0x990>
 8008f84:	9b06      	ldr	r3, [sp, #24]
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	dc51      	bgt.n	800902e <_dtoa_r+0x91e>
 8008f8a:	e089      	b.n	80090a0 <_dtoa_r+0x990>
 8008f8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008f92:	e74b      	b.n	8008e2c <_dtoa_r+0x71c>
 8008f94:	9b03      	ldr	r3, [sp, #12]
 8008f96:	1e5e      	subs	r6, r3, #1
 8008f98:	9b07      	ldr	r3, [sp, #28]
 8008f9a:	42b3      	cmp	r3, r6
 8008f9c:	bfbf      	itttt	lt
 8008f9e:	9b07      	ldrlt	r3, [sp, #28]
 8008fa0:	9607      	strlt	r6, [sp, #28]
 8008fa2:	1af2      	sublt	r2, r6, r3
 8008fa4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008fa6:	bfb6      	itet	lt
 8008fa8:	189b      	addlt	r3, r3, r2
 8008faa:	1b9e      	subge	r6, r3, r6
 8008fac:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008fae:	9b03      	ldr	r3, [sp, #12]
 8008fb0:	bfb8      	it	lt
 8008fb2:	2600      	movlt	r6, #0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	bfb7      	itett	lt
 8008fb8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008fbc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008fc0:	1a9d      	sublt	r5, r3, r2
 8008fc2:	2300      	movlt	r3, #0
 8008fc4:	e734      	b.n	8008e30 <_dtoa_r+0x720>
 8008fc6:	9e07      	ldr	r6, [sp, #28]
 8008fc8:	9d04      	ldr	r5, [sp, #16]
 8008fca:	9f08      	ldr	r7, [sp, #32]
 8008fcc:	e73b      	b.n	8008e46 <_dtoa_r+0x736>
 8008fce:	9a07      	ldr	r2, [sp, #28]
 8008fd0:	e767      	b.n	8008ea2 <_dtoa_r+0x792>
 8008fd2:	9b06      	ldr	r3, [sp, #24]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	dc18      	bgt.n	800900a <_dtoa_r+0x8fa>
 8008fd8:	f1ba 0f00 	cmp.w	sl, #0
 8008fdc:	d115      	bne.n	800900a <_dtoa_r+0x8fa>
 8008fde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008fe2:	b993      	cbnz	r3, 800900a <_dtoa_r+0x8fa>
 8008fe4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008fe8:	0d1b      	lsrs	r3, r3, #20
 8008fea:	051b      	lsls	r3, r3, #20
 8008fec:	b183      	cbz	r3, 8009010 <_dtoa_r+0x900>
 8008fee:	9b04      	ldr	r3, [sp, #16]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	9304      	str	r3, [sp, #16]
 8008ff4:	9b05      	ldr	r3, [sp, #20]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	9305      	str	r3, [sp, #20]
 8008ffa:	f04f 0801 	mov.w	r8, #1
 8008ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009000:	2b00      	cmp	r3, #0
 8009002:	f47f af6a 	bne.w	8008eda <_dtoa_r+0x7ca>
 8009006:	2001      	movs	r0, #1
 8009008:	e76f      	b.n	8008eea <_dtoa_r+0x7da>
 800900a:	f04f 0800 	mov.w	r8, #0
 800900e:	e7f6      	b.n	8008ffe <_dtoa_r+0x8ee>
 8009010:	4698      	mov	r8, r3
 8009012:	e7f4      	b.n	8008ffe <_dtoa_r+0x8ee>
 8009014:	f43f af7d 	beq.w	8008f12 <_dtoa_r+0x802>
 8009018:	4618      	mov	r0, r3
 800901a:	301c      	adds	r0, #28
 800901c:	e772      	b.n	8008f04 <_dtoa_r+0x7f4>
 800901e:	9b03      	ldr	r3, [sp, #12]
 8009020:	2b00      	cmp	r3, #0
 8009022:	dc37      	bgt.n	8009094 <_dtoa_r+0x984>
 8009024:	9b06      	ldr	r3, [sp, #24]
 8009026:	2b02      	cmp	r3, #2
 8009028:	dd34      	ble.n	8009094 <_dtoa_r+0x984>
 800902a:	9b03      	ldr	r3, [sp, #12]
 800902c:	9302      	str	r3, [sp, #8]
 800902e:	9b02      	ldr	r3, [sp, #8]
 8009030:	b96b      	cbnz	r3, 800904e <_dtoa_r+0x93e>
 8009032:	4631      	mov	r1, r6
 8009034:	2205      	movs	r2, #5
 8009036:	4620      	mov	r0, r4
 8009038:	f000 f9d4 	bl	80093e4 <__multadd>
 800903c:	4601      	mov	r1, r0
 800903e:	4606      	mov	r6, r0
 8009040:	ee18 0a10 	vmov	r0, s16
 8009044:	f000 fbee 	bl	8009824 <__mcmp>
 8009048:	2800      	cmp	r0, #0
 800904a:	f73f adbb 	bgt.w	8008bc4 <_dtoa_r+0x4b4>
 800904e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009050:	9d01      	ldr	r5, [sp, #4]
 8009052:	43db      	mvns	r3, r3
 8009054:	9300      	str	r3, [sp, #0]
 8009056:	f04f 0800 	mov.w	r8, #0
 800905a:	4631      	mov	r1, r6
 800905c:	4620      	mov	r0, r4
 800905e:	f000 f99f 	bl	80093a0 <_Bfree>
 8009062:	2f00      	cmp	r7, #0
 8009064:	f43f aea4 	beq.w	8008db0 <_dtoa_r+0x6a0>
 8009068:	f1b8 0f00 	cmp.w	r8, #0
 800906c:	d005      	beq.n	800907a <_dtoa_r+0x96a>
 800906e:	45b8      	cmp	r8, r7
 8009070:	d003      	beq.n	800907a <_dtoa_r+0x96a>
 8009072:	4641      	mov	r1, r8
 8009074:	4620      	mov	r0, r4
 8009076:	f000 f993 	bl	80093a0 <_Bfree>
 800907a:	4639      	mov	r1, r7
 800907c:	4620      	mov	r0, r4
 800907e:	f000 f98f 	bl	80093a0 <_Bfree>
 8009082:	e695      	b.n	8008db0 <_dtoa_r+0x6a0>
 8009084:	2600      	movs	r6, #0
 8009086:	4637      	mov	r7, r6
 8009088:	e7e1      	b.n	800904e <_dtoa_r+0x93e>
 800908a:	9700      	str	r7, [sp, #0]
 800908c:	4637      	mov	r7, r6
 800908e:	e599      	b.n	8008bc4 <_dtoa_r+0x4b4>
 8009090:	40240000 	.word	0x40240000
 8009094:	9b08      	ldr	r3, [sp, #32]
 8009096:	2b00      	cmp	r3, #0
 8009098:	f000 80ca 	beq.w	8009230 <_dtoa_r+0xb20>
 800909c:	9b03      	ldr	r3, [sp, #12]
 800909e:	9302      	str	r3, [sp, #8]
 80090a0:	2d00      	cmp	r5, #0
 80090a2:	dd05      	ble.n	80090b0 <_dtoa_r+0x9a0>
 80090a4:	4639      	mov	r1, r7
 80090a6:	462a      	mov	r2, r5
 80090a8:	4620      	mov	r0, r4
 80090aa:	f000 fb4b 	bl	8009744 <__lshift>
 80090ae:	4607      	mov	r7, r0
 80090b0:	f1b8 0f00 	cmp.w	r8, #0
 80090b4:	d05b      	beq.n	800916e <_dtoa_r+0xa5e>
 80090b6:	6879      	ldr	r1, [r7, #4]
 80090b8:	4620      	mov	r0, r4
 80090ba:	f000 f931 	bl	8009320 <_Balloc>
 80090be:	4605      	mov	r5, r0
 80090c0:	b928      	cbnz	r0, 80090ce <_dtoa_r+0x9be>
 80090c2:	4b87      	ldr	r3, [pc, #540]	; (80092e0 <_dtoa_r+0xbd0>)
 80090c4:	4602      	mov	r2, r0
 80090c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80090ca:	f7ff bb3b 	b.w	8008744 <_dtoa_r+0x34>
 80090ce:	693a      	ldr	r2, [r7, #16]
 80090d0:	3202      	adds	r2, #2
 80090d2:	0092      	lsls	r2, r2, #2
 80090d4:	f107 010c 	add.w	r1, r7, #12
 80090d8:	300c      	adds	r0, #12
 80090da:	f000 f913 	bl	8009304 <memcpy>
 80090de:	2201      	movs	r2, #1
 80090e0:	4629      	mov	r1, r5
 80090e2:	4620      	mov	r0, r4
 80090e4:	f000 fb2e 	bl	8009744 <__lshift>
 80090e8:	9b01      	ldr	r3, [sp, #4]
 80090ea:	f103 0901 	add.w	r9, r3, #1
 80090ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80090f2:	4413      	add	r3, r2
 80090f4:	9305      	str	r3, [sp, #20]
 80090f6:	f00a 0301 	and.w	r3, sl, #1
 80090fa:	46b8      	mov	r8, r7
 80090fc:	9304      	str	r3, [sp, #16]
 80090fe:	4607      	mov	r7, r0
 8009100:	4631      	mov	r1, r6
 8009102:	ee18 0a10 	vmov	r0, s16
 8009106:	f7ff fa77 	bl	80085f8 <quorem>
 800910a:	4641      	mov	r1, r8
 800910c:	9002      	str	r0, [sp, #8]
 800910e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009112:	ee18 0a10 	vmov	r0, s16
 8009116:	f000 fb85 	bl	8009824 <__mcmp>
 800911a:	463a      	mov	r2, r7
 800911c:	9003      	str	r0, [sp, #12]
 800911e:	4631      	mov	r1, r6
 8009120:	4620      	mov	r0, r4
 8009122:	f000 fb9b 	bl	800985c <__mdiff>
 8009126:	68c2      	ldr	r2, [r0, #12]
 8009128:	f109 3bff 	add.w	fp, r9, #4294967295
 800912c:	4605      	mov	r5, r0
 800912e:	bb02      	cbnz	r2, 8009172 <_dtoa_r+0xa62>
 8009130:	4601      	mov	r1, r0
 8009132:	ee18 0a10 	vmov	r0, s16
 8009136:	f000 fb75 	bl	8009824 <__mcmp>
 800913a:	4602      	mov	r2, r0
 800913c:	4629      	mov	r1, r5
 800913e:	4620      	mov	r0, r4
 8009140:	9207      	str	r2, [sp, #28]
 8009142:	f000 f92d 	bl	80093a0 <_Bfree>
 8009146:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800914a:	ea43 0102 	orr.w	r1, r3, r2
 800914e:	9b04      	ldr	r3, [sp, #16]
 8009150:	430b      	orrs	r3, r1
 8009152:	464d      	mov	r5, r9
 8009154:	d10f      	bne.n	8009176 <_dtoa_r+0xa66>
 8009156:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800915a:	d02a      	beq.n	80091b2 <_dtoa_r+0xaa2>
 800915c:	9b03      	ldr	r3, [sp, #12]
 800915e:	2b00      	cmp	r3, #0
 8009160:	dd02      	ble.n	8009168 <_dtoa_r+0xa58>
 8009162:	9b02      	ldr	r3, [sp, #8]
 8009164:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009168:	f88b a000 	strb.w	sl, [fp]
 800916c:	e775      	b.n	800905a <_dtoa_r+0x94a>
 800916e:	4638      	mov	r0, r7
 8009170:	e7ba      	b.n	80090e8 <_dtoa_r+0x9d8>
 8009172:	2201      	movs	r2, #1
 8009174:	e7e2      	b.n	800913c <_dtoa_r+0xa2c>
 8009176:	9b03      	ldr	r3, [sp, #12]
 8009178:	2b00      	cmp	r3, #0
 800917a:	db04      	blt.n	8009186 <_dtoa_r+0xa76>
 800917c:	9906      	ldr	r1, [sp, #24]
 800917e:	430b      	orrs	r3, r1
 8009180:	9904      	ldr	r1, [sp, #16]
 8009182:	430b      	orrs	r3, r1
 8009184:	d122      	bne.n	80091cc <_dtoa_r+0xabc>
 8009186:	2a00      	cmp	r2, #0
 8009188:	ddee      	ble.n	8009168 <_dtoa_r+0xa58>
 800918a:	ee18 1a10 	vmov	r1, s16
 800918e:	2201      	movs	r2, #1
 8009190:	4620      	mov	r0, r4
 8009192:	f000 fad7 	bl	8009744 <__lshift>
 8009196:	4631      	mov	r1, r6
 8009198:	ee08 0a10 	vmov	s16, r0
 800919c:	f000 fb42 	bl	8009824 <__mcmp>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	dc03      	bgt.n	80091ac <_dtoa_r+0xa9c>
 80091a4:	d1e0      	bne.n	8009168 <_dtoa_r+0xa58>
 80091a6:	f01a 0f01 	tst.w	sl, #1
 80091aa:	d0dd      	beq.n	8009168 <_dtoa_r+0xa58>
 80091ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80091b0:	d1d7      	bne.n	8009162 <_dtoa_r+0xa52>
 80091b2:	2339      	movs	r3, #57	; 0x39
 80091b4:	f88b 3000 	strb.w	r3, [fp]
 80091b8:	462b      	mov	r3, r5
 80091ba:	461d      	mov	r5, r3
 80091bc:	3b01      	subs	r3, #1
 80091be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80091c2:	2a39      	cmp	r2, #57	; 0x39
 80091c4:	d071      	beq.n	80092aa <_dtoa_r+0xb9a>
 80091c6:	3201      	adds	r2, #1
 80091c8:	701a      	strb	r2, [r3, #0]
 80091ca:	e746      	b.n	800905a <_dtoa_r+0x94a>
 80091cc:	2a00      	cmp	r2, #0
 80091ce:	dd07      	ble.n	80091e0 <_dtoa_r+0xad0>
 80091d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80091d4:	d0ed      	beq.n	80091b2 <_dtoa_r+0xaa2>
 80091d6:	f10a 0301 	add.w	r3, sl, #1
 80091da:	f88b 3000 	strb.w	r3, [fp]
 80091de:	e73c      	b.n	800905a <_dtoa_r+0x94a>
 80091e0:	9b05      	ldr	r3, [sp, #20]
 80091e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80091e6:	4599      	cmp	r9, r3
 80091e8:	d047      	beq.n	800927a <_dtoa_r+0xb6a>
 80091ea:	ee18 1a10 	vmov	r1, s16
 80091ee:	2300      	movs	r3, #0
 80091f0:	220a      	movs	r2, #10
 80091f2:	4620      	mov	r0, r4
 80091f4:	f000 f8f6 	bl	80093e4 <__multadd>
 80091f8:	45b8      	cmp	r8, r7
 80091fa:	ee08 0a10 	vmov	s16, r0
 80091fe:	f04f 0300 	mov.w	r3, #0
 8009202:	f04f 020a 	mov.w	r2, #10
 8009206:	4641      	mov	r1, r8
 8009208:	4620      	mov	r0, r4
 800920a:	d106      	bne.n	800921a <_dtoa_r+0xb0a>
 800920c:	f000 f8ea 	bl	80093e4 <__multadd>
 8009210:	4680      	mov	r8, r0
 8009212:	4607      	mov	r7, r0
 8009214:	f109 0901 	add.w	r9, r9, #1
 8009218:	e772      	b.n	8009100 <_dtoa_r+0x9f0>
 800921a:	f000 f8e3 	bl	80093e4 <__multadd>
 800921e:	4639      	mov	r1, r7
 8009220:	4680      	mov	r8, r0
 8009222:	2300      	movs	r3, #0
 8009224:	220a      	movs	r2, #10
 8009226:	4620      	mov	r0, r4
 8009228:	f000 f8dc 	bl	80093e4 <__multadd>
 800922c:	4607      	mov	r7, r0
 800922e:	e7f1      	b.n	8009214 <_dtoa_r+0xb04>
 8009230:	9b03      	ldr	r3, [sp, #12]
 8009232:	9302      	str	r3, [sp, #8]
 8009234:	9d01      	ldr	r5, [sp, #4]
 8009236:	ee18 0a10 	vmov	r0, s16
 800923a:	4631      	mov	r1, r6
 800923c:	f7ff f9dc 	bl	80085f8 <quorem>
 8009240:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009244:	9b01      	ldr	r3, [sp, #4]
 8009246:	f805 ab01 	strb.w	sl, [r5], #1
 800924a:	1aea      	subs	r2, r5, r3
 800924c:	9b02      	ldr	r3, [sp, #8]
 800924e:	4293      	cmp	r3, r2
 8009250:	dd09      	ble.n	8009266 <_dtoa_r+0xb56>
 8009252:	ee18 1a10 	vmov	r1, s16
 8009256:	2300      	movs	r3, #0
 8009258:	220a      	movs	r2, #10
 800925a:	4620      	mov	r0, r4
 800925c:	f000 f8c2 	bl	80093e4 <__multadd>
 8009260:	ee08 0a10 	vmov	s16, r0
 8009264:	e7e7      	b.n	8009236 <_dtoa_r+0xb26>
 8009266:	9b02      	ldr	r3, [sp, #8]
 8009268:	2b00      	cmp	r3, #0
 800926a:	bfc8      	it	gt
 800926c:	461d      	movgt	r5, r3
 800926e:	9b01      	ldr	r3, [sp, #4]
 8009270:	bfd8      	it	le
 8009272:	2501      	movle	r5, #1
 8009274:	441d      	add	r5, r3
 8009276:	f04f 0800 	mov.w	r8, #0
 800927a:	ee18 1a10 	vmov	r1, s16
 800927e:	2201      	movs	r2, #1
 8009280:	4620      	mov	r0, r4
 8009282:	f000 fa5f 	bl	8009744 <__lshift>
 8009286:	4631      	mov	r1, r6
 8009288:	ee08 0a10 	vmov	s16, r0
 800928c:	f000 faca 	bl	8009824 <__mcmp>
 8009290:	2800      	cmp	r0, #0
 8009292:	dc91      	bgt.n	80091b8 <_dtoa_r+0xaa8>
 8009294:	d102      	bne.n	800929c <_dtoa_r+0xb8c>
 8009296:	f01a 0f01 	tst.w	sl, #1
 800929a:	d18d      	bne.n	80091b8 <_dtoa_r+0xaa8>
 800929c:	462b      	mov	r3, r5
 800929e:	461d      	mov	r5, r3
 80092a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092a4:	2a30      	cmp	r2, #48	; 0x30
 80092a6:	d0fa      	beq.n	800929e <_dtoa_r+0xb8e>
 80092a8:	e6d7      	b.n	800905a <_dtoa_r+0x94a>
 80092aa:	9a01      	ldr	r2, [sp, #4]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d184      	bne.n	80091ba <_dtoa_r+0xaaa>
 80092b0:	9b00      	ldr	r3, [sp, #0]
 80092b2:	3301      	adds	r3, #1
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	2331      	movs	r3, #49	; 0x31
 80092b8:	7013      	strb	r3, [r2, #0]
 80092ba:	e6ce      	b.n	800905a <_dtoa_r+0x94a>
 80092bc:	4b09      	ldr	r3, [pc, #36]	; (80092e4 <_dtoa_r+0xbd4>)
 80092be:	f7ff ba95 	b.w	80087ec <_dtoa_r+0xdc>
 80092c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	f47f aa6e 	bne.w	80087a6 <_dtoa_r+0x96>
 80092ca:	4b07      	ldr	r3, [pc, #28]	; (80092e8 <_dtoa_r+0xbd8>)
 80092cc:	f7ff ba8e 	b.w	80087ec <_dtoa_r+0xdc>
 80092d0:	9b02      	ldr	r3, [sp, #8]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	dcae      	bgt.n	8009234 <_dtoa_r+0xb24>
 80092d6:	9b06      	ldr	r3, [sp, #24]
 80092d8:	2b02      	cmp	r3, #2
 80092da:	f73f aea8 	bgt.w	800902e <_dtoa_r+0x91e>
 80092de:	e7a9      	b.n	8009234 <_dtoa_r+0xb24>
 80092e0:	0800a873 	.word	0x0800a873
 80092e4:	0800a7d0 	.word	0x0800a7d0
 80092e8:	0800a7f4 	.word	0x0800a7f4

080092ec <_localeconv_r>:
 80092ec:	4800      	ldr	r0, [pc, #0]	; (80092f0 <_localeconv_r+0x4>)
 80092ee:	4770      	bx	lr
 80092f0:	20000160 	.word	0x20000160

080092f4 <malloc>:
 80092f4:	4b02      	ldr	r3, [pc, #8]	; (8009300 <malloc+0xc>)
 80092f6:	4601      	mov	r1, r0
 80092f8:	6818      	ldr	r0, [r3, #0]
 80092fa:	f000 bc17 	b.w	8009b2c <_malloc_r>
 80092fe:	bf00      	nop
 8009300:	2000000c 	.word	0x2000000c

08009304 <memcpy>:
 8009304:	440a      	add	r2, r1
 8009306:	4291      	cmp	r1, r2
 8009308:	f100 33ff 	add.w	r3, r0, #4294967295
 800930c:	d100      	bne.n	8009310 <memcpy+0xc>
 800930e:	4770      	bx	lr
 8009310:	b510      	push	{r4, lr}
 8009312:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009316:	f803 4f01 	strb.w	r4, [r3, #1]!
 800931a:	4291      	cmp	r1, r2
 800931c:	d1f9      	bne.n	8009312 <memcpy+0xe>
 800931e:	bd10      	pop	{r4, pc}

08009320 <_Balloc>:
 8009320:	b570      	push	{r4, r5, r6, lr}
 8009322:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009324:	4604      	mov	r4, r0
 8009326:	460d      	mov	r5, r1
 8009328:	b976      	cbnz	r6, 8009348 <_Balloc+0x28>
 800932a:	2010      	movs	r0, #16
 800932c:	f7ff ffe2 	bl	80092f4 <malloc>
 8009330:	4602      	mov	r2, r0
 8009332:	6260      	str	r0, [r4, #36]	; 0x24
 8009334:	b920      	cbnz	r0, 8009340 <_Balloc+0x20>
 8009336:	4b18      	ldr	r3, [pc, #96]	; (8009398 <_Balloc+0x78>)
 8009338:	4818      	ldr	r0, [pc, #96]	; (800939c <_Balloc+0x7c>)
 800933a:	2166      	movs	r1, #102	; 0x66
 800933c:	f000 fc7a 	bl	8009c34 <__assert_func>
 8009340:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009344:	6006      	str	r6, [r0, #0]
 8009346:	60c6      	str	r6, [r0, #12]
 8009348:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800934a:	68f3      	ldr	r3, [r6, #12]
 800934c:	b183      	cbz	r3, 8009370 <_Balloc+0x50>
 800934e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009356:	b9b8      	cbnz	r0, 8009388 <_Balloc+0x68>
 8009358:	2101      	movs	r1, #1
 800935a:	fa01 f605 	lsl.w	r6, r1, r5
 800935e:	1d72      	adds	r2, r6, #5
 8009360:	0092      	lsls	r2, r2, #2
 8009362:	4620      	mov	r0, r4
 8009364:	f000 fb60 	bl	8009a28 <_calloc_r>
 8009368:	b160      	cbz	r0, 8009384 <_Balloc+0x64>
 800936a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800936e:	e00e      	b.n	800938e <_Balloc+0x6e>
 8009370:	2221      	movs	r2, #33	; 0x21
 8009372:	2104      	movs	r1, #4
 8009374:	4620      	mov	r0, r4
 8009376:	f000 fb57 	bl	8009a28 <_calloc_r>
 800937a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800937c:	60f0      	str	r0, [r6, #12]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d1e4      	bne.n	800934e <_Balloc+0x2e>
 8009384:	2000      	movs	r0, #0
 8009386:	bd70      	pop	{r4, r5, r6, pc}
 8009388:	6802      	ldr	r2, [r0, #0]
 800938a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800938e:	2300      	movs	r3, #0
 8009390:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009394:	e7f7      	b.n	8009386 <_Balloc+0x66>
 8009396:	bf00      	nop
 8009398:	0800a801 	.word	0x0800a801
 800939c:	0800a884 	.word	0x0800a884

080093a0 <_Bfree>:
 80093a0:	b570      	push	{r4, r5, r6, lr}
 80093a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80093a4:	4605      	mov	r5, r0
 80093a6:	460c      	mov	r4, r1
 80093a8:	b976      	cbnz	r6, 80093c8 <_Bfree+0x28>
 80093aa:	2010      	movs	r0, #16
 80093ac:	f7ff ffa2 	bl	80092f4 <malloc>
 80093b0:	4602      	mov	r2, r0
 80093b2:	6268      	str	r0, [r5, #36]	; 0x24
 80093b4:	b920      	cbnz	r0, 80093c0 <_Bfree+0x20>
 80093b6:	4b09      	ldr	r3, [pc, #36]	; (80093dc <_Bfree+0x3c>)
 80093b8:	4809      	ldr	r0, [pc, #36]	; (80093e0 <_Bfree+0x40>)
 80093ba:	218a      	movs	r1, #138	; 0x8a
 80093bc:	f000 fc3a 	bl	8009c34 <__assert_func>
 80093c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093c4:	6006      	str	r6, [r0, #0]
 80093c6:	60c6      	str	r6, [r0, #12]
 80093c8:	b13c      	cbz	r4, 80093da <_Bfree+0x3a>
 80093ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80093cc:	6862      	ldr	r2, [r4, #4]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093d4:	6021      	str	r1, [r4, #0]
 80093d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80093da:	bd70      	pop	{r4, r5, r6, pc}
 80093dc:	0800a801 	.word	0x0800a801
 80093e0:	0800a884 	.word	0x0800a884

080093e4 <__multadd>:
 80093e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093e8:	690d      	ldr	r5, [r1, #16]
 80093ea:	4607      	mov	r7, r0
 80093ec:	460c      	mov	r4, r1
 80093ee:	461e      	mov	r6, r3
 80093f0:	f101 0c14 	add.w	ip, r1, #20
 80093f4:	2000      	movs	r0, #0
 80093f6:	f8dc 3000 	ldr.w	r3, [ip]
 80093fa:	b299      	uxth	r1, r3
 80093fc:	fb02 6101 	mla	r1, r2, r1, r6
 8009400:	0c1e      	lsrs	r6, r3, #16
 8009402:	0c0b      	lsrs	r3, r1, #16
 8009404:	fb02 3306 	mla	r3, r2, r6, r3
 8009408:	b289      	uxth	r1, r1
 800940a:	3001      	adds	r0, #1
 800940c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009410:	4285      	cmp	r5, r0
 8009412:	f84c 1b04 	str.w	r1, [ip], #4
 8009416:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800941a:	dcec      	bgt.n	80093f6 <__multadd+0x12>
 800941c:	b30e      	cbz	r6, 8009462 <__multadd+0x7e>
 800941e:	68a3      	ldr	r3, [r4, #8]
 8009420:	42ab      	cmp	r3, r5
 8009422:	dc19      	bgt.n	8009458 <__multadd+0x74>
 8009424:	6861      	ldr	r1, [r4, #4]
 8009426:	4638      	mov	r0, r7
 8009428:	3101      	adds	r1, #1
 800942a:	f7ff ff79 	bl	8009320 <_Balloc>
 800942e:	4680      	mov	r8, r0
 8009430:	b928      	cbnz	r0, 800943e <__multadd+0x5a>
 8009432:	4602      	mov	r2, r0
 8009434:	4b0c      	ldr	r3, [pc, #48]	; (8009468 <__multadd+0x84>)
 8009436:	480d      	ldr	r0, [pc, #52]	; (800946c <__multadd+0x88>)
 8009438:	21b5      	movs	r1, #181	; 0xb5
 800943a:	f000 fbfb 	bl	8009c34 <__assert_func>
 800943e:	6922      	ldr	r2, [r4, #16]
 8009440:	3202      	adds	r2, #2
 8009442:	f104 010c 	add.w	r1, r4, #12
 8009446:	0092      	lsls	r2, r2, #2
 8009448:	300c      	adds	r0, #12
 800944a:	f7ff ff5b 	bl	8009304 <memcpy>
 800944e:	4621      	mov	r1, r4
 8009450:	4638      	mov	r0, r7
 8009452:	f7ff ffa5 	bl	80093a0 <_Bfree>
 8009456:	4644      	mov	r4, r8
 8009458:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800945c:	3501      	adds	r5, #1
 800945e:	615e      	str	r6, [r3, #20]
 8009460:	6125      	str	r5, [r4, #16]
 8009462:	4620      	mov	r0, r4
 8009464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009468:	0800a873 	.word	0x0800a873
 800946c:	0800a884 	.word	0x0800a884

08009470 <__hi0bits>:
 8009470:	0c03      	lsrs	r3, r0, #16
 8009472:	041b      	lsls	r3, r3, #16
 8009474:	b9d3      	cbnz	r3, 80094ac <__hi0bits+0x3c>
 8009476:	0400      	lsls	r0, r0, #16
 8009478:	2310      	movs	r3, #16
 800947a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800947e:	bf04      	itt	eq
 8009480:	0200      	lsleq	r0, r0, #8
 8009482:	3308      	addeq	r3, #8
 8009484:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009488:	bf04      	itt	eq
 800948a:	0100      	lsleq	r0, r0, #4
 800948c:	3304      	addeq	r3, #4
 800948e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009492:	bf04      	itt	eq
 8009494:	0080      	lsleq	r0, r0, #2
 8009496:	3302      	addeq	r3, #2
 8009498:	2800      	cmp	r0, #0
 800949a:	db05      	blt.n	80094a8 <__hi0bits+0x38>
 800949c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80094a0:	f103 0301 	add.w	r3, r3, #1
 80094a4:	bf08      	it	eq
 80094a6:	2320      	moveq	r3, #32
 80094a8:	4618      	mov	r0, r3
 80094aa:	4770      	bx	lr
 80094ac:	2300      	movs	r3, #0
 80094ae:	e7e4      	b.n	800947a <__hi0bits+0xa>

080094b0 <__lo0bits>:
 80094b0:	6803      	ldr	r3, [r0, #0]
 80094b2:	f013 0207 	ands.w	r2, r3, #7
 80094b6:	4601      	mov	r1, r0
 80094b8:	d00b      	beq.n	80094d2 <__lo0bits+0x22>
 80094ba:	07da      	lsls	r2, r3, #31
 80094bc:	d423      	bmi.n	8009506 <__lo0bits+0x56>
 80094be:	0798      	lsls	r0, r3, #30
 80094c0:	bf49      	itett	mi
 80094c2:	085b      	lsrmi	r3, r3, #1
 80094c4:	089b      	lsrpl	r3, r3, #2
 80094c6:	2001      	movmi	r0, #1
 80094c8:	600b      	strmi	r3, [r1, #0]
 80094ca:	bf5c      	itt	pl
 80094cc:	600b      	strpl	r3, [r1, #0]
 80094ce:	2002      	movpl	r0, #2
 80094d0:	4770      	bx	lr
 80094d2:	b298      	uxth	r0, r3
 80094d4:	b9a8      	cbnz	r0, 8009502 <__lo0bits+0x52>
 80094d6:	0c1b      	lsrs	r3, r3, #16
 80094d8:	2010      	movs	r0, #16
 80094da:	b2da      	uxtb	r2, r3
 80094dc:	b90a      	cbnz	r2, 80094e2 <__lo0bits+0x32>
 80094de:	3008      	adds	r0, #8
 80094e0:	0a1b      	lsrs	r3, r3, #8
 80094e2:	071a      	lsls	r2, r3, #28
 80094e4:	bf04      	itt	eq
 80094e6:	091b      	lsreq	r3, r3, #4
 80094e8:	3004      	addeq	r0, #4
 80094ea:	079a      	lsls	r2, r3, #30
 80094ec:	bf04      	itt	eq
 80094ee:	089b      	lsreq	r3, r3, #2
 80094f0:	3002      	addeq	r0, #2
 80094f2:	07da      	lsls	r2, r3, #31
 80094f4:	d403      	bmi.n	80094fe <__lo0bits+0x4e>
 80094f6:	085b      	lsrs	r3, r3, #1
 80094f8:	f100 0001 	add.w	r0, r0, #1
 80094fc:	d005      	beq.n	800950a <__lo0bits+0x5a>
 80094fe:	600b      	str	r3, [r1, #0]
 8009500:	4770      	bx	lr
 8009502:	4610      	mov	r0, r2
 8009504:	e7e9      	b.n	80094da <__lo0bits+0x2a>
 8009506:	2000      	movs	r0, #0
 8009508:	4770      	bx	lr
 800950a:	2020      	movs	r0, #32
 800950c:	4770      	bx	lr
	...

08009510 <__i2b>:
 8009510:	b510      	push	{r4, lr}
 8009512:	460c      	mov	r4, r1
 8009514:	2101      	movs	r1, #1
 8009516:	f7ff ff03 	bl	8009320 <_Balloc>
 800951a:	4602      	mov	r2, r0
 800951c:	b928      	cbnz	r0, 800952a <__i2b+0x1a>
 800951e:	4b05      	ldr	r3, [pc, #20]	; (8009534 <__i2b+0x24>)
 8009520:	4805      	ldr	r0, [pc, #20]	; (8009538 <__i2b+0x28>)
 8009522:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009526:	f000 fb85 	bl	8009c34 <__assert_func>
 800952a:	2301      	movs	r3, #1
 800952c:	6144      	str	r4, [r0, #20]
 800952e:	6103      	str	r3, [r0, #16]
 8009530:	bd10      	pop	{r4, pc}
 8009532:	bf00      	nop
 8009534:	0800a873 	.word	0x0800a873
 8009538:	0800a884 	.word	0x0800a884

0800953c <__multiply>:
 800953c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009540:	4691      	mov	r9, r2
 8009542:	690a      	ldr	r2, [r1, #16]
 8009544:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009548:	429a      	cmp	r2, r3
 800954a:	bfb8      	it	lt
 800954c:	460b      	movlt	r3, r1
 800954e:	460c      	mov	r4, r1
 8009550:	bfbc      	itt	lt
 8009552:	464c      	movlt	r4, r9
 8009554:	4699      	movlt	r9, r3
 8009556:	6927      	ldr	r7, [r4, #16]
 8009558:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800955c:	68a3      	ldr	r3, [r4, #8]
 800955e:	6861      	ldr	r1, [r4, #4]
 8009560:	eb07 060a 	add.w	r6, r7, sl
 8009564:	42b3      	cmp	r3, r6
 8009566:	b085      	sub	sp, #20
 8009568:	bfb8      	it	lt
 800956a:	3101      	addlt	r1, #1
 800956c:	f7ff fed8 	bl	8009320 <_Balloc>
 8009570:	b930      	cbnz	r0, 8009580 <__multiply+0x44>
 8009572:	4602      	mov	r2, r0
 8009574:	4b44      	ldr	r3, [pc, #272]	; (8009688 <__multiply+0x14c>)
 8009576:	4845      	ldr	r0, [pc, #276]	; (800968c <__multiply+0x150>)
 8009578:	f240 115d 	movw	r1, #349	; 0x15d
 800957c:	f000 fb5a 	bl	8009c34 <__assert_func>
 8009580:	f100 0514 	add.w	r5, r0, #20
 8009584:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009588:	462b      	mov	r3, r5
 800958a:	2200      	movs	r2, #0
 800958c:	4543      	cmp	r3, r8
 800958e:	d321      	bcc.n	80095d4 <__multiply+0x98>
 8009590:	f104 0314 	add.w	r3, r4, #20
 8009594:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009598:	f109 0314 	add.w	r3, r9, #20
 800959c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80095a0:	9202      	str	r2, [sp, #8]
 80095a2:	1b3a      	subs	r2, r7, r4
 80095a4:	3a15      	subs	r2, #21
 80095a6:	f022 0203 	bic.w	r2, r2, #3
 80095aa:	3204      	adds	r2, #4
 80095ac:	f104 0115 	add.w	r1, r4, #21
 80095b0:	428f      	cmp	r7, r1
 80095b2:	bf38      	it	cc
 80095b4:	2204      	movcc	r2, #4
 80095b6:	9201      	str	r2, [sp, #4]
 80095b8:	9a02      	ldr	r2, [sp, #8]
 80095ba:	9303      	str	r3, [sp, #12]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d80c      	bhi.n	80095da <__multiply+0x9e>
 80095c0:	2e00      	cmp	r6, #0
 80095c2:	dd03      	ble.n	80095cc <__multiply+0x90>
 80095c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d05a      	beq.n	8009682 <__multiply+0x146>
 80095cc:	6106      	str	r6, [r0, #16]
 80095ce:	b005      	add	sp, #20
 80095d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095d4:	f843 2b04 	str.w	r2, [r3], #4
 80095d8:	e7d8      	b.n	800958c <__multiply+0x50>
 80095da:	f8b3 a000 	ldrh.w	sl, [r3]
 80095de:	f1ba 0f00 	cmp.w	sl, #0
 80095e2:	d024      	beq.n	800962e <__multiply+0xf2>
 80095e4:	f104 0e14 	add.w	lr, r4, #20
 80095e8:	46a9      	mov	r9, r5
 80095ea:	f04f 0c00 	mov.w	ip, #0
 80095ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80095f2:	f8d9 1000 	ldr.w	r1, [r9]
 80095f6:	fa1f fb82 	uxth.w	fp, r2
 80095fa:	b289      	uxth	r1, r1
 80095fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8009600:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009604:	f8d9 2000 	ldr.w	r2, [r9]
 8009608:	4461      	add	r1, ip
 800960a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800960e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009612:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009616:	b289      	uxth	r1, r1
 8009618:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800961c:	4577      	cmp	r7, lr
 800961e:	f849 1b04 	str.w	r1, [r9], #4
 8009622:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009626:	d8e2      	bhi.n	80095ee <__multiply+0xb2>
 8009628:	9a01      	ldr	r2, [sp, #4]
 800962a:	f845 c002 	str.w	ip, [r5, r2]
 800962e:	9a03      	ldr	r2, [sp, #12]
 8009630:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009634:	3304      	adds	r3, #4
 8009636:	f1b9 0f00 	cmp.w	r9, #0
 800963a:	d020      	beq.n	800967e <__multiply+0x142>
 800963c:	6829      	ldr	r1, [r5, #0]
 800963e:	f104 0c14 	add.w	ip, r4, #20
 8009642:	46ae      	mov	lr, r5
 8009644:	f04f 0a00 	mov.w	sl, #0
 8009648:	f8bc b000 	ldrh.w	fp, [ip]
 800964c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009650:	fb09 220b 	mla	r2, r9, fp, r2
 8009654:	4492      	add	sl, r2
 8009656:	b289      	uxth	r1, r1
 8009658:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800965c:	f84e 1b04 	str.w	r1, [lr], #4
 8009660:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009664:	f8be 1000 	ldrh.w	r1, [lr]
 8009668:	0c12      	lsrs	r2, r2, #16
 800966a:	fb09 1102 	mla	r1, r9, r2, r1
 800966e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009672:	4567      	cmp	r7, ip
 8009674:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009678:	d8e6      	bhi.n	8009648 <__multiply+0x10c>
 800967a:	9a01      	ldr	r2, [sp, #4]
 800967c:	50a9      	str	r1, [r5, r2]
 800967e:	3504      	adds	r5, #4
 8009680:	e79a      	b.n	80095b8 <__multiply+0x7c>
 8009682:	3e01      	subs	r6, #1
 8009684:	e79c      	b.n	80095c0 <__multiply+0x84>
 8009686:	bf00      	nop
 8009688:	0800a873 	.word	0x0800a873
 800968c:	0800a884 	.word	0x0800a884

08009690 <__pow5mult>:
 8009690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009694:	4615      	mov	r5, r2
 8009696:	f012 0203 	ands.w	r2, r2, #3
 800969a:	4606      	mov	r6, r0
 800969c:	460f      	mov	r7, r1
 800969e:	d007      	beq.n	80096b0 <__pow5mult+0x20>
 80096a0:	4c25      	ldr	r4, [pc, #148]	; (8009738 <__pow5mult+0xa8>)
 80096a2:	3a01      	subs	r2, #1
 80096a4:	2300      	movs	r3, #0
 80096a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096aa:	f7ff fe9b 	bl	80093e4 <__multadd>
 80096ae:	4607      	mov	r7, r0
 80096b0:	10ad      	asrs	r5, r5, #2
 80096b2:	d03d      	beq.n	8009730 <__pow5mult+0xa0>
 80096b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80096b6:	b97c      	cbnz	r4, 80096d8 <__pow5mult+0x48>
 80096b8:	2010      	movs	r0, #16
 80096ba:	f7ff fe1b 	bl	80092f4 <malloc>
 80096be:	4602      	mov	r2, r0
 80096c0:	6270      	str	r0, [r6, #36]	; 0x24
 80096c2:	b928      	cbnz	r0, 80096d0 <__pow5mult+0x40>
 80096c4:	4b1d      	ldr	r3, [pc, #116]	; (800973c <__pow5mult+0xac>)
 80096c6:	481e      	ldr	r0, [pc, #120]	; (8009740 <__pow5mult+0xb0>)
 80096c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80096cc:	f000 fab2 	bl	8009c34 <__assert_func>
 80096d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096d4:	6004      	str	r4, [r0, #0]
 80096d6:	60c4      	str	r4, [r0, #12]
 80096d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80096dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096e0:	b94c      	cbnz	r4, 80096f6 <__pow5mult+0x66>
 80096e2:	f240 2171 	movw	r1, #625	; 0x271
 80096e6:	4630      	mov	r0, r6
 80096e8:	f7ff ff12 	bl	8009510 <__i2b>
 80096ec:	2300      	movs	r3, #0
 80096ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80096f2:	4604      	mov	r4, r0
 80096f4:	6003      	str	r3, [r0, #0]
 80096f6:	f04f 0900 	mov.w	r9, #0
 80096fa:	07eb      	lsls	r3, r5, #31
 80096fc:	d50a      	bpl.n	8009714 <__pow5mult+0x84>
 80096fe:	4639      	mov	r1, r7
 8009700:	4622      	mov	r2, r4
 8009702:	4630      	mov	r0, r6
 8009704:	f7ff ff1a 	bl	800953c <__multiply>
 8009708:	4639      	mov	r1, r7
 800970a:	4680      	mov	r8, r0
 800970c:	4630      	mov	r0, r6
 800970e:	f7ff fe47 	bl	80093a0 <_Bfree>
 8009712:	4647      	mov	r7, r8
 8009714:	106d      	asrs	r5, r5, #1
 8009716:	d00b      	beq.n	8009730 <__pow5mult+0xa0>
 8009718:	6820      	ldr	r0, [r4, #0]
 800971a:	b938      	cbnz	r0, 800972c <__pow5mult+0x9c>
 800971c:	4622      	mov	r2, r4
 800971e:	4621      	mov	r1, r4
 8009720:	4630      	mov	r0, r6
 8009722:	f7ff ff0b 	bl	800953c <__multiply>
 8009726:	6020      	str	r0, [r4, #0]
 8009728:	f8c0 9000 	str.w	r9, [r0]
 800972c:	4604      	mov	r4, r0
 800972e:	e7e4      	b.n	80096fa <__pow5mult+0x6a>
 8009730:	4638      	mov	r0, r7
 8009732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009736:	bf00      	nop
 8009738:	0800a9d0 	.word	0x0800a9d0
 800973c:	0800a801 	.word	0x0800a801
 8009740:	0800a884 	.word	0x0800a884

08009744 <__lshift>:
 8009744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009748:	460c      	mov	r4, r1
 800974a:	6849      	ldr	r1, [r1, #4]
 800974c:	6923      	ldr	r3, [r4, #16]
 800974e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009752:	68a3      	ldr	r3, [r4, #8]
 8009754:	4607      	mov	r7, r0
 8009756:	4691      	mov	r9, r2
 8009758:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800975c:	f108 0601 	add.w	r6, r8, #1
 8009760:	42b3      	cmp	r3, r6
 8009762:	db0b      	blt.n	800977c <__lshift+0x38>
 8009764:	4638      	mov	r0, r7
 8009766:	f7ff fddb 	bl	8009320 <_Balloc>
 800976a:	4605      	mov	r5, r0
 800976c:	b948      	cbnz	r0, 8009782 <__lshift+0x3e>
 800976e:	4602      	mov	r2, r0
 8009770:	4b2a      	ldr	r3, [pc, #168]	; (800981c <__lshift+0xd8>)
 8009772:	482b      	ldr	r0, [pc, #172]	; (8009820 <__lshift+0xdc>)
 8009774:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009778:	f000 fa5c 	bl	8009c34 <__assert_func>
 800977c:	3101      	adds	r1, #1
 800977e:	005b      	lsls	r3, r3, #1
 8009780:	e7ee      	b.n	8009760 <__lshift+0x1c>
 8009782:	2300      	movs	r3, #0
 8009784:	f100 0114 	add.w	r1, r0, #20
 8009788:	f100 0210 	add.w	r2, r0, #16
 800978c:	4618      	mov	r0, r3
 800978e:	4553      	cmp	r3, sl
 8009790:	db37      	blt.n	8009802 <__lshift+0xbe>
 8009792:	6920      	ldr	r0, [r4, #16]
 8009794:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009798:	f104 0314 	add.w	r3, r4, #20
 800979c:	f019 091f 	ands.w	r9, r9, #31
 80097a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80097a8:	d02f      	beq.n	800980a <__lshift+0xc6>
 80097aa:	f1c9 0e20 	rsb	lr, r9, #32
 80097ae:	468a      	mov	sl, r1
 80097b0:	f04f 0c00 	mov.w	ip, #0
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	fa02 f209 	lsl.w	r2, r2, r9
 80097ba:	ea42 020c 	orr.w	r2, r2, ip
 80097be:	f84a 2b04 	str.w	r2, [sl], #4
 80097c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80097c6:	4298      	cmp	r0, r3
 80097c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80097cc:	d8f2      	bhi.n	80097b4 <__lshift+0x70>
 80097ce:	1b03      	subs	r3, r0, r4
 80097d0:	3b15      	subs	r3, #21
 80097d2:	f023 0303 	bic.w	r3, r3, #3
 80097d6:	3304      	adds	r3, #4
 80097d8:	f104 0215 	add.w	r2, r4, #21
 80097dc:	4290      	cmp	r0, r2
 80097de:	bf38      	it	cc
 80097e0:	2304      	movcc	r3, #4
 80097e2:	f841 c003 	str.w	ip, [r1, r3]
 80097e6:	f1bc 0f00 	cmp.w	ip, #0
 80097ea:	d001      	beq.n	80097f0 <__lshift+0xac>
 80097ec:	f108 0602 	add.w	r6, r8, #2
 80097f0:	3e01      	subs	r6, #1
 80097f2:	4638      	mov	r0, r7
 80097f4:	612e      	str	r6, [r5, #16]
 80097f6:	4621      	mov	r1, r4
 80097f8:	f7ff fdd2 	bl	80093a0 <_Bfree>
 80097fc:	4628      	mov	r0, r5
 80097fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009802:	f842 0f04 	str.w	r0, [r2, #4]!
 8009806:	3301      	adds	r3, #1
 8009808:	e7c1      	b.n	800978e <__lshift+0x4a>
 800980a:	3904      	subs	r1, #4
 800980c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009810:	f841 2f04 	str.w	r2, [r1, #4]!
 8009814:	4298      	cmp	r0, r3
 8009816:	d8f9      	bhi.n	800980c <__lshift+0xc8>
 8009818:	e7ea      	b.n	80097f0 <__lshift+0xac>
 800981a:	bf00      	nop
 800981c:	0800a873 	.word	0x0800a873
 8009820:	0800a884 	.word	0x0800a884

08009824 <__mcmp>:
 8009824:	b530      	push	{r4, r5, lr}
 8009826:	6902      	ldr	r2, [r0, #16]
 8009828:	690c      	ldr	r4, [r1, #16]
 800982a:	1b12      	subs	r2, r2, r4
 800982c:	d10e      	bne.n	800984c <__mcmp+0x28>
 800982e:	f100 0314 	add.w	r3, r0, #20
 8009832:	3114      	adds	r1, #20
 8009834:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009838:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800983c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009840:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009844:	42a5      	cmp	r5, r4
 8009846:	d003      	beq.n	8009850 <__mcmp+0x2c>
 8009848:	d305      	bcc.n	8009856 <__mcmp+0x32>
 800984a:	2201      	movs	r2, #1
 800984c:	4610      	mov	r0, r2
 800984e:	bd30      	pop	{r4, r5, pc}
 8009850:	4283      	cmp	r3, r0
 8009852:	d3f3      	bcc.n	800983c <__mcmp+0x18>
 8009854:	e7fa      	b.n	800984c <__mcmp+0x28>
 8009856:	f04f 32ff 	mov.w	r2, #4294967295
 800985a:	e7f7      	b.n	800984c <__mcmp+0x28>

0800985c <__mdiff>:
 800985c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009860:	460c      	mov	r4, r1
 8009862:	4606      	mov	r6, r0
 8009864:	4611      	mov	r1, r2
 8009866:	4620      	mov	r0, r4
 8009868:	4690      	mov	r8, r2
 800986a:	f7ff ffdb 	bl	8009824 <__mcmp>
 800986e:	1e05      	subs	r5, r0, #0
 8009870:	d110      	bne.n	8009894 <__mdiff+0x38>
 8009872:	4629      	mov	r1, r5
 8009874:	4630      	mov	r0, r6
 8009876:	f7ff fd53 	bl	8009320 <_Balloc>
 800987a:	b930      	cbnz	r0, 800988a <__mdiff+0x2e>
 800987c:	4b3a      	ldr	r3, [pc, #232]	; (8009968 <__mdiff+0x10c>)
 800987e:	4602      	mov	r2, r0
 8009880:	f240 2132 	movw	r1, #562	; 0x232
 8009884:	4839      	ldr	r0, [pc, #228]	; (800996c <__mdiff+0x110>)
 8009886:	f000 f9d5 	bl	8009c34 <__assert_func>
 800988a:	2301      	movs	r3, #1
 800988c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009890:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009894:	bfa4      	itt	ge
 8009896:	4643      	movge	r3, r8
 8009898:	46a0      	movge	r8, r4
 800989a:	4630      	mov	r0, r6
 800989c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80098a0:	bfa6      	itte	ge
 80098a2:	461c      	movge	r4, r3
 80098a4:	2500      	movge	r5, #0
 80098a6:	2501      	movlt	r5, #1
 80098a8:	f7ff fd3a 	bl	8009320 <_Balloc>
 80098ac:	b920      	cbnz	r0, 80098b8 <__mdiff+0x5c>
 80098ae:	4b2e      	ldr	r3, [pc, #184]	; (8009968 <__mdiff+0x10c>)
 80098b0:	4602      	mov	r2, r0
 80098b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80098b6:	e7e5      	b.n	8009884 <__mdiff+0x28>
 80098b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80098bc:	6926      	ldr	r6, [r4, #16]
 80098be:	60c5      	str	r5, [r0, #12]
 80098c0:	f104 0914 	add.w	r9, r4, #20
 80098c4:	f108 0514 	add.w	r5, r8, #20
 80098c8:	f100 0e14 	add.w	lr, r0, #20
 80098cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80098d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80098d4:	f108 0210 	add.w	r2, r8, #16
 80098d8:	46f2      	mov	sl, lr
 80098da:	2100      	movs	r1, #0
 80098dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80098e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80098e4:	fa1f f883 	uxth.w	r8, r3
 80098e8:	fa11 f18b 	uxtah	r1, r1, fp
 80098ec:	0c1b      	lsrs	r3, r3, #16
 80098ee:	eba1 0808 	sub.w	r8, r1, r8
 80098f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80098f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80098fa:	fa1f f888 	uxth.w	r8, r8
 80098fe:	1419      	asrs	r1, r3, #16
 8009900:	454e      	cmp	r6, r9
 8009902:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009906:	f84a 3b04 	str.w	r3, [sl], #4
 800990a:	d8e7      	bhi.n	80098dc <__mdiff+0x80>
 800990c:	1b33      	subs	r3, r6, r4
 800990e:	3b15      	subs	r3, #21
 8009910:	f023 0303 	bic.w	r3, r3, #3
 8009914:	3304      	adds	r3, #4
 8009916:	3415      	adds	r4, #21
 8009918:	42a6      	cmp	r6, r4
 800991a:	bf38      	it	cc
 800991c:	2304      	movcc	r3, #4
 800991e:	441d      	add	r5, r3
 8009920:	4473      	add	r3, lr
 8009922:	469e      	mov	lr, r3
 8009924:	462e      	mov	r6, r5
 8009926:	4566      	cmp	r6, ip
 8009928:	d30e      	bcc.n	8009948 <__mdiff+0xec>
 800992a:	f10c 0203 	add.w	r2, ip, #3
 800992e:	1b52      	subs	r2, r2, r5
 8009930:	f022 0203 	bic.w	r2, r2, #3
 8009934:	3d03      	subs	r5, #3
 8009936:	45ac      	cmp	ip, r5
 8009938:	bf38      	it	cc
 800993a:	2200      	movcc	r2, #0
 800993c:	441a      	add	r2, r3
 800993e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009942:	b17b      	cbz	r3, 8009964 <__mdiff+0x108>
 8009944:	6107      	str	r7, [r0, #16]
 8009946:	e7a3      	b.n	8009890 <__mdiff+0x34>
 8009948:	f856 8b04 	ldr.w	r8, [r6], #4
 800994c:	fa11 f288 	uxtah	r2, r1, r8
 8009950:	1414      	asrs	r4, r2, #16
 8009952:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009956:	b292      	uxth	r2, r2
 8009958:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800995c:	f84e 2b04 	str.w	r2, [lr], #4
 8009960:	1421      	asrs	r1, r4, #16
 8009962:	e7e0      	b.n	8009926 <__mdiff+0xca>
 8009964:	3f01      	subs	r7, #1
 8009966:	e7ea      	b.n	800993e <__mdiff+0xe2>
 8009968:	0800a873 	.word	0x0800a873
 800996c:	0800a884 	.word	0x0800a884

08009970 <__d2b>:
 8009970:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009974:	4689      	mov	r9, r1
 8009976:	2101      	movs	r1, #1
 8009978:	ec57 6b10 	vmov	r6, r7, d0
 800997c:	4690      	mov	r8, r2
 800997e:	f7ff fccf 	bl	8009320 <_Balloc>
 8009982:	4604      	mov	r4, r0
 8009984:	b930      	cbnz	r0, 8009994 <__d2b+0x24>
 8009986:	4602      	mov	r2, r0
 8009988:	4b25      	ldr	r3, [pc, #148]	; (8009a20 <__d2b+0xb0>)
 800998a:	4826      	ldr	r0, [pc, #152]	; (8009a24 <__d2b+0xb4>)
 800998c:	f240 310a 	movw	r1, #778	; 0x30a
 8009990:	f000 f950 	bl	8009c34 <__assert_func>
 8009994:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009998:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800999c:	bb35      	cbnz	r5, 80099ec <__d2b+0x7c>
 800999e:	2e00      	cmp	r6, #0
 80099a0:	9301      	str	r3, [sp, #4]
 80099a2:	d028      	beq.n	80099f6 <__d2b+0x86>
 80099a4:	4668      	mov	r0, sp
 80099a6:	9600      	str	r6, [sp, #0]
 80099a8:	f7ff fd82 	bl	80094b0 <__lo0bits>
 80099ac:	9900      	ldr	r1, [sp, #0]
 80099ae:	b300      	cbz	r0, 80099f2 <__d2b+0x82>
 80099b0:	9a01      	ldr	r2, [sp, #4]
 80099b2:	f1c0 0320 	rsb	r3, r0, #32
 80099b6:	fa02 f303 	lsl.w	r3, r2, r3
 80099ba:	430b      	orrs	r3, r1
 80099bc:	40c2      	lsrs	r2, r0
 80099be:	6163      	str	r3, [r4, #20]
 80099c0:	9201      	str	r2, [sp, #4]
 80099c2:	9b01      	ldr	r3, [sp, #4]
 80099c4:	61a3      	str	r3, [r4, #24]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	bf14      	ite	ne
 80099ca:	2202      	movne	r2, #2
 80099cc:	2201      	moveq	r2, #1
 80099ce:	6122      	str	r2, [r4, #16]
 80099d0:	b1d5      	cbz	r5, 8009a08 <__d2b+0x98>
 80099d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80099d6:	4405      	add	r5, r0
 80099d8:	f8c9 5000 	str.w	r5, [r9]
 80099dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80099e0:	f8c8 0000 	str.w	r0, [r8]
 80099e4:	4620      	mov	r0, r4
 80099e6:	b003      	add	sp, #12
 80099e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099f0:	e7d5      	b.n	800999e <__d2b+0x2e>
 80099f2:	6161      	str	r1, [r4, #20]
 80099f4:	e7e5      	b.n	80099c2 <__d2b+0x52>
 80099f6:	a801      	add	r0, sp, #4
 80099f8:	f7ff fd5a 	bl	80094b0 <__lo0bits>
 80099fc:	9b01      	ldr	r3, [sp, #4]
 80099fe:	6163      	str	r3, [r4, #20]
 8009a00:	2201      	movs	r2, #1
 8009a02:	6122      	str	r2, [r4, #16]
 8009a04:	3020      	adds	r0, #32
 8009a06:	e7e3      	b.n	80099d0 <__d2b+0x60>
 8009a08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a10:	f8c9 0000 	str.w	r0, [r9]
 8009a14:	6918      	ldr	r0, [r3, #16]
 8009a16:	f7ff fd2b 	bl	8009470 <__hi0bits>
 8009a1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a1e:	e7df      	b.n	80099e0 <__d2b+0x70>
 8009a20:	0800a873 	.word	0x0800a873
 8009a24:	0800a884 	.word	0x0800a884

08009a28 <_calloc_r>:
 8009a28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a2a:	fba1 2402 	umull	r2, r4, r1, r2
 8009a2e:	b94c      	cbnz	r4, 8009a44 <_calloc_r+0x1c>
 8009a30:	4611      	mov	r1, r2
 8009a32:	9201      	str	r2, [sp, #4]
 8009a34:	f000 f87a 	bl	8009b2c <_malloc_r>
 8009a38:	9a01      	ldr	r2, [sp, #4]
 8009a3a:	4605      	mov	r5, r0
 8009a3c:	b930      	cbnz	r0, 8009a4c <_calloc_r+0x24>
 8009a3e:	4628      	mov	r0, r5
 8009a40:	b003      	add	sp, #12
 8009a42:	bd30      	pop	{r4, r5, pc}
 8009a44:	220c      	movs	r2, #12
 8009a46:	6002      	str	r2, [r0, #0]
 8009a48:	2500      	movs	r5, #0
 8009a4a:	e7f8      	b.n	8009a3e <_calloc_r+0x16>
 8009a4c:	4621      	mov	r1, r4
 8009a4e:	f7fe f961 	bl	8007d14 <memset>
 8009a52:	e7f4      	b.n	8009a3e <_calloc_r+0x16>

08009a54 <_free_r>:
 8009a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a56:	2900      	cmp	r1, #0
 8009a58:	d044      	beq.n	8009ae4 <_free_r+0x90>
 8009a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a5e:	9001      	str	r0, [sp, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f1a1 0404 	sub.w	r4, r1, #4
 8009a66:	bfb8      	it	lt
 8009a68:	18e4      	addlt	r4, r4, r3
 8009a6a:	f000 f925 	bl	8009cb8 <__malloc_lock>
 8009a6e:	4a1e      	ldr	r2, [pc, #120]	; (8009ae8 <_free_r+0x94>)
 8009a70:	9801      	ldr	r0, [sp, #4]
 8009a72:	6813      	ldr	r3, [r2, #0]
 8009a74:	b933      	cbnz	r3, 8009a84 <_free_r+0x30>
 8009a76:	6063      	str	r3, [r4, #4]
 8009a78:	6014      	str	r4, [r2, #0]
 8009a7a:	b003      	add	sp, #12
 8009a7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a80:	f000 b920 	b.w	8009cc4 <__malloc_unlock>
 8009a84:	42a3      	cmp	r3, r4
 8009a86:	d908      	bls.n	8009a9a <_free_r+0x46>
 8009a88:	6825      	ldr	r5, [r4, #0]
 8009a8a:	1961      	adds	r1, r4, r5
 8009a8c:	428b      	cmp	r3, r1
 8009a8e:	bf01      	itttt	eq
 8009a90:	6819      	ldreq	r1, [r3, #0]
 8009a92:	685b      	ldreq	r3, [r3, #4]
 8009a94:	1949      	addeq	r1, r1, r5
 8009a96:	6021      	streq	r1, [r4, #0]
 8009a98:	e7ed      	b.n	8009a76 <_free_r+0x22>
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	b10b      	cbz	r3, 8009aa4 <_free_r+0x50>
 8009aa0:	42a3      	cmp	r3, r4
 8009aa2:	d9fa      	bls.n	8009a9a <_free_r+0x46>
 8009aa4:	6811      	ldr	r1, [r2, #0]
 8009aa6:	1855      	adds	r5, r2, r1
 8009aa8:	42a5      	cmp	r5, r4
 8009aaa:	d10b      	bne.n	8009ac4 <_free_r+0x70>
 8009aac:	6824      	ldr	r4, [r4, #0]
 8009aae:	4421      	add	r1, r4
 8009ab0:	1854      	adds	r4, r2, r1
 8009ab2:	42a3      	cmp	r3, r4
 8009ab4:	6011      	str	r1, [r2, #0]
 8009ab6:	d1e0      	bne.n	8009a7a <_free_r+0x26>
 8009ab8:	681c      	ldr	r4, [r3, #0]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	6053      	str	r3, [r2, #4]
 8009abe:	4421      	add	r1, r4
 8009ac0:	6011      	str	r1, [r2, #0]
 8009ac2:	e7da      	b.n	8009a7a <_free_r+0x26>
 8009ac4:	d902      	bls.n	8009acc <_free_r+0x78>
 8009ac6:	230c      	movs	r3, #12
 8009ac8:	6003      	str	r3, [r0, #0]
 8009aca:	e7d6      	b.n	8009a7a <_free_r+0x26>
 8009acc:	6825      	ldr	r5, [r4, #0]
 8009ace:	1961      	adds	r1, r4, r5
 8009ad0:	428b      	cmp	r3, r1
 8009ad2:	bf04      	itt	eq
 8009ad4:	6819      	ldreq	r1, [r3, #0]
 8009ad6:	685b      	ldreq	r3, [r3, #4]
 8009ad8:	6063      	str	r3, [r4, #4]
 8009ada:	bf04      	itt	eq
 8009adc:	1949      	addeq	r1, r1, r5
 8009ade:	6021      	streq	r1, [r4, #0]
 8009ae0:	6054      	str	r4, [r2, #4]
 8009ae2:	e7ca      	b.n	8009a7a <_free_r+0x26>
 8009ae4:	b003      	add	sp, #12
 8009ae6:	bd30      	pop	{r4, r5, pc}
 8009ae8:	20000408 	.word	0x20000408

08009aec <sbrk_aligned>:
 8009aec:	b570      	push	{r4, r5, r6, lr}
 8009aee:	4e0e      	ldr	r6, [pc, #56]	; (8009b28 <sbrk_aligned+0x3c>)
 8009af0:	460c      	mov	r4, r1
 8009af2:	6831      	ldr	r1, [r6, #0]
 8009af4:	4605      	mov	r5, r0
 8009af6:	b911      	cbnz	r1, 8009afe <sbrk_aligned+0x12>
 8009af8:	f000 f88c 	bl	8009c14 <_sbrk_r>
 8009afc:	6030      	str	r0, [r6, #0]
 8009afe:	4621      	mov	r1, r4
 8009b00:	4628      	mov	r0, r5
 8009b02:	f000 f887 	bl	8009c14 <_sbrk_r>
 8009b06:	1c43      	adds	r3, r0, #1
 8009b08:	d00a      	beq.n	8009b20 <sbrk_aligned+0x34>
 8009b0a:	1cc4      	adds	r4, r0, #3
 8009b0c:	f024 0403 	bic.w	r4, r4, #3
 8009b10:	42a0      	cmp	r0, r4
 8009b12:	d007      	beq.n	8009b24 <sbrk_aligned+0x38>
 8009b14:	1a21      	subs	r1, r4, r0
 8009b16:	4628      	mov	r0, r5
 8009b18:	f000 f87c 	bl	8009c14 <_sbrk_r>
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	d101      	bne.n	8009b24 <sbrk_aligned+0x38>
 8009b20:	f04f 34ff 	mov.w	r4, #4294967295
 8009b24:	4620      	mov	r0, r4
 8009b26:	bd70      	pop	{r4, r5, r6, pc}
 8009b28:	2000040c 	.word	0x2000040c

08009b2c <_malloc_r>:
 8009b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b30:	1ccd      	adds	r5, r1, #3
 8009b32:	f025 0503 	bic.w	r5, r5, #3
 8009b36:	3508      	adds	r5, #8
 8009b38:	2d0c      	cmp	r5, #12
 8009b3a:	bf38      	it	cc
 8009b3c:	250c      	movcc	r5, #12
 8009b3e:	2d00      	cmp	r5, #0
 8009b40:	4607      	mov	r7, r0
 8009b42:	db01      	blt.n	8009b48 <_malloc_r+0x1c>
 8009b44:	42a9      	cmp	r1, r5
 8009b46:	d905      	bls.n	8009b54 <_malloc_r+0x28>
 8009b48:	230c      	movs	r3, #12
 8009b4a:	603b      	str	r3, [r7, #0]
 8009b4c:	2600      	movs	r6, #0
 8009b4e:	4630      	mov	r0, r6
 8009b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b54:	4e2e      	ldr	r6, [pc, #184]	; (8009c10 <_malloc_r+0xe4>)
 8009b56:	f000 f8af 	bl	8009cb8 <__malloc_lock>
 8009b5a:	6833      	ldr	r3, [r6, #0]
 8009b5c:	461c      	mov	r4, r3
 8009b5e:	bb34      	cbnz	r4, 8009bae <_malloc_r+0x82>
 8009b60:	4629      	mov	r1, r5
 8009b62:	4638      	mov	r0, r7
 8009b64:	f7ff ffc2 	bl	8009aec <sbrk_aligned>
 8009b68:	1c43      	adds	r3, r0, #1
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	d14d      	bne.n	8009c0a <_malloc_r+0xde>
 8009b6e:	6834      	ldr	r4, [r6, #0]
 8009b70:	4626      	mov	r6, r4
 8009b72:	2e00      	cmp	r6, #0
 8009b74:	d140      	bne.n	8009bf8 <_malloc_r+0xcc>
 8009b76:	6823      	ldr	r3, [r4, #0]
 8009b78:	4631      	mov	r1, r6
 8009b7a:	4638      	mov	r0, r7
 8009b7c:	eb04 0803 	add.w	r8, r4, r3
 8009b80:	f000 f848 	bl	8009c14 <_sbrk_r>
 8009b84:	4580      	cmp	r8, r0
 8009b86:	d13a      	bne.n	8009bfe <_malloc_r+0xd2>
 8009b88:	6821      	ldr	r1, [r4, #0]
 8009b8a:	3503      	adds	r5, #3
 8009b8c:	1a6d      	subs	r5, r5, r1
 8009b8e:	f025 0503 	bic.w	r5, r5, #3
 8009b92:	3508      	adds	r5, #8
 8009b94:	2d0c      	cmp	r5, #12
 8009b96:	bf38      	it	cc
 8009b98:	250c      	movcc	r5, #12
 8009b9a:	4629      	mov	r1, r5
 8009b9c:	4638      	mov	r0, r7
 8009b9e:	f7ff ffa5 	bl	8009aec <sbrk_aligned>
 8009ba2:	3001      	adds	r0, #1
 8009ba4:	d02b      	beq.n	8009bfe <_malloc_r+0xd2>
 8009ba6:	6823      	ldr	r3, [r4, #0]
 8009ba8:	442b      	add	r3, r5
 8009baa:	6023      	str	r3, [r4, #0]
 8009bac:	e00e      	b.n	8009bcc <_malloc_r+0xa0>
 8009bae:	6822      	ldr	r2, [r4, #0]
 8009bb0:	1b52      	subs	r2, r2, r5
 8009bb2:	d41e      	bmi.n	8009bf2 <_malloc_r+0xc6>
 8009bb4:	2a0b      	cmp	r2, #11
 8009bb6:	d916      	bls.n	8009be6 <_malloc_r+0xba>
 8009bb8:	1961      	adds	r1, r4, r5
 8009bba:	42a3      	cmp	r3, r4
 8009bbc:	6025      	str	r5, [r4, #0]
 8009bbe:	bf18      	it	ne
 8009bc0:	6059      	strne	r1, [r3, #4]
 8009bc2:	6863      	ldr	r3, [r4, #4]
 8009bc4:	bf08      	it	eq
 8009bc6:	6031      	streq	r1, [r6, #0]
 8009bc8:	5162      	str	r2, [r4, r5]
 8009bca:	604b      	str	r3, [r1, #4]
 8009bcc:	4638      	mov	r0, r7
 8009bce:	f104 060b 	add.w	r6, r4, #11
 8009bd2:	f000 f877 	bl	8009cc4 <__malloc_unlock>
 8009bd6:	f026 0607 	bic.w	r6, r6, #7
 8009bda:	1d23      	adds	r3, r4, #4
 8009bdc:	1af2      	subs	r2, r6, r3
 8009bde:	d0b6      	beq.n	8009b4e <_malloc_r+0x22>
 8009be0:	1b9b      	subs	r3, r3, r6
 8009be2:	50a3      	str	r3, [r4, r2]
 8009be4:	e7b3      	b.n	8009b4e <_malloc_r+0x22>
 8009be6:	6862      	ldr	r2, [r4, #4]
 8009be8:	42a3      	cmp	r3, r4
 8009bea:	bf0c      	ite	eq
 8009bec:	6032      	streq	r2, [r6, #0]
 8009bee:	605a      	strne	r2, [r3, #4]
 8009bf0:	e7ec      	b.n	8009bcc <_malloc_r+0xa0>
 8009bf2:	4623      	mov	r3, r4
 8009bf4:	6864      	ldr	r4, [r4, #4]
 8009bf6:	e7b2      	b.n	8009b5e <_malloc_r+0x32>
 8009bf8:	4634      	mov	r4, r6
 8009bfa:	6876      	ldr	r6, [r6, #4]
 8009bfc:	e7b9      	b.n	8009b72 <_malloc_r+0x46>
 8009bfe:	230c      	movs	r3, #12
 8009c00:	603b      	str	r3, [r7, #0]
 8009c02:	4638      	mov	r0, r7
 8009c04:	f000 f85e 	bl	8009cc4 <__malloc_unlock>
 8009c08:	e7a1      	b.n	8009b4e <_malloc_r+0x22>
 8009c0a:	6025      	str	r5, [r4, #0]
 8009c0c:	e7de      	b.n	8009bcc <_malloc_r+0xa0>
 8009c0e:	bf00      	nop
 8009c10:	20000408 	.word	0x20000408

08009c14 <_sbrk_r>:
 8009c14:	b538      	push	{r3, r4, r5, lr}
 8009c16:	4d06      	ldr	r5, [pc, #24]	; (8009c30 <_sbrk_r+0x1c>)
 8009c18:	2300      	movs	r3, #0
 8009c1a:	4604      	mov	r4, r0
 8009c1c:	4608      	mov	r0, r1
 8009c1e:	602b      	str	r3, [r5, #0]
 8009c20:	f7f7 ff34 	bl	8001a8c <_sbrk>
 8009c24:	1c43      	adds	r3, r0, #1
 8009c26:	d102      	bne.n	8009c2e <_sbrk_r+0x1a>
 8009c28:	682b      	ldr	r3, [r5, #0]
 8009c2a:	b103      	cbz	r3, 8009c2e <_sbrk_r+0x1a>
 8009c2c:	6023      	str	r3, [r4, #0]
 8009c2e:	bd38      	pop	{r3, r4, r5, pc}
 8009c30:	20000410 	.word	0x20000410

08009c34 <__assert_func>:
 8009c34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c36:	4614      	mov	r4, r2
 8009c38:	461a      	mov	r2, r3
 8009c3a:	4b09      	ldr	r3, [pc, #36]	; (8009c60 <__assert_func+0x2c>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4605      	mov	r5, r0
 8009c40:	68d8      	ldr	r0, [r3, #12]
 8009c42:	b14c      	cbz	r4, 8009c58 <__assert_func+0x24>
 8009c44:	4b07      	ldr	r3, [pc, #28]	; (8009c64 <__assert_func+0x30>)
 8009c46:	9100      	str	r1, [sp, #0]
 8009c48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c4c:	4906      	ldr	r1, [pc, #24]	; (8009c68 <__assert_func+0x34>)
 8009c4e:	462b      	mov	r3, r5
 8009c50:	f000 f80e 	bl	8009c70 <fiprintf>
 8009c54:	f000 fa64 	bl	800a120 <abort>
 8009c58:	4b04      	ldr	r3, [pc, #16]	; (8009c6c <__assert_func+0x38>)
 8009c5a:	461c      	mov	r4, r3
 8009c5c:	e7f3      	b.n	8009c46 <__assert_func+0x12>
 8009c5e:	bf00      	nop
 8009c60:	2000000c 	.word	0x2000000c
 8009c64:	0800a9dc 	.word	0x0800a9dc
 8009c68:	0800a9e9 	.word	0x0800a9e9
 8009c6c:	0800aa17 	.word	0x0800aa17

08009c70 <fiprintf>:
 8009c70:	b40e      	push	{r1, r2, r3}
 8009c72:	b503      	push	{r0, r1, lr}
 8009c74:	4601      	mov	r1, r0
 8009c76:	ab03      	add	r3, sp, #12
 8009c78:	4805      	ldr	r0, [pc, #20]	; (8009c90 <fiprintf+0x20>)
 8009c7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c7e:	6800      	ldr	r0, [r0, #0]
 8009c80:	9301      	str	r3, [sp, #4]
 8009c82:	f000 f84f 	bl	8009d24 <_vfiprintf_r>
 8009c86:	b002      	add	sp, #8
 8009c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c8c:	b003      	add	sp, #12
 8009c8e:	4770      	bx	lr
 8009c90:	2000000c 	.word	0x2000000c

08009c94 <__ascii_mbtowc>:
 8009c94:	b082      	sub	sp, #8
 8009c96:	b901      	cbnz	r1, 8009c9a <__ascii_mbtowc+0x6>
 8009c98:	a901      	add	r1, sp, #4
 8009c9a:	b142      	cbz	r2, 8009cae <__ascii_mbtowc+0x1a>
 8009c9c:	b14b      	cbz	r3, 8009cb2 <__ascii_mbtowc+0x1e>
 8009c9e:	7813      	ldrb	r3, [r2, #0]
 8009ca0:	600b      	str	r3, [r1, #0]
 8009ca2:	7812      	ldrb	r2, [r2, #0]
 8009ca4:	1e10      	subs	r0, r2, #0
 8009ca6:	bf18      	it	ne
 8009ca8:	2001      	movne	r0, #1
 8009caa:	b002      	add	sp, #8
 8009cac:	4770      	bx	lr
 8009cae:	4610      	mov	r0, r2
 8009cb0:	e7fb      	b.n	8009caa <__ascii_mbtowc+0x16>
 8009cb2:	f06f 0001 	mvn.w	r0, #1
 8009cb6:	e7f8      	b.n	8009caa <__ascii_mbtowc+0x16>

08009cb8 <__malloc_lock>:
 8009cb8:	4801      	ldr	r0, [pc, #4]	; (8009cc0 <__malloc_lock+0x8>)
 8009cba:	f000 bbf1 	b.w	800a4a0 <__retarget_lock_acquire_recursive>
 8009cbe:	bf00      	nop
 8009cc0:	20000414 	.word	0x20000414

08009cc4 <__malloc_unlock>:
 8009cc4:	4801      	ldr	r0, [pc, #4]	; (8009ccc <__malloc_unlock+0x8>)
 8009cc6:	f000 bbec 	b.w	800a4a2 <__retarget_lock_release_recursive>
 8009cca:	bf00      	nop
 8009ccc:	20000414 	.word	0x20000414

08009cd0 <__sfputc_r>:
 8009cd0:	6893      	ldr	r3, [r2, #8]
 8009cd2:	3b01      	subs	r3, #1
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	b410      	push	{r4}
 8009cd8:	6093      	str	r3, [r2, #8]
 8009cda:	da08      	bge.n	8009cee <__sfputc_r+0x1e>
 8009cdc:	6994      	ldr	r4, [r2, #24]
 8009cde:	42a3      	cmp	r3, r4
 8009ce0:	db01      	blt.n	8009ce6 <__sfputc_r+0x16>
 8009ce2:	290a      	cmp	r1, #10
 8009ce4:	d103      	bne.n	8009cee <__sfputc_r+0x1e>
 8009ce6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cea:	f000 b94b 	b.w	8009f84 <__swbuf_r>
 8009cee:	6813      	ldr	r3, [r2, #0]
 8009cf0:	1c58      	adds	r0, r3, #1
 8009cf2:	6010      	str	r0, [r2, #0]
 8009cf4:	7019      	strb	r1, [r3, #0]
 8009cf6:	4608      	mov	r0, r1
 8009cf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cfc:	4770      	bx	lr

08009cfe <__sfputs_r>:
 8009cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d00:	4606      	mov	r6, r0
 8009d02:	460f      	mov	r7, r1
 8009d04:	4614      	mov	r4, r2
 8009d06:	18d5      	adds	r5, r2, r3
 8009d08:	42ac      	cmp	r4, r5
 8009d0a:	d101      	bne.n	8009d10 <__sfputs_r+0x12>
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	e007      	b.n	8009d20 <__sfputs_r+0x22>
 8009d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d14:	463a      	mov	r2, r7
 8009d16:	4630      	mov	r0, r6
 8009d18:	f7ff ffda 	bl	8009cd0 <__sfputc_r>
 8009d1c:	1c43      	adds	r3, r0, #1
 8009d1e:	d1f3      	bne.n	8009d08 <__sfputs_r+0xa>
 8009d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d24 <_vfiprintf_r>:
 8009d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d28:	460d      	mov	r5, r1
 8009d2a:	b09d      	sub	sp, #116	; 0x74
 8009d2c:	4614      	mov	r4, r2
 8009d2e:	4698      	mov	r8, r3
 8009d30:	4606      	mov	r6, r0
 8009d32:	b118      	cbz	r0, 8009d3c <_vfiprintf_r+0x18>
 8009d34:	6983      	ldr	r3, [r0, #24]
 8009d36:	b90b      	cbnz	r3, 8009d3c <_vfiprintf_r+0x18>
 8009d38:	f000 fb14 	bl	800a364 <__sinit>
 8009d3c:	4b89      	ldr	r3, [pc, #548]	; (8009f64 <_vfiprintf_r+0x240>)
 8009d3e:	429d      	cmp	r5, r3
 8009d40:	d11b      	bne.n	8009d7a <_vfiprintf_r+0x56>
 8009d42:	6875      	ldr	r5, [r6, #4]
 8009d44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d46:	07d9      	lsls	r1, r3, #31
 8009d48:	d405      	bmi.n	8009d56 <_vfiprintf_r+0x32>
 8009d4a:	89ab      	ldrh	r3, [r5, #12]
 8009d4c:	059a      	lsls	r2, r3, #22
 8009d4e:	d402      	bmi.n	8009d56 <_vfiprintf_r+0x32>
 8009d50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d52:	f000 fba5 	bl	800a4a0 <__retarget_lock_acquire_recursive>
 8009d56:	89ab      	ldrh	r3, [r5, #12]
 8009d58:	071b      	lsls	r3, r3, #28
 8009d5a:	d501      	bpl.n	8009d60 <_vfiprintf_r+0x3c>
 8009d5c:	692b      	ldr	r3, [r5, #16]
 8009d5e:	b9eb      	cbnz	r3, 8009d9c <_vfiprintf_r+0x78>
 8009d60:	4629      	mov	r1, r5
 8009d62:	4630      	mov	r0, r6
 8009d64:	f000 f96e 	bl	800a044 <__swsetup_r>
 8009d68:	b1c0      	cbz	r0, 8009d9c <_vfiprintf_r+0x78>
 8009d6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d6c:	07dc      	lsls	r4, r3, #31
 8009d6e:	d50e      	bpl.n	8009d8e <_vfiprintf_r+0x6a>
 8009d70:	f04f 30ff 	mov.w	r0, #4294967295
 8009d74:	b01d      	add	sp, #116	; 0x74
 8009d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d7a:	4b7b      	ldr	r3, [pc, #492]	; (8009f68 <_vfiprintf_r+0x244>)
 8009d7c:	429d      	cmp	r5, r3
 8009d7e:	d101      	bne.n	8009d84 <_vfiprintf_r+0x60>
 8009d80:	68b5      	ldr	r5, [r6, #8]
 8009d82:	e7df      	b.n	8009d44 <_vfiprintf_r+0x20>
 8009d84:	4b79      	ldr	r3, [pc, #484]	; (8009f6c <_vfiprintf_r+0x248>)
 8009d86:	429d      	cmp	r5, r3
 8009d88:	bf08      	it	eq
 8009d8a:	68f5      	ldreq	r5, [r6, #12]
 8009d8c:	e7da      	b.n	8009d44 <_vfiprintf_r+0x20>
 8009d8e:	89ab      	ldrh	r3, [r5, #12]
 8009d90:	0598      	lsls	r0, r3, #22
 8009d92:	d4ed      	bmi.n	8009d70 <_vfiprintf_r+0x4c>
 8009d94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d96:	f000 fb84 	bl	800a4a2 <__retarget_lock_release_recursive>
 8009d9a:	e7e9      	b.n	8009d70 <_vfiprintf_r+0x4c>
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8009da0:	2320      	movs	r3, #32
 8009da2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009da6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009daa:	2330      	movs	r3, #48	; 0x30
 8009dac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009f70 <_vfiprintf_r+0x24c>
 8009db0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009db4:	f04f 0901 	mov.w	r9, #1
 8009db8:	4623      	mov	r3, r4
 8009dba:	469a      	mov	sl, r3
 8009dbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dc0:	b10a      	cbz	r2, 8009dc6 <_vfiprintf_r+0xa2>
 8009dc2:	2a25      	cmp	r2, #37	; 0x25
 8009dc4:	d1f9      	bne.n	8009dba <_vfiprintf_r+0x96>
 8009dc6:	ebba 0b04 	subs.w	fp, sl, r4
 8009dca:	d00b      	beq.n	8009de4 <_vfiprintf_r+0xc0>
 8009dcc:	465b      	mov	r3, fp
 8009dce:	4622      	mov	r2, r4
 8009dd0:	4629      	mov	r1, r5
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	f7ff ff93 	bl	8009cfe <__sfputs_r>
 8009dd8:	3001      	adds	r0, #1
 8009dda:	f000 80aa 	beq.w	8009f32 <_vfiprintf_r+0x20e>
 8009dde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009de0:	445a      	add	r2, fp
 8009de2:	9209      	str	r2, [sp, #36]	; 0x24
 8009de4:	f89a 3000 	ldrb.w	r3, [sl]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 80a2 	beq.w	8009f32 <_vfiprintf_r+0x20e>
 8009dee:	2300      	movs	r3, #0
 8009df0:	f04f 32ff 	mov.w	r2, #4294967295
 8009df4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009df8:	f10a 0a01 	add.w	sl, sl, #1
 8009dfc:	9304      	str	r3, [sp, #16]
 8009dfe:	9307      	str	r3, [sp, #28]
 8009e00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e04:	931a      	str	r3, [sp, #104]	; 0x68
 8009e06:	4654      	mov	r4, sl
 8009e08:	2205      	movs	r2, #5
 8009e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e0e:	4858      	ldr	r0, [pc, #352]	; (8009f70 <_vfiprintf_r+0x24c>)
 8009e10:	f7f6 f9e6 	bl	80001e0 <memchr>
 8009e14:	9a04      	ldr	r2, [sp, #16]
 8009e16:	b9d8      	cbnz	r0, 8009e50 <_vfiprintf_r+0x12c>
 8009e18:	06d1      	lsls	r1, r2, #27
 8009e1a:	bf44      	itt	mi
 8009e1c:	2320      	movmi	r3, #32
 8009e1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e22:	0713      	lsls	r3, r2, #28
 8009e24:	bf44      	itt	mi
 8009e26:	232b      	movmi	r3, #43	; 0x2b
 8009e28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e2c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e30:	2b2a      	cmp	r3, #42	; 0x2a
 8009e32:	d015      	beq.n	8009e60 <_vfiprintf_r+0x13c>
 8009e34:	9a07      	ldr	r2, [sp, #28]
 8009e36:	4654      	mov	r4, sl
 8009e38:	2000      	movs	r0, #0
 8009e3a:	f04f 0c0a 	mov.w	ip, #10
 8009e3e:	4621      	mov	r1, r4
 8009e40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e44:	3b30      	subs	r3, #48	; 0x30
 8009e46:	2b09      	cmp	r3, #9
 8009e48:	d94e      	bls.n	8009ee8 <_vfiprintf_r+0x1c4>
 8009e4a:	b1b0      	cbz	r0, 8009e7a <_vfiprintf_r+0x156>
 8009e4c:	9207      	str	r2, [sp, #28]
 8009e4e:	e014      	b.n	8009e7a <_vfiprintf_r+0x156>
 8009e50:	eba0 0308 	sub.w	r3, r0, r8
 8009e54:	fa09 f303 	lsl.w	r3, r9, r3
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	9304      	str	r3, [sp, #16]
 8009e5c:	46a2      	mov	sl, r4
 8009e5e:	e7d2      	b.n	8009e06 <_vfiprintf_r+0xe2>
 8009e60:	9b03      	ldr	r3, [sp, #12]
 8009e62:	1d19      	adds	r1, r3, #4
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	9103      	str	r1, [sp, #12]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	bfbb      	ittet	lt
 8009e6c:	425b      	neglt	r3, r3
 8009e6e:	f042 0202 	orrlt.w	r2, r2, #2
 8009e72:	9307      	strge	r3, [sp, #28]
 8009e74:	9307      	strlt	r3, [sp, #28]
 8009e76:	bfb8      	it	lt
 8009e78:	9204      	strlt	r2, [sp, #16]
 8009e7a:	7823      	ldrb	r3, [r4, #0]
 8009e7c:	2b2e      	cmp	r3, #46	; 0x2e
 8009e7e:	d10c      	bne.n	8009e9a <_vfiprintf_r+0x176>
 8009e80:	7863      	ldrb	r3, [r4, #1]
 8009e82:	2b2a      	cmp	r3, #42	; 0x2a
 8009e84:	d135      	bne.n	8009ef2 <_vfiprintf_r+0x1ce>
 8009e86:	9b03      	ldr	r3, [sp, #12]
 8009e88:	1d1a      	adds	r2, r3, #4
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	9203      	str	r2, [sp, #12]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	bfb8      	it	lt
 8009e92:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e96:	3402      	adds	r4, #2
 8009e98:	9305      	str	r3, [sp, #20]
 8009e9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009f80 <_vfiprintf_r+0x25c>
 8009e9e:	7821      	ldrb	r1, [r4, #0]
 8009ea0:	2203      	movs	r2, #3
 8009ea2:	4650      	mov	r0, sl
 8009ea4:	f7f6 f99c 	bl	80001e0 <memchr>
 8009ea8:	b140      	cbz	r0, 8009ebc <_vfiprintf_r+0x198>
 8009eaa:	2340      	movs	r3, #64	; 0x40
 8009eac:	eba0 000a 	sub.w	r0, r0, sl
 8009eb0:	fa03 f000 	lsl.w	r0, r3, r0
 8009eb4:	9b04      	ldr	r3, [sp, #16]
 8009eb6:	4303      	orrs	r3, r0
 8009eb8:	3401      	adds	r4, #1
 8009eba:	9304      	str	r3, [sp, #16]
 8009ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ec0:	482c      	ldr	r0, [pc, #176]	; (8009f74 <_vfiprintf_r+0x250>)
 8009ec2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ec6:	2206      	movs	r2, #6
 8009ec8:	f7f6 f98a 	bl	80001e0 <memchr>
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	d03f      	beq.n	8009f50 <_vfiprintf_r+0x22c>
 8009ed0:	4b29      	ldr	r3, [pc, #164]	; (8009f78 <_vfiprintf_r+0x254>)
 8009ed2:	bb1b      	cbnz	r3, 8009f1c <_vfiprintf_r+0x1f8>
 8009ed4:	9b03      	ldr	r3, [sp, #12]
 8009ed6:	3307      	adds	r3, #7
 8009ed8:	f023 0307 	bic.w	r3, r3, #7
 8009edc:	3308      	adds	r3, #8
 8009ede:	9303      	str	r3, [sp, #12]
 8009ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ee2:	443b      	add	r3, r7
 8009ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ee6:	e767      	b.n	8009db8 <_vfiprintf_r+0x94>
 8009ee8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009eec:	460c      	mov	r4, r1
 8009eee:	2001      	movs	r0, #1
 8009ef0:	e7a5      	b.n	8009e3e <_vfiprintf_r+0x11a>
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	3401      	adds	r4, #1
 8009ef6:	9305      	str	r3, [sp, #20]
 8009ef8:	4619      	mov	r1, r3
 8009efa:	f04f 0c0a 	mov.w	ip, #10
 8009efe:	4620      	mov	r0, r4
 8009f00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f04:	3a30      	subs	r2, #48	; 0x30
 8009f06:	2a09      	cmp	r2, #9
 8009f08:	d903      	bls.n	8009f12 <_vfiprintf_r+0x1ee>
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d0c5      	beq.n	8009e9a <_vfiprintf_r+0x176>
 8009f0e:	9105      	str	r1, [sp, #20]
 8009f10:	e7c3      	b.n	8009e9a <_vfiprintf_r+0x176>
 8009f12:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f16:	4604      	mov	r4, r0
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e7f0      	b.n	8009efe <_vfiprintf_r+0x1da>
 8009f1c:	ab03      	add	r3, sp, #12
 8009f1e:	9300      	str	r3, [sp, #0]
 8009f20:	462a      	mov	r2, r5
 8009f22:	4b16      	ldr	r3, [pc, #88]	; (8009f7c <_vfiprintf_r+0x258>)
 8009f24:	a904      	add	r1, sp, #16
 8009f26:	4630      	mov	r0, r6
 8009f28:	f7fd ff9c 	bl	8007e64 <_printf_float>
 8009f2c:	4607      	mov	r7, r0
 8009f2e:	1c78      	adds	r0, r7, #1
 8009f30:	d1d6      	bne.n	8009ee0 <_vfiprintf_r+0x1bc>
 8009f32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f34:	07d9      	lsls	r1, r3, #31
 8009f36:	d405      	bmi.n	8009f44 <_vfiprintf_r+0x220>
 8009f38:	89ab      	ldrh	r3, [r5, #12]
 8009f3a:	059a      	lsls	r2, r3, #22
 8009f3c:	d402      	bmi.n	8009f44 <_vfiprintf_r+0x220>
 8009f3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f40:	f000 faaf 	bl	800a4a2 <__retarget_lock_release_recursive>
 8009f44:	89ab      	ldrh	r3, [r5, #12]
 8009f46:	065b      	lsls	r3, r3, #25
 8009f48:	f53f af12 	bmi.w	8009d70 <_vfiprintf_r+0x4c>
 8009f4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f4e:	e711      	b.n	8009d74 <_vfiprintf_r+0x50>
 8009f50:	ab03      	add	r3, sp, #12
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	462a      	mov	r2, r5
 8009f56:	4b09      	ldr	r3, [pc, #36]	; (8009f7c <_vfiprintf_r+0x258>)
 8009f58:	a904      	add	r1, sp, #16
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	f7fe fa26 	bl	80083ac <_printf_i>
 8009f60:	e7e4      	b.n	8009f2c <_vfiprintf_r+0x208>
 8009f62:	bf00      	nop
 8009f64:	0800ab54 	.word	0x0800ab54
 8009f68:	0800ab74 	.word	0x0800ab74
 8009f6c:	0800ab34 	.word	0x0800ab34
 8009f70:	0800aa22 	.word	0x0800aa22
 8009f74:	0800aa2c 	.word	0x0800aa2c
 8009f78:	08007e65 	.word	0x08007e65
 8009f7c:	08009cff 	.word	0x08009cff
 8009f80:	0800aa28 	.word	0x0800aa28

08009f84 <__swbuf_r>:
 8009f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f86:	460e      	mov	r6, r1
 8009f88:	4614      	mov	r4, r2
 8009f8a:	4605      	mov	r5, r0
 8009f8c:	b118      	cbz	r0, 8009f96 <__swbuf_r+0x12>
 8009f8e:	6983      	ldr	r3, [r0, #24]
 8009f90:	b90b      	cbnz	r3, 8009f96 <__swbuf_r+0x12>
 8009f92:	f000 f9e7 	bl	800a364 <__sinit>
 8009f96:	4b21      	ldr	r3, [pc, #132]	; (800a01c <__swbuf_r+0x98>)
 8009f98:	429c      	cmp	r4, r3
 8009f9a:	d12b      	bne.n	8009ff4 <__swbuf_r+0x70>
 8009f9c:	686c      	ldr	r4, [r5, #4]
 8009f9e:	69a3      	ldr	r3, [r4, #24]
 8009fa0:	60a3      	str	r3, [r4, #8]
 8009fa2:	89a3      	ldrh	r3, [r4, #12]
 8009fa4:	071a      	lsls	r2, r3, #28
 8009fa6:	d52f      	bpl.n	800a008 <__swbuf_r+0x84>
 8009fa8:	6923      	ldr	r3, [r4, #16]
 8009faa:	b36b      	cbz	r3, 800a008 <__swbuf_r+0x84>
 8009fac:	6923      	ldr	r3, [r4, #16]
 8009fae:	6820      	ldr	r0, [r4, #0]
 8009fb0:	1ac0      	subs	r0, r0, r3
 8009fb2:	6963      	ldr	r3, [r4, #20]
 8009fb4:	b2f6      	uxtb	r6, r6
 8009fb6:	4283      	cmp	r3, r0
 8009fb8:	4637      	mov	r7, r6
 8009fba:	dc04      	bgt.n	8009fc6 <__swbuf_r+0x42>
 8009fbc:	4621      	mov	r1, r4
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	f000 f93c 	bl	800a23c <_fflush_r>
 8009fc4:	bb30      	cbnz	r0, 800a014 <__swbuf_r+0x90>
 8009fc6:	68a3      	ldr	r3, [r4, #8]
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	60a3      	str	r3, [r4, #8]
 8009fcc:	6823      	ldr	r3, [r4, #0]
 8009fce:	1c5a      	adds	r2, r3, #1
 8009fd0:	6022      	str	r2, [r4, #0]
 8009fd2:	701e      	strb	r6, [r3, #0]
 8009fd4:	6963      	ldr	r3, [r4, #20]
 8009fd6:	3001      	adds	r0, #1
 8009fd8:	4283      	cmp	r3, r0
 8009fda:	d004      	beq.n	8009fe6 <__swbuf_r+0x62>
 8009fdc:	89a3      	ldrh	r3, [r4, #12]
 8009fde:	07db      	lsls	r3, r3, #31
 8009fe0:	d506      	bpl.n	8009ff0 <__swbuf_r+0x6c>
 8009fe2:	2e0a      	cmp	r6, #10
 8009fe4:	d104      	bne.n	8009ff0 <__swbuf_r+0x6c>
 8009fe6:	4621      	mov	r1, r4
 8009fe8:	4628      	mov	r0, r5
 8009fea:	f000 f927 	bl	800a23c <_fflush_r>
 8009fee:	b988      	cbnz	r0, 800a014 <__swbuf_r+0x90>
 8009ff0:	4638      	mov	r0, r7
 8009ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ff4:	4b0a      	ldr	r3, [pc, #40]	; (800a020 <__swbuf_r+0x9c>)
 8009ff6:	429c      	cmp	r4, r3
 8009ff8:	d101      	bne.n	8009ffe <__swbuf_r+0x7a>
 8009ffa:	68ac      	ldr	r4, [r5, #8]
 8009ffc:	e7cf      	b.n	8009f9e <__swbuf_r+0x1a>
 8009ffe:	4b09      	ldr	r3, [pc, #36]	; (800a024 <__swbuf_r+0xa0>)
 800a000:	429c      	cmp	r4, r3
 800a002:	bf08      	it	eq
 800a004:	68ec      	ldreq	r4, [r5, #12]
 800a006:	e7ca      	b.n	8009f9e <__swbuf_r+0x1a>
 800a008:	4621      	mov	r1, r4
 800a00a:	4628      	mov	r0, r5
 800a00c:	f000 f81a 	bl	800a044 <__swsetup_r>
 800a010:	2800      	cmp	r0, #0
 800a012:	d0cb      	beq.n	8009fac <__swbuf_r+0x28>
 800a014:	f04f 37ff 	mov.w	r7, #4294967295
 800a018:	e7ea      	b.n	8009ff0 <__swbuf_r+0x6c>
 800a01a:	bf00      	nop
 800a01c:	0800ab54 	.word	0x0800ab54
 800a020:	0800ab74 	.word	0x0800ab74
 800a024:	0800ab34 	.word	0x0800ab34

0800a028 <__ascii_wctomb>:
 800a028:	b149      	cbz	r1, 800a03e <__ascii_wctomb+0x16>
 800a02a:	2aff      	cmp	r2, #255	; 0xff
 800a02c:	bf85      	ittet	hi
 800a02e:	238a      	movhi	r3, #138	; 0x8a
 800a030:	6003      	strhi	r3, [r0, #0]
 800a032:	700a      	strbls	r2, [r1, #0]
 800a034:	f04f 30ff 	movhi.w	r0, #4294967295
 800a038:	bf98      	it	ls
 800a03a:	2001      	movls	r0, #1
 800a03c:	4770      	bx	lr
 800a03e:	4608      	mov	r0, r1
 800a040:	4770      	bx	lr
	...

0800a044 <__swsetup_r>:
 800a044:	4b32      	ldr	r3, [pc, #200]	; (800a110 <__swsetup_r+0xcc>)
 800a046:	b570      	push	{r4, r5, r6, lr}
 800a048:	681d      	ldr	r5, [r3, #0]
 800a04a:	4606      	mov	r6, r0
 800a04c:	460c      	mov	r4, r1
 800a04e:	b125      	cbz	r5, 800a05a <__swsetup_r+0x16>
 800a050:	69ab      	ldr	r3, [r5, #24]
 800a052:	b913      	cbnz	r3, 800a05a <__swsetup_r+0x16>
 800a054:	4628      	mov	r0, r5
 800a056:	f000 f985 	bl	800a364 <__sinit>
 800a05a:	4b2e      	ldr	r3, [pc, #184]	; (800a114 <__swsetup_r+0xd0>)
 800a05c:	429c      	cmp	r4, r3
 800a05e:	d10f      	bne.n	800a080 <__swsetup_r+0x3c>
 800a060:	686c      	ldr	r4, [r5, #4]
 800a062:	89a3      	ldrh	r3, [r4, #12]
 800a064:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a068:	0719      	lsls	r1, r3, #28
 800a06a:	d42c      	bmi.n	800a0c6 <__swsetup_r+0x82>
 800a06c:	06dd      	lsls	r5, r3, #27
 800a06e:	d411      	bmi.n	800a094 <__swsetup_r+0x50>
 800a070:	2309      	movs	r3, #9
 800a072:	6033      	str	r3, [r6, #0]
 800a074:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a078:	81a3      	strh	r3, [r4, #12]
 800a07a:	f04f 30ff 	mov.w	r0, #4294967295
 800a07e:	e03e      	b.n	800a0fe <__swsetup_r+0xba>
 800a080:	4b25      	ldr	r3, [pc, #148]	; (800a118 <__swsetup_r+0xd4>)
 800a082:	429c      	cmp	r4, r3
 800a084:	d101      	bne.n	800a08a <__swsetup_r+0x46>
 800a086:	68ac      	ldr	r4, [r5, #8]
 800a088:	e7eb      	b.n	800a062 <__swsetup_r+0x1e>
 800a08a:	4b24      	ldr	r3, [pc, #144]	; (800a11c <__swsetup_r+0xd8>)
 800a08c:	429c      	cmp	r4, r3
 800a08e:	bf08      	it	eq
 800a090:	68ec      	ldreq	r4, [r5, #12]
 800a092:	e7e6      	b.n	800a062 <__swsetup_r+0x1e>
 800a094:	0758      	lsls	r0, r3, #29
 800a096:	d512      	bpl.n	800a0be <__swsetup_r+0x7a>
 800a098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a09a:	b141      	cbz	r1, 800a0ae <__swsetup_r+0x6a>
 800a09c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0a0:	4299      	cmp	r1, r3
 800a0a2:	d002      	beq.n	800a0aa <__swsetup_r+0x66>
 800a0a4:	4630      	mov	r0, r6
 800a0a6:	f7ff fcd5 	bl	8009a54 <_free_r>
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	6363      	str	r3, [r4, #52]	; 0x34
 800a0ae:	89a3      	ldrh	r3, [r4, #12]
 800a0b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a0b4:	81a3      	strh	r3, [r4, #12]
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	6063      	str	r3, [r4, #4]
 800a0ba:	6923      	ldr	r3, [r4, #16]
 800a0bc:	6023      	str	r3, [r4, #0]
 800a0be:	89a3      	ldrh	r3, [r4, #12]
 800a0c0:	f043 0308 	orr.w	r3, r3, #8
 800a0c4:	81a3      	strh	r3, [r4, #12]
 800a0c6:	6923      	ldr	r3, [r4, #16]
 800a0c8:	b94b      	cbnz	r3, 800a0de <__swsetup_r+0x9a>
 800a0ca:	89a3      	ldrh	r3, [r4, #12]
 800a0cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a0d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0d4:	d003      	beq.n	800a0de <__swsetup_r+0x9a>
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	4630      	mov	r0, r6
 800a0da:	f000 fa09 	bl	800a4f0 <__smakebuf_r>
 800a0de:	89a0      	ldrh	r0, [r4, #12]
 800a0e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0e4:	f010 0301 	ands.w	r3, r0, #1
 800a0e8:	d00a      	beq.n	800a100 <__swsetup_r+0xbc>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	60a3      	str	r3, [r4, #8]
 800a0ee:	6963      	ldr	r3, [r4, #20]
 800a0f0:	425b      	negs	r3, r3
 800a0f2:	61a3      	str	r3, [r4, #24]
 800a0f4:	6923      	ldr	r3, [r4, #16]
 800a0f6:	b943      	cbnz	r3, 800a10a <__swsetup_r+0xc6>
 800a0f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a0fc:	d1ba      	bne.n	800a074 <__swsetup_r+0x30>
 800a0fe:	bd70      	pop	{r4, r5, r6, pc}
 800a100:	0781      	lsls	r1, r0, #30
 800a102:	bf58      	it	pl
 800a104:	6963      	ldrpl	r3, [r4, #20]
 800a106:	60a3      	str	r3, [r4, #8]
 800a108:	e7f4      	b.n	800a0f4 <__swsetup_r+0xb0>
 800a10a:	2000      	movs	r0, #0
 800a10c:	e7f7      	b.n	800a0fe <__swsetup_r+0xba>
 800a10e:	bf00      	nop
 800a110:	2000000c 	.word	0x2000000c
 800a114:	0800ab54 	.word	0x0800ab54
 800a118:	0800ab74 	.word	0x0800ab74
 800a11c:	0800ab34 	.word	0x0800ab34

0800a120 <abort>:
 800a120:	b508      	push	{r3, lr}
 800a122:	2006      	movs	r0, #6
 800a124:	f000 fa4c 	bl	800a5c0 <raise>
 800a128:	2001      	movs	r0, #1
 800a12a:	f7f7 fc37 	bl	800199c <_exit>
	...

0800a130 <__sflush_r>:
 800a130:	898a      	ldrh	r2, [r1, #12]
 800a132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a136:	4605      	mov	r5, r0
 800a138:	0710      	lsls	r0, r2, #28
 800a13a:	460c      	mov	r4, r1
 800a13c:	d458      	bmi.n	800a1f0 <__sflush_r+0xc0>
 800a13e:	684b      	ldr	r3, [r1, #4]
 800a140:	2b00      	cmp	r3, #0
 800a142:	dc05      	bgt.n	800a150 <__sflush_r+0x20>
 800a144:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a146:	2b00      	cmp	r3, #0
 800a148:	dc02      	bgt.n	800a150 <__sflush_r+0x20>
 800a14a:	2000      	movs	r0, #0
 800a14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a150:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a152:	2e00      	cmp	r6, #0
 800a154:	d0f9      	beq.n	800a14a <__sflush_r+0x1a>
 800a156:	2300      	movs	r3, #0
 800a158:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a15c:	682f      	ldr	r7, [r5, #0]
 800a15e:	602b      	str	r3, [r5, #0]
 800a160:	d032      	beq.n	800a1c8 <__sflush_r+0x98>
 800a162:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a164:	89a3      	ldrh	r3, [r4, #12]
 800a166:	075a      	lsls	r2, r3, #29
 800a168:	d505      	bpl.n	800a176 <__sflush_r+0x46>
 800a16a:	6863      	ldr	r3, [r4, #4]
 800a16c:	1ac0      	subs	r0, r0, r3
 800a16e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a170:	b10b      	cbz	r3, 800a176 <__sflush_r+0x46>
 800a172:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a174:	1ac0      	subs	r0, r0, r3
 800a176:	2300      	movs	r3, #0
 800a178:	4602      	mov	r2, r0
 800a17a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a17c:	6a21      	ldr	r1, [r4, #32]
 800a17e:	4628      	mov	r0, r5
 800a180:	47b0      	blx	r6
 800a182:	1c43      	adds	r3, r0, #1
 800a184:	89a3      	ldrh	r3, [r4, #12]
 800a186:	d106      	bne.n	800a196 <__sflush_r+0x66>
 800a188:	6829      	ldr	r1, [r5, #0]
 800a18a:	291d      	cmp	r1, #29
 800a18c:	d82c      	bhi.n	800a1e8 <__sflush_r+0xb8>
 800a18e:	4a2a      	ldr	r2, [pc, #168]	; (800a238 <__sflush_r+0x108>)
 800a190:	40ca      	lsrs	r2, r1
 800a192:	07d6      	lsls	r6, r2, #31
 800a194:	d528      	bpl.n	800a1e8 <__sflush_r+0xb8>
 800a196:	2200      	movs	r2, #0
 800a198:	6062      	str	r2, [r4, #4]
 800a19a:	04d9      	lsls	r1, r3, #19
 800a19c:	6922      	ldr	r2, [r4, #16]
 800a19e:	6022      	str	r2, [r4, #0]
 800a1a0:	d504      	bpl.n	800a1ac <__sflush_r+0x7c>
 800a1a2:	1c42      	adds	r2, r0, #1
 800a1a4:	d101      	bne.n	800a1aa <__sflush_r+0x7a>
 800a1a6:	682b      	ldr	r3, [r5, #0]
 800a1a8:	b903      	cbnz	r3, 800a1ac <__sflush_r+0x7c>
 800a1aa:	6560      	str	r0, [r4, #84]	; 0x54
 800a1ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1ae:	602f      	str	r7, [r5, #0]
 800a1b0:	2900      	cmp	r1, #0
 800a1b2:	d0ca      	beq.n	800a14a <__sflush_r+0x1a>
 800a1b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1b8:	4299      	cmp	r1, r3
 800a1ba:	d002      	beq.n	800a1c2 <__sflush_r+0x92>
 800a1bc:	4628      	mov	r0, r5
 800a1be:	f7ff fc49 	bl	8009a54 <_free_r>
 800a1c2:	2000      	movs	r0, #0
 800a1c4:	6360      	str	r0, [r4, #52]	; 0x34
 800a1c6:	e7c1      	b.n	800a14c <__sflush_r+0x1c>
 800a1c8:	6a21      	ldr	r1, [r4, #32]
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	4628      	mov	r0, r5
 800a1ce:	47b0      	blx	r6
 800a1d0:	1c41      	adds	r1, r0, #1
 800a1d2:	d1c7      	bne.n	800a164 <__sflush_r+0x34>
 800a1d4:	682b      	ldr	r3, [r5, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d0c4      	beq.n	800a164 <__sflush_r+0x34>
 800a1da:	2b1d      	cmp	r3, #29
 800a1dc:	d001      	beq.n	800a1e2 <__sflush_r+0xb2>
 800a1de:	2b16      	cmp	r3, #22
 800a1e0:	d101      	bne.n	800a1e6 <__sflush_r+0xb6>
 800a1e2:	602f      	str	r7, [r5, #0]
 800a1e4:	e7b1      	b.n	800a14a <__sflush_r+0x1a>
 800a1e6:	89a3      	ldrh	r3, [r4, #12]
 800a1e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1ec:	81a3      	strh	r3, [r4, #12]
 800a1ee:	e7ad      	b.n	800a14c <__sflush_r+0x1c>
 800a1f0:	690f      	ldr	r7, [r1, #16]
 800a1f2:	2f00      	cmp	r7, #0
 800a1f4:	d0a9      	beq.n	800a14a <__sflush_r+0x1a>
 800a1f6:	0793      	lsls	r3, r2, #30
 800a1f8:	680e      	ldr	r6, [r1, #0]
 800a1fa:	bf08      	it	eq
 800a1fc:	694b      	ldreq	r3, [r1, #20]
 800a1fe:	600f      	str	r7, [r1, #0]
 800a200:	bf18      	it	ne
 800a202:	2300      	movne	r3, #0
 800a204:	eba6 0807 	sub.w	r8, r6, r7
 800a208:	608b      	str	r3, [r1, #8]
 800a20a:	f1b8 0f00 	cmp.w	r8, #0
 800a20e:	dd9c      	ble.n	800a14a <__sflush_r+0x1a>
 800a210:	6a21      	ldr	r1, [r4, #32]
 800a212:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a214:	4643      	mov	r3, r8
 800a216:	463a      	mov	r2, r7
 800a218:	4628      	mov	r0, r5
 800a21a:	47b0      	blx	r6
 800a21c:	2800      	cmp	r0, #0
 800a21e:	dc06      	bgt.n	800a22e <__sflush_r+0xfe>
 800a220:	89a3      	ldrh	r3, [r4, #12]
 800a222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a226:	81a3      	strh	r3, [r4, #12]
 800a228:	f04f 30ff 	mov.w	r0, #4294967295
 800a22c:	e78e      	b.n	800a14c <__sflush_r+0x1c>
 800a22e:	4407      	add	r7, r0
 800a230:	eba8 0800 	sub.w	r8, r8, r0
 800a234:	e7e9      	b.n	800a20a <__sflush_r+0xda>
 800a236:	bf00      	nop
 800a238:	20400001 	.word	0x20400001

0800a23c <_fflush_r>:
 800a23c:	b538      	push	{r3, r4, r5, lr}
 800a23e:	690b      	ldr	r3, [r1, #16]
 800a240:	4605      	mov	r5, r0
 800a242:	460c      	mov	r4, r1
 800a244:	b913      	cbnz	r3, 800a24c <_fflush_r+0x10>
 800a246:	2500      	movs	r5, #0
 800a248:	4628      	mov	r0, r5
 800a24a:	bd38      	pop	{r3, r4, r5, pc}
 800a24c:	b118      	cbz	r0, 800a256 <_fflush_r+0x1a>
 800a24e:	6983      	ldr	r3, [r0, #24]
 800a250:	b90b      	cbnz	r3, 800a256 <_fflush_r+0x1a>
 800a252:	f000 f887 	bl	800a364 <__sinit>
 800a256:	4b14      	ldr	r3, [pc, #80]	; (800a2a8 <_fflush_r+0x6c>)
 800a258:	429c      	cmp	r4, r3
 800a25a:	d11b      	bne.n	800a294 <_fflush_r+0x58>
 800a25c:	686c      	ldr	r4, [r5, #4]
 800a25e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d0ef      	beq.n	800a246 <_fflush_r+0xa>
 800a266:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a268:	07d0      	lsls	r0, r2, #31
 800a26a:	d404      	bmi.n	800a276 <_fflush_r+0x3a>
 800a26c:	0599      	lsls	r1, r3, #22
 800a26e:	d402      	bmi.n	800a276 <_fflush_r+0x3a>
 800a270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a272:	f000 f915 	bl	800a4a0 <__retarget_lock_acquire_recursive>
 800a276:	4628      	mov	r0, r5
 800a278:	4621      	mov	r1, r4
 800a27a:	f7ff ff59 	bl	800a130 <__sflush_r>
 800a27e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a280:	07da      	lsls	r2, r3, #31
 800a282:	4605      	mov	r5, r0
 800a284:	d4e0      	bmi.n	800a248 <_fflush_r+0xc>
 800a286:	89a3      	ldrh	r3, [r4, #12]
 800a288:	059b      	lsls	r3, r3, #22
 800a28a:	d4dd      	bmi.n	800a248 <_fflush_r+0xc>
 800a28c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a28e:	f000 f908 	bl	800a4a2 <__retarget_lock_release_recursive>
 800a292:	e7d9      	b.n	800a248 <_fflush_r+0xc>
 800a294:	4b05      	ldr	r3, [pc, #20]	; (800a2ac <_fflush_r+0x70>)
 800a296:	429c      	cmp	r4, r3
 800a298:	d101      	bne.n	800a29e <_fflush_r+0x62>
 800a29a:	68ac      	ldr	r4, [r5, #8]
 800a29c:	e7df      	b.n	800a25e <_fflush_r+0x22>
 800a29e:	4b04      	ldr	r3, [pc, #16]	; (800a2b0 <_fflush_r+0x74>)
 800a2a0:	429c      	cmp	r4, r3
 800a2a2:	bf08      	it	eq
 800a2a4:	68ec      	ldreq	r4, [r5, #12]
 800a2a6:	e7da      	b.n	800a25e <_fflush_r+0x22>
 800a2a8:	0800ab54 	.word	0x0800ab54
 800a2ac:	0800ab74 	.word	0x0800ab74
 800a2b0:	0800ab34 	.word	0x0800ab34

0800a2b4 <std>:
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	b510      	push	{r4, lr}
 800a2b8:	4604      	mov	r4, r0
 800a2ba:	e9c0 3300 	strd	r3, r3, [r0]
 800a2be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2c2:	6083      	str	r3, [r0, #8]
 800a2c4:	8181      	strh	r1, [r0, #12]
 800a2c6:	6643      	str	r3, [r0, #100]	; 0x64
 800a2c8:	81c2      	strh	r2, [r0, #14]
 800a2ca:	6183      	str	r3, [r0, #24]
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	2208      	movs	r2, #8
 800a2d0:	305c      	adds	r0, #92	; 0x5c
 800a2d2:	f7fd fd1f 	bl	8007d14 <memset>
 800a2d6:	4b05      	ldr	r3, [pc, #20]	; (800a2ec <std+0x38>)
 800a2d8:	6263      	str	r3, [r4, #36]	; 0x24
 800a2da:	4b05      	ldr	r3, [pc, #20]	; (800a2f0 <std+0x3c>)
 800a2dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a2de:	4b05      	ldr	r3, [pc, #20]	; (800a2f4 <std+0x40>)
 800a2e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a2e2:	4b05      	ldr	r3, [pc, #20]	; (800a2f8 <std+0x44>)
 800a2e4:	6224      	str	r4, [r4, #32]
 800a2e6:	6323      	str	r3, [r4, #48]	; 0x30
 800a2e8:	bd10      	pop	{r4, pc}
 800a2ea:	bf00      	nop
 800a2ec:	0800a5f9 	.word	0x0800a5f9
 800a2f0:	0800a61b 	.word	0x0800a61b
 800a2f4:	0800a653 	.word	0x0800a653
 800a2f8:	0800a677 	.word	0x0800a677

0800a2fc <_cleanup_r>:
 800a2fc:	4901      	ldr	r1, [pc, #4]	; (800a304 <_cleanup_r+0x8>)
 800a2fe:	f000 b8af 	b.w	800a460 <_fwalk_reent>
 800a302:	bf00      	nop
 800a304:	0800a23d 	.word	0x0800a23d

0800a308 <__sfmoreglue>:
 800a308:	b570      	push	{r4, r5, r6, lr}
 800a30a:	2268      	movs	r2, #104	; 0x68
 800a30c:	1e4d      	subs	r5, r1, #1
 800a30e:	4355      	muls	r5, r2
 800a310:	460e      	mov	r6, r1
 800a312:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a316:	f7ff fc09 	bl	8009b2c <_malloc_r>
 800a31a:	4604      	mov	r4, r0
 800a31c:	b140      	cbz	r0, 800a330 <__sfmoreglue+0x28>
 800a31e:	2100      	movs	r1, #0
 800a320:	e9c0 1600 	strd	r1, r6, [r0]
 800a324:	300c      	adds	r0, #12
 800a326:	60a0      	str	r0, [r4, #8]
 800a328:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a32c:	f7fd fcf2 	bl	8007d14 <memset>
 800a330:	4620      	mov	r0, r4
 800a332:	bd70      	pop	{r4, r5, r6, pc}

0800a334 <__sfp_lock_acquire>:
 800a334:	4801      	ldr	r0, [pc, #4]	; (800a33c <__sfp_lock_acquire+0x8>)
 800a336:	f000 b8b3 	b.w	800a4a0 <__retarget_lock_acquire_recursive>
 800a33a:	bf00      	nop
 800a33c:	20000415 	.word	0x20000415

0800a340 <__sfp_lock_release>:
 800a340:	4801      	ldr	r0, [pc, #4]	; (800a348 <__sfp_lock_release+0x8>)
 800a342:	f000 b8ae 	b.w	800a4a2 <__retarget_lock_release_recursive>
 800a346:	bf00      	nop
 800a348:	20000415 	.word	0x20000415

0800a34c <__sinit_lock_acquire>:
 800a34c:	4801      	ldr	r0, [pc, #4]	; (800a354 <__sinit_lock_acquire+0x8>)
 800a34e:	f000 b8a7 	b.w	800a4a0 <__retarget_lock_acquire_recursive>
 800a352:	bf00      	nop
 800a354:	20000416 	.word	0x20000416

0800a358 <__sinit_lock_release>:
 800a358:	4801      	ldr	r0, [pc, #4]	; (800a360 <__sinit_lock_release+0x8>)
 800a35a:	f000 b8a2 	b.w	800a4a2 <__retarget_lock_release_recursive>
 800a35e:	bf00      	nop
 800a360:	20000416 	.word	0x20000416

0800a364 <__sinit>:
 800a364:	b510      	push	{r4, lr}
 800a366:	4604      	mov	r4, r0
 800a368:	f7ff fff0 	bl	800a34c <__sinit_lock_acquire>
 800a36c:	69a3      	ldr	r3, [r4, #24]
 800a36e:	b11b      	cbz	r3, 800a378 <__sinit+0x14>
 800a370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a374:	f7ff bff0 	b.w	800a358 <__sinit_lock_release>
 800a378:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a37c:	6523      	str	r3, [r4, #80]	; 0x50
 800a37e:	4b13      	ldr	r3, [pc, #76]	; (800a3cc <__sinit+0x68>)
 800a380:	4a13      	ldr	r2, [pc, #76]	; (800a3d0 <__sinit+0x6c>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	62a2      	str	r2, [r4, #40]	; 0x28
 800a386:	42a3      	cmp	r3, r4
 800a388:	bf04      	itt	eq
 800a38a:	2301      	moveq	r3, #1
 800a38c:	61a3      	streq	r3, [r4, #24]
 800a38e:	4620      	mov	r0, r4
 800a390:	f000 f820 	bl	800a3d4 <__sfp>
 800a394:	6060      	str	r0, [r4, #4]
 800a396:	4620      	mov	r0, r4
 800a398:	f000 f81c 	bl	800a3d4 <__sfp>
 800a39c:	60a0      	str	r0, [r4, #8]
 800a39e:	4620      	mov	r0, r4
 800a3a0:	f000 f818 	bl	800a3d4 <__sfp>
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	60e0      	str	r0, [r4, #12]
 800a3a8:	2104      	movs	r1, #4
 800a3aa:	6860      	ldr	r0, [r4, #4]
 800a3ac:	f7ff ff82 	bl	800a2b4 <std>
 800a3b0:	68a0      	ldr	r0, [r4, #8]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	2109      	movs	r1, #9
 800a3b6:	f7ff ff7d 	bl	800a2b4 <std>
 800a3ba:	68e0      	ldr	r0, [r4, #12]
 800a3bc:	2202      	movs	r2, #2
 800a3be:	2112      	movs	r1, #18
 800a3c0:	f7ff ff78 	bl	800a2b4 <std>
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	61a3      	str	r3, [r4, #24]
 800a3c8:	e7d2      	b.n	800a370 <__sinit+0xc>
 800a3ca:	bf00      	nop
 800a3cc:	0800a7bc 	.word	0x0800a7bc
 800a3d0:	0800a2fd 	.word	0x0800a2fd

0800a3d4 <__sfp>:
 800a3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3d6:	4607      	mov	r7, r0
 800a3d8:	f7ff ffac 	bl	800a334 <__sfp_lock_acquire>
 800a3dc:	4b1e      	ldr	r3, [pc, #120]	; (800a458 <__sfp+0x84>)
 800a3de:	681e      	ldr	r6, [r3, #0]
 800a3e0:	69b3      	ldr	r3, [r6, #24]
 800a3e2:	b913      	cbnz	r3, 800a3ea <__sfp+0x16>
 800a3e4:	4630      	mov	r0, r6
 800a3e6:	f7ff ffbd 	bl	800a364 <__sinit>
 800a3ea:	3648      	adds	r6, #72	; 0x48
 800a3ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	d503      	bpl.n	800a3fc <__sfp+0x28>
 800a3f4:	6833      	ldr	r3, [r6, #0]
 800a3f6:	b30b      	cbz	r3, 800a43c <__sfp+0x68>
 800a3f8:	6836      	ldr	r6, [r6, #0]
 800a3fa:	e7f7      	b.n	800a3ec <__sfp+0x18>
 800a3fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a400:	b9d5      	cbnz	r5, 800a438 <__sfp+0x64>
 800a402:	4b16      	ldr	r3, [pc, #88]	; (800a45c <__sfp+0x88>)
 800a404:	60e3      	str	r3, [r4, #12]
 800a406:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a40a:	6665      	str	r5, [r4, #100]	; 0x64
 800a40c:	f000 f847 	bl	800a49e <__retarget_lock_init_recursive>
 800a410:	f7ff ff96 	bl	800a340 <__sfp_lock_release>
 800a414:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a418:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a41c:	6025      	str	r5, [r4, #0]
 800a41e:	61a5      	str	r5, [r4, #24]
 800a420:	2208      	movs	r2, #8
 800a422:	4629      	mov	r1, r5
 800a424:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a428:	f7fd fc74 	bl	8007d14 <memset>
 800a42c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a430:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a434:	4620      	mov	r0, r4
 800a436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a438:	3468      	adds	r4, #104	; 0x68
 800a43a:	e7d9      	b.n	800a3f0 <__sfp+0x1c>
 800a43c:	2104      	movs	r1, #4
 800a43e:	4638      	mov	r0, r7
 800a440:	f7ff ff62 	bl	800a308 <__sfmoreglue>
 800a444:	4604      	mov	r4, r0
 800a446:	6030      	str	r0, [r6, #0]
 800a448:	2800      	cmp	r0, #0
 800a44a:	d1d5      	bne.n	800a3f8 <__sfp+0x24>
 800a44c:	f7ff ff78 	bl	800a340 <__sfp_lock_release>
 800a450:	230c      	movs	r3, #12
 800a452:	603b      	str	r3, [r7, #0]
 800a454:	e7ee      	b.n	800a434 <__sfp+0x60>
 800a456:	bf00      	nop
 800a458:	0800a7bc 	.word	0x0800a7bc
 800a45c:	ffff0001 	.word	0xffff0001

0800a460 <_fwalk_reent>:
 800a460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a464:	4606      	mov	r6, r0
 800a466:	4688      	mov	r8, r1
 800a468:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a46c:	2700      	movs	r7, #0
 800a46e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a472:	f1b9 0901 	subs.w	r9, r9, #1
 800a476:	d505      	bpl.n	800a484 <_fwalk_reent+0x24>
 800a478:	6824      	ldr	r4, [r4, #0]
 800a47a:	2c00      	cmp	r4, #0
 800a47c:	d1f7      	bne.n	800a46e <_fwalk_reent+0xe>
 800a47e:	4638      	mov	r0, r7
 800a480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a484:	89ab      	ldrh	r3, [r5, #12]
 800a486:	2b01      	cmp	r3, #1
 800a488:	d907      	bls.n	800a49a <_fwalk_reent+0x3a>
 800a48a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a48e:	3301      	adds	r3, #1
 800a490:	d003      	beq.n	800a49a <_fwalk_reent+0x3a>
 800a492:	4629      	mov	r1, r5
 800a494:	4630      	mov	r0, r6
 800a496:	47c0      	blx	r8
 800a498:	4307      	orrs	r7, r0
 800a49a:	3568      	adds	r5, #104	; 0x68
 800a49c:	e7e9      	b.n	800a472 <_fwalk_reent+0x12>

0800a49e <__retarget_lock_init_recursive>:
 800a49e:	4770      	bx	lr

0800a4a0 <__retarget_lock_acquire_recursive>:
 800a4a0:	4770      	bx	lr

0800a4a2 <__retarget_lock_release_recursive>:
 800a4a2:	4770      	bx	lr

0800a4a4 <__swhatbuf_r>:
 800a4a4:	b570      	push	{r4, r5, r6, lr}
 800a4a6:	460e      	mov	r6, r1
 800a4a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4ac:	2900      	cmp	r1, #0
 800a4ae:	b096      	sub	sp, #88	; 0x58
 800a4b0:	4614      	mov	r4, r2
 800a4b2:	461d      	mov	r5, r3
 800a4b4:	da08      	bge.n	800a4c8 <__swhatbuf_r+0x24>
 800a4b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	602a      	str	r2, [r5, #0]
 800a4be:	061a      	lsls	r2, r3, #24
 800a4c0:	d410      	bmi.n	800a4e4 <__swhatbuf_r+0x40>
 800a4c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4c6:	e00e      	b.n	800a4e6 <__swhatbuf_r+0x42>
 800a4c8:	466a      	mov	r2, sp
 800a4ca:	f000 f8fb 	bl	800a6c4 <_fstat_r>
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	dbf1      	blt.n	800a4b6 <__swhatbuf_r+0x12>
 800a4d2:	9a01      	ldr	r2, [sp, #4]
 800a4d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a4d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a4dc:	425a      	negs	r2, r3
 800a4de:	415a      	adcs	r2, r3
 800a4e0:	602a      	str	r2, [r5, #0]
 800a4e2:	e7ee      	b.n	800a4c2 <__swhatbuf_r+0x1e>
 800a4e4:	2340      	movs	r3, #64	; 0x40
 800a4e6:	2000      	movs	r0, #0
 800a4e8:	6023      	str	r3, [r4, #0]
 800a4ea:	b016      	add	sp, #88	; 0x58
 800a4ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a4f0 <__smakebuf_r>:
 800a4f0:	898b      	ldrh	r3, [r1, #12]
 800a4f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a4f4:	079d      	lsls	r5, r3, #30
 800a4f6:	4606      	mov	r6, r0
 800a4f8:	460c      	mov	r4, r1
 800a4fa:	d507      	bpl.n	800a50c <__smakebuf_r+0x1c>
 800a4fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a500:	6023      	str	r3, [r4, #0]
 800a502:	6123      	str	r3, [r4, #16]
 800a504:	2301      	movs	r3, #1
 800a506:	6163      	str	r3, [r4, #20]
 800a508:	b002      	add	sp, #8
 800a50a:	bd70      	pop	{r4, r5, r6, pc}
 800a50c:	ab01      	add	r3, sp, #4
 800a50e:	466a      	mov	r2, sp
 800a510:	f7ff ffc8 	bl	800a4a4 <__swhatbuf_r>
 800a514:	9900      	ldr	r1, [sp, #0]
 800a516:	4605      	mov	r5, r0
 800a518:	4630      	mov	r0, r6
 800a51a:	f7ff fb07 	bl	8009b2c <_malloc_r>
 800a51e:	b948      	cbnz	r0, 800a534 <__smakebuf_r+0x44>
 800a520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a524:	059a      	lsls	r2, r3, #22
 800a526:	d4ef      	bmi.n	800a508 <__smakebuf_r+0x18>
 800a528:	f023 0303 	bic.w	r3, r3, #3
 800a52c:	f043 0302 	orr.w	r3, r3, #2
 800a530:	81a3      	strh	r3, [r4, #12]
 800a532:	e7e3      	b.n	800a4fc <__smakebuf_r+0xc>
 800a534:	4b0d      	ldr	r3, [pc, #52]	; (800a56c <__smakebuf_r+0x7c>)
 800a536:	62b3      	str	r3, [r6, #40]	; 0x28
 800a538:	89a3      	ldrh	r3, [r4, #12]
 800a53a:	6020      	str	r0, [r4, #0]
 800a53c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a540:	81a3      	strh	r3, [r4, #12]
 800a542:	9b00      	ldr	r3, [sp, #0]
 800a544:	6163      	str	r3, [r4, #20]
 800a546:	9b01      	ldr	r3, [sp, #4]
 800a548:	6120      	str	r0, [r4, #16]
 800a54a:	b15b      	cbz	r3, 800a564 <__smakebuf_r+0x74>
 800a54c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a550:	4630      	mov	r0, r6
 800a552:	f000 f8c9 	bl	800a6e8 <_isatty_r>
 800a556:	b128      	cbz	r0, 800a564 <__smakebuf_r+0x74>
 800a558:	89a3      	ldrh	r3, [r4, #12]
 800a55a:	f023 0303 	bic.w	r3, r3, #3
 800a55e:	f043 0301 	orr.w	r3, r3, #1
 800a562:	81a3      	strh	r3, [r4, #12]
 800a564:	89a0      	ldrh	r0, [r4, #12]
 800a566:	4305      	orrs	r5, r0
 800a568:	81a5      	strh	r5, [r4, #12]
 800a56a:	e7cd      	b.n	800a508 <__smakebuf_r+0x18>
 800a56c:	0800a2fd 	.word	0x0800a2fd

0800a570 <_raise_r>:
 800a570:	291f      	cmp	r1, #31
 800a572:	b538      	push	{r3, r4, r5, lr}
 800a574:	4604      	mov	r4, r0
 800a576:	460d      	mov	r5, r1
 800a578:	d904      	bls.n	800a584 <_raise_r+0x14>
 800a57a:	2316      	movs	r3, #22
 800a57c:	6003      	str	r3, [r0, #0]
 800a57e:	f04f 30ff 	mov.w	r0, #4294967295
 800a582:	bd38      	pop	{r3, r4, r5, pc}
 800a584:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a586:	b112      	cbz	r2, 800a58e <_raise_r+0x1e>
 800a588:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a58c:	b94b      	cbnz	r3, 800a5a2 <_raise_r+0x32>
 800a58e:	4620      	mov	r0, r4
 800a590:	f000 f830 	bl	800a5f4 <_getpid_r>
 800a594:	462a      	mov	r2, r5
 800a596:	4601      	mov	r1, r0
 800a598:	4620      	mov	r0, r4
 800a59a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a59e:	f000 b817 	b.w	800a5d0 <_kill_r>
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d00a      	beq.n	800a5bc <_raise_r+0x4c>
 800a5a6:	1c59      	adds	r1, r3, #1
 800a5a8:	d103      	bne.n	800a5b2 <_raise_r+0x42>
 800a5aa:	2316      	movs	r3, #22
 800a5ac:	6003      	str	r3, [r0, #0]
 800a5ae:	2001      	movs	r0, #1
 800a5b0:	e7e7      	b.n	800a582 <_raise_r+0x12>
 800a5b2:	2400      	movs	r4, #0
 800a5b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	4798      	blx	r3
 800a5bc:	2000      	movs	r0, #0
 800a5be:	e7e0      	b.n	800a582 <_raise_r+0x12>

0800a5c0 <raise>:
 800a5c0:	4b02      	ldr	r3, [pc, #8]	; (800a5cc <raise+0xc>)
 800a5c2:	4601      	mov	r1, r0
 800a5c4:	6818      	ldr	r0, [r3, #0]
 800a5c6:	f7ff bfd3 	b.w	800a570 <_raise_r>
 800a5ca:	bf00      	nop
 800a5cc:	2000000c 	.word	0x2000000c

0800a5d0 <_kill_r>:
 800a5d0:	b538      	push	{r3, r4, r5, lr}
 800a5d2:	4d07      	ldr	r5, [pc, #28]	; (800a5f0 <_kill_r+0x20>)
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	4604      	mov	r4, r0
 800a5d8:	4608      	mov	r0, r1
 800a5da:	4611      	mov	r1, r2
 800a5dc:	602b      	str	r3, [r5, #0]
 800a5de:	f7f7 f9cd 	bl	800197c <_kill>
 800a5e2:	1c43      	adds	r3, r0, #1
 800a5e4:	d102      	bne.n	800a5ec <_kill_r+0x1c>
 800a5e6:	682b      	ldr	r3, [r5, #0]
 800a5e8:	b103      	cbz	r3, 800a5ec <_kill_r+0x1c>
 800a5ea:	6023      	str	r3, [r4, #0]
 800a5ec:	bd38      	pop	{r3, r4, r5, pc}
 800a5ee:	bf00      	nop
 800a5f0:	20000410 	.word	0x20000410

0800a5f4 <_getpid_r>:
 800a5f4:	f7f7 b9ba 	b.w	800196c <_getpid>

0800a5f8 <__sread>:
 800a5f8:	b510      	push	{r4, lr}
 800a5fa:	460c      	mov	r4, r1
 800a5fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a600:	f000 f894 	bl	800a72c <_read_r>
 800a604:	2800      	cmp	r0, #0
 800a606:	bfab      	itete	ge
 800a608:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a60a:	89a3      	ldrhlt	r3, [r4, #12]
 800a60c:	181b      	addge	r3, r3, r0
 800a60e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a612:	bfac      	ite	ge
 800a614:	6563      	strge	r3, [r4, #84]	; 0x54
 800a616:	81a3      	strhlt	r3, [r4, #12]
 800a618:	bd10      	pop	{r4, pc}

0800a61a <__swrite>:
 800a61a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a61e:	461f      	mov	r7, r3
 800a620:	898b      	ldrh	r3, [r1, #12]
 800a622:	05db      	lsls	r3, r3, #23
 800a624:	4605      	mov	r5, r0
 800a626:	460c      	mov	r4, r1
 800a628:	4616      	mov	r6, r2
 800a62a:	d505      	bpl.n	800a638 <__swrite+0x1e>
 800a62c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a630:	2302      	movs	r3, #2
 800a632:	2200      	movs	r2, #0
 800a634:	f000 f868 	bl	800a708 <_lseek_r>
 800a638:	89a3      	ldrh	r3, [r4, #12]
 800a63a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a63e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a642:	81a3      	strh	r3, [r4, #12]
 800a644:	4632      	mov	r2, r6
 800a646:	463b      	mov	r3, r7
 800a648:	4628      	mov	r0, r5
 800a64a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a64e:	f000 b817 	b.w	800a680 <_write_r>

0800a652 <__sseek>:
 800a652:	b510      	push	{r4, lr}
 800a654:	460c      	mov	r4, r1
 800a656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a65a:	f000 f855 	bl	800a708 <_lseek_r>
 800a65e:	1c43      	adds	r3, r0, #1
 800a660:	89a3      	ldrh	r3, [r4, #12]
 800a662:	bf15      	itete	ne
 800a664:	6560      	strne	r0, [r4, #84]	; 0x54
 800a666:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a66a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a66e:	81a3      	strheq	r3, [r4, #12]
 800a670:	bf18      	it	ne
 800a672:	81a3      	strhne	r3, [r4, #12]
 800a674:	bd10      	pop	{r4, pc}

0800a676 <__sclose>:
 800a676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a67a:	f000 b813 	b.w	800a6a4 <_close_r>
	...

0800a680 <_write_r>:
 800a680:	b538      	push	{r3, r4, r5, lr}
 800a682:	4d07      	ldr	r5, [pc, #28]	; (800a6a0 <_write_r+0x20>)
 800a684:	4604      	mov	r4, r0
 800a686:	4608      	mov	r0, r1
 800a688:	4611      	mov	r1, r2
 800a68a:	2200      	movs	r2, #0
 800a68c:	602a      	str	r2, [r5, #0]
 800a68e:	461a      	mov	r2, r3
 800a690:	f7f7 f9ab 	bl	80019ea <_write>
 800a694:	1c43      	adds	r3, r0, #1
 800a696:	d102      	bne.n	800a69e <_write_r+0x1e>
 800a698:	682b      	ldr	r3, [r5, #0]
 800a69a:	b103      	cbz	r3, 800a69e <_write_r+0x1e>
 800a69c:	6023      	str	r3, [r4, #0]
 800a69e:	bd38      	pop	{r3, r4, r5, pc}
 800a6a0:	20000410 	.word	0x20000410

0800a6a4 <_close_r>:
 800a6a4:	b538      	push	{r3, r4, r5, lr}
 800a6a6:	4d06      	ldr	r5, [pc, #24]	; (800a6c0 <_close_r+0x1c>)
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	4604      	mov	r4, r0
 800a6ac:	4608      	mov	r0, r1
 800a6ae:	602b      	str	r3, [r5, #0]
 800a6b0:	f7f7 f9b7 	bl	8001a22 <_close>
 800a6b4:	1c43      	adds	r3, r0, #1
 800a6b6:	d102      	bne.n	800a6be <_close_r+0x1a>
 800a6b8:	682b      	ldr	r3, [r5, #0]
 800a6ba:	b103      	cbz	r3, 800a6be <_close_r+0x1a>
 800a6bc:	6023      	str	r3, [r4, #0]
 800a6be:	bd38      	pop	{r3, r4, r5, pc}
 800a6c0:	20000410 	.word	0x20000410

0800a6c4 <_fstat_r>:
 800a6c4:	b538      	push	{r3, r4, r5, lr}
 800a6c6:	4d07      	ldr	r5, [pc, #28]	; (800a6e4 <_fstat_r+0x20>)
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	4604      	mov	r4, r0
 800a6cc:	4608      	mov	r0, r1
 800a6ce:	4611      	mov	r1, r2
 800a6d0:	602b      	str	r3, [r5, #0]
 800a6d2:	f7f7 f9b2 	bl	8001a3a <_fstat>
 800a6d6:	1c43      	adds	r3, r0, #1
 800a6d8:	d102      	bne.n	800a6e0 <_fstat_r+0x1c>
 800a6da:	682b      	ldr	r3, [r5, #0]
 800a6dc:	b103      	cbz	r3, 800a6e0 <_fstat_r+0x1c>
 800a6de:	6023      	str	r3, [r4, #0]
 800a6e0:	bd38      	pop	{r3, r4, r5, pc}
 800a6e2:	bf00      	nop
 800a6e4:	20000410 	.word	0x20000410

0800a6e8 <_isatty_r>:
 800a6e8:	b538      	push	{r3, r4, r5, lr}
 800a6ea:	4d06      	ldr	r5, [pc, #24]	; (800a704 <_isatty_r+0x1c>)
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	4608      	mov	r0, r1
 800a6f2:	602b      	str	r3, [r5, #0]
 800a6f4:	f7f7 f9b1 	bl	8001a5a <_isatty>
 800a6f8:	1c43      	adds	r3, r0, #1
 800a6fa:	d102      	bne.n	800a702 <_isatty_r+0x1a>
 800a6fc:	682b      	ldr	r3, [r5, #0]
 800a6fe:	b103      	cbz	r3, 800a702 <_isatty_r+0x1a>
 800a700:	6023      	str	r3, [r4, #0]
 800a702:	bd38      	pop	{r3, r4, r5, pc}
 800a704:	20000410 	.word	0x20000410

0800a708 <_lseek_r>:
 800a708:	b538      	push	{r3, r4, r5, lr}
 800a70a:	4d07      	ldr	r5, [pc, #28]	; (800a728 <_lseek_r+0x20>)
 800a70c:	4604      	mov	r4, r0
 800a70e:	4608      	mov	r0, r1
 800a710:	4611      	mov	r1, r2
 800a712:	2200      	movs	r2, #0
 800a714:	602a      	str	r2, [r5, #0]
 800a716:	461a      	mov	r2, r3
 800a718:	f7f7 f9aa 	bl	8001a70 <_lseek>
 800a71c:	1c43      	adds	r3, r0, #1
 800a71e:	d102      	bne.n	800a726 <_lseek_r+0x1e>
 800a720:	682b      	ldr	r3, [r5, #0]
 800a722:	b103      	cbz	r3, 800a726 <_lseek_r+0x1e>
 800a724:	6023      	str	r3, [r4, #0]
 800a726:	bd38      	pop	{r3, r4, r5, pc}
 800a728:	20000410 	.word	0x20000410

0800a72c <_read_r>:
 800a72c:	b538      	push	{r3, r4, r5, lr}
 800a72e:	4d07      	ldr	r5, [pc, #28]	; (800a74c <_read_r+0x20>)
 800a730:	4604      	mov	r4, r0
 800a732:	4608      	mov	r0, r1
 800a734:	4611      	mov	r1, r2
 800a736:	2200      	movs	r2, #0
 800a738:	602a      	str	r2, [r5, #0]
 800a73a:	461a      	mov	r2, r3
 800a73c:	f7f7 f938 	bl	80019b0 <_read>
 800a740:	1c43      	adds	r3, r0, #1
 800a742:	d102      	bne.n	800a74a <_read_r+0x1e>
 800a744:	682b      	ldr	r3, [r5, #0]
 800a746:	b103      	cbz	r3, 800a74a <_read_r+0x1e>
 800a748:	6023      	str	r3, [r4, #0]
 800a74a:	bd38      	pop	{r3, r4, r5, pc}
 800a74c:	20000410 	.word	0x20000410

0800a750 <_init>:
 800a750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a752:	bf00      	nop
 800a754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a756:	bc08      	pop	{r3}
 800a758:	469e      	mov	lr, r3
 800a75a:	4770      	bx	lr

0800a75c <_fini>:
 800a75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a75e:	bf00      	nop
 800a760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a762:	bc08      	pop	{r3}
 800a764:	469e      	mov	lr, r3
 800a766:	4770      	bx	lr
