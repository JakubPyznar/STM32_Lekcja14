
Lekcja14_HC_SR04_7seg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a358  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800a4e8  0800a4e8  0001a4e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a914  0800a914  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a914  0800a914  0001a914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a91c  0800a91c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a91c  0800a91c  0001a91c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a920  0800a920  0001a920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  200001dc  0800ab00  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  0800ab00  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017163  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f85  00000000  00000000  0003736f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  0003a2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003b718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ab69  00000000  00000000  0003c9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001863e  00000000  00000000  00067549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109bdc  00000000  00000000  0007fb87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00189763  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064f4  00000000  00000000  001897b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a4d0 	.word	0x0800a4d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800a4d0 	.word	0x0800a4d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
 8000fac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fae:	4b30      	ldr	r3, [pc, #192]	; (8001070 <MX_ADC1_Init+0xe4>)
 8000fb0:	4a30      	ldr	r2, [pc, #192]	; (8001074 <MX_ADC1_Init+0xe8>)
 8000fb2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fb4:	4b2e      	ldr	r3, [pc, #184]	; (8001070 <MX_ADC1_Init+0xe4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fba:	4b2d      	ldr	r3, [pc, #180]	; (8001070 <MX_ADC1_Init+0xe4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc0:	4b2b      	ldr	r3, [pc, #172]	; (8001070 <MX_ADC1_Init+0xe4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fc6:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <MX_ADC1_Init+0xe4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fcc:	4b28      	ldr	r3, [pc, #160]	; (8001070 <MX_ADC1_Init+0xe4>)
 8000fce:	2204      	movs	r2, #4
 8000fd0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fd2:	4b27      	ldr	r3, [pc, #156]	; (8001070 <MX_ADC1_Init+0xe4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fd8:	4b25      	ldr	r3, [pc, #148]	; (8001070 <MX_ADC1_Init+0xe4>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000fde:	4b24      	ldr	r3, [pc, #144]	; (8001070 <MX_ADC1_Init+0xe4>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fe4:	4b22      	ldr	r3, [pc, #136]	; (8001070 <MX_ADC1_Init+0xe4>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fec:	4b20      	ldr	r3, [pc, #128]	; (8001070 <MX_ADC1_Init+0xe4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <MX_ADC1_Init+0xe4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <MX_ADC1_Init+0xe4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001000:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <MX_ADC1_Init+0xe4>)
 8001002:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001006:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001008:	4b19      	ldr	r3, [pc, #100]	; (8001070 <MX_ADC1_Init+0xe4>)
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001010:	4817      	ldr	r0, [pc, #92]	; (8001070 <MX_ADC1_Init+0xe4>)
 8001012:	f001 f9cb 	bl	80023ac <HAL_ADC_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800101c:	f000 fa74 	bl	8001508 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4619      	mov	r1, r3
 800102a:	4811      	ldr	r0, [pc, #68]	; (8001070 <MX_ADC1_Init+0xe4>)
 800102c:	f002 f964 	bl	80032f8 <HAL_ADCEx_MultiModeConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001036:	f000 fa67 	bl	8001508 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <MX_ADC1_Init+0xec>)
 800103c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800103e:	2306      	movs	r3, #6
 8001040:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001042:	2307      	movs	r3, #7
 8001044:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001046:	237f      	movs	r3, #127	; 0x7f
 8001048:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800104a:	2304      	movs	r3, #4
 800104c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	4619      	mov	r1, r3
 8001056:	4806      	ldr	r0, [pc, #24]	; (8001070 <MX_ADC1_Init+0xe4>)
 8001058:	f001 fbc6 	bl	80027e8 <HAL_ADC_ConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8001062:	f000 fa51 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	3728      	adds	r7, #40	; 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200001f8 	.word	0x200001f8
 8001074:	50040000 	.word	0x50040000
 8001078:	3ef08000 	.word	0x3ef08000

0800107c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b0ac      	sub	sp, #176	; 0xb0
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2288      	movs	r2, #136	; 0x88
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f006 fcf7 	bl	8007a90 <memset>
  if(adcHandle->Instance==ADC1)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a27      	ldr	r2, [pc, #156]	; (8001144 <HAL_ADC_MspInit+0xc8>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d146      	bne.n	800113a <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010b0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80010ba:	2301      	movs	r3, #1
 80010bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010be:	2301      	movs	r3, #1
 80010c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80010c2:	2310      	movs	r3, #16
 80010c4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010c6:	2307      	movs	r3, #7
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010ca:	2302      	movs	r3, #2
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010ce:	2302      	movs	r3, #2
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80010d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 fd19 	bl	8004b14 <HAL_RCCEx_PeriphCLKConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80010e8:	f000 fa0e 	bl	8001508 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010ec:	4b16      	ldr	r3, [pc, #88]	; (8001148 <HAL_ADC_MspInit+0xcc>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f0:	4a15      	ldr	r2, [pc, #84]	; (8001148 <HAL_ADC_MspInit+0xcc>)
 80010f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <HAL_ADC_MspInit+0xcc>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <HAL_ADC_MspInit+0xcc>)
 8001106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001108:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <HAL_ADC_MspInit+0xcc>)
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <HAL_ADC_MspInit+0xcc>)
 8001112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800111c:	2301      	movs	r3, #1
 800111e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001122:	230b      	movs	r3, #11
 8001124:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001132:	4619      	mov	r1, r3
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <HAL_ADC_MspInit+0xd0>)
 8001136:	f002 faa1 	bl	800367c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800113a:	bf00      	nop
 800113c:	37b0      	adds	r7, #176	; 0xb0
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	50040000 	.word	0x50040000
 8001148:	40021000 	.word	0x40021000
 800114c:	48000400 	.word	0x48000400

08001150 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	4b3e      	ldr	r3, [pc, #248]	; (8001260 <MX_GPIO_Init+0x110>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	4a3d      	ldr	r2, [pc, #244]	; (8001260 <MX_GPIO_Init+0x110>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001172:	4b3b      	ldr	r3, [pc, #236]	; (8001260 <MX_GPIO_Init+0x110>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117e:	4b38      	ldr	r3, [pc, #224]	; (8001260 <MX_GPIO_Init+0x110>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001182:	4a37      	ldr	r2, [pc, #220]	; (8001260 <MX_GPIO_Init+0x110>)
 8001184:	f043 0304 	orr.w	r3, r3, #4
 8001188:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118a:	4b35      	ldr	r3, [pc, #212]	; (8001260 <MX_GPIO_Init+0x110>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	4b32      	ldr	r3, [pc, #200]	; (8001260 <MX_GPIO_Init+0x110>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119a:	4a31      	ldr	r2, [pc, #196]	; (8001260 <MX_GPIO_Init+0x110>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a2:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <MX_GPIO_Init+0x110>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2110      	movs	r1, #16
 80011b2:	482c      	ldr	r0, [pc, #176]	; (8001264 <MX_GPIO_Init+0x114>)
 80011b4:	f002 fc0c 	bl	80039d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_C_Pin|SEG_E_Pin|SEG_D_Pin|SEG_A_Pin
 80011b8:	2200      	movs	r2, #0
 80011ba:	f64e 0106 	movw	r1, #59398	; 0xe806
 80011be:	482a      	ldr	r0, [pc, #168]	; (8001268 <MX_GPIO_Init+0x118>)
 80011c0:	f002 fc06 	bl	80039d0 <HAL_GPIO_WritePin>
                          |SEG_F_Pin|SEG_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ca:	4827      	ldr	r0, [pc, #156]	; (8001268 <MX_GPIO_Init+0x118>)
 80011cc:	f002 fc00 	bl	80039d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 80011d0:	2201      	movs	r2, #1
 80011d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011da:	f002 fbf9 	bl	80039d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SEG_G_Pin;
 80011de:	2310      	movs	r3, #16
 80011e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SEG_G_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	4619      	mov	r1, r3
 80011f4:	481b      	ldr	r0, [pc, #108]	; (8001264 <MX_GPIO_Init+0x114>)
 80011f6:	f002 fa41 	bl	800367c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = SEG_C_Pin|SEG_E_Pin|SEG_D_Pin|SEG_A_Pin
 80011fa:	f64e 0306 	movw	r3, #59398	; 0xe806
 80011fe:	60fb      	str	r3, [r7, #12]
                          |SEG_F_Pin|SEG_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	2301      	movs	r3, #1
 8001202:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	4619      	mov	r1, r3
 8001212:	4815      	ldr	r0, [pc, #84]	; (8001268 <MX_GPIO_Init+0x118>)
 8001214:	f002 fa32 	bl	800367c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SEG_1_Pin;
 8001218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800121e:	2311      	movs	r3, #17
 8001220:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SEG_1_GPIO_Port, &GPIO_InitStruct);
 800122a:	f107 030c 	add.w	r3, r7, #12
 800122e:	4619      	mov	r1, r3
 8001230:	480d      	ldr	r0, [pc, #52]	; (8001268 <MX_GPIO_Init+0x118>)
 8001232:	f002 fa23 	bl	800367c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SEG_2_Pin;
 8001236:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800123a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800123c:	2311      	movs	r3, #17
 800123e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SEG_2_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	4619      	mov	r1, r3
 800124e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001252:	f002 fa13 	bl	800367c <HAL_GPIO_Init>

}
 8001256:	bf00      	nop
 8001258:	3720      	adds	r7, #32
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000
 8001264:	48000800 	.word	0x48000800
 8001268:	48000400 	.word	0x48000400

0800126c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b0a      	cmp	r3, #10
 8001278:	d102      	bne.n	8001280 <__io_putchar+0x14>
		__io_putchar('\r');
 800127a:	200d      	movs	r0, #13
 800127c:	f7ff fff6 	bl	800126c <__io_putchar>
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001280:	1d39      	adds	r1, r7, #4
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	2201      	movs	r2, #1
 8001288:	4803      	ldr	r0, [pc, #12]	; (8001298 <__io_putchar+0x2c>)
 800128a:	f005 fedb 	bl	8007044 <HAL_UART_Transmit>

	return 1;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000334 	.word	0x20000334
 800129c:	00000000 	.word	0x00000000

080012a0 <calc_sound_speed>:

static float calc_sound_speed(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
	uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 80012a6:	4828      	ldr	r0, [pc, #160]	; (8001348 <calc_sound_speed+0xa8>)
 80012a8:	f001 fa90 	bl	80027cc <HAL_ADC_GetValue>
 80012ac:	6078      	str	r0, [r7, #4]
	float temp = adc_value * 330.0 / 4096.0 / 4.0;
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff f928 	bl	8000504 <__aeabi_ui2d>
 80012b4:	a31e      	add	r3, pc, #120	; (adr r3, 8001330 <calc_sound_speed+0x90>)
 80012b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ba:	f7ff f99d 	bl	80005f8 <__aeabi_dmul>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	f04f 0200 	mov.w	r2, #0
 80012ca:	4b20      	ldr	r3, [pc, #128]	; (800134c <calc_sound_speed+0xac>)
 80012cc:	f7ff fabe 	bl	800084c <__aeabi_ddiv>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <calc_sound_speed+0xb0>)
 80012de:	f7ff fab5 	bl	800084c <__aeabi_ddiv>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff fc7d 	bl	8000be8 <__aeabi_d2f>
 80012ee:	4603      	mov	r3, r0
 80012f0:	603b      	str	r3, [r7, #0]
	return 331.8 + 0.6 * temp;
 80012f2:	6838      	ldr	r0, [r7, #0]
 80012f4:	f7ff f928 	bl	8000548 <__aeabi_f2d>
 80012f8:	a30f      	add	r3, pc, #60	; (adr r3, 8001338 <calc_sound_speed+0x98>)
 80012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fe:	f7ff f97b 	bl	80005f8 <__aeabi_dmul>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4610      	mov	r0, r2
 8001308:	4619      	mov	r1, r3
 800130a:	a30d      	add	r3, pc, #52	; (adr r3, 8001340 <calc_sound_speed+0xa0>)
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	f7fe ffbc 	bl	800028c <__adddf3>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4610      	mov	r0, r2
 800131a:	4619      	mov	r1, r3
 800131c:	f7ff fc64 	bl	8000be8 <__aeabi_d2f>
 8001320:	4603      	mov	r3, r0
 8001322:	ee07 3a90 	vmov	s15, r3
}
 8001326:	eeb0 0a67 	vmov.f32	s0, s15
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	00000000 	.word	0x00000000
 8001334:	4074a000 	.word	0x4074a000
 8001338:	33333333 	.word	0x33333333
 800133c:	3fe33333 	.word	0x3fe33333
 8001340:	cccccccd 	.word	0xcccccccd
 8001344:	4074bccc 	.word	0x4074bccc
 8001348:	200001f8 	.word	0x200001f8
 800134c:	40b00000 	.word	0x40b00000
 8001350:	40100000 	.word	0x40100000
 8001354:	00000000 	.word	0x00000000

08001358 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	ed2d 8b02 	vpush	{d8}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a20      	ldr	r2, [pc, #128]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d12a      	bne.n	80013c2 <HAL_TIM_PeriodElapsedCallback+0x6a>
	{
		uint32_t start = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 800136c:	2100      	movs	r1, #0
 800136e:	481e      	ldr	r0, [pc, #120]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001370:	f004 ffb4 	bl	80062dc <HAL_TIM_ReadCapturedValue>
 8001374:	60f8      	str	r0, [r7, #12]
		uint32_t stop = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 8001376:	2104      	movs	r1, #4
 8001378:	481b      	ldr	r0, [pc, #108]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800137a:	f004 ffaf 	bl	80062dc <HAL_TIM_ReadCapturedValue>
 800137e:	60b8      	str	r0, [r7, #8]
		seg7_show((stop-start) * calc_sound_speed() / 20000.0);
 8001380:	68ba      	ldr	r2, [r7, #8]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	ee07 3a90 	vmov	s15, r3
 800138a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800138e:	f7ff ff87 	bl	80012a0 <calc_sound_speed>
 8001392:	eef0 7a40 	vmov.f32	s15, s0
 8001396:	ee68 7a27 	vmul.f32	s15, s16, s15
 800139a:	ee17 0a90 	vmov	r0, s15
 800139e:	f7ff f8d3 	bl	8000548 <__aeabi_f2d>
 80013a2:	a30f      	add	r3, pc, #60	; (adr r3, 80013e0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80013a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a8:	f7ff fa50 	bl	800084c <__aeabi_ddiv>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff fbf8 	bl	8000ba8 <__aeabi_d2uiz>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f9a0 	bl	8001700 <seg7_show>
	}
	else if (htim == &htim6)
	{
		seg7_update();
	}
}
 80013c0:	e005      	b.n	80013ce <HAL_TIM_PeriodElapsedCallback+0x76>
	else if (htim == &htim6)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a09      	ldr	r2, [pc, #36]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x94>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d101      	bne.n	80013ce <HAL_TIM_PeriodElapsedCallback+0x76>
		seg7_update();
 80013ca:	f000 f9a9 	bl	8001720 <seg7_update>
}
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	ecbd 8b02 	vpop	{d8}
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	f3af 8000 	nop.w
 80013e0:	00000000 	.word	0x00000000
 80013e4:	40d38800 	.word	0x40d38800
 80013e8:	2000029c 	.word	0x2000029c
 80013ec:	200002e8 	.word	0x200002e8

080013f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f4:	f000 fd59 	bl	8001eaa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f8:	f000 f834 	bl	8001464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013fc:	f7ff fea8 	bl	8001150 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001400:	f000 fc9e 	bl	8001d40 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001404:	f000 fb22 	bl	8001a4c <MX_TIM2_Init>
  MX_TIM6_Init();
 8001408:	f000 fbca 	bl	8001ba0 <MX_TIM6_Init>
  MX_ADC1_Init();
 800140c:	f7ff fdbe 	bl	8000f8c <MX_ADC1_Init>
  MX_OPAMP2_Init();
 8001410:	f000 f880 	bl	8001514 <MX_OPAMP2_Init>
  // pomiar czasu jest skomplikowany, bo kanaly mierza czas od rozpoczecia zbocza PWM na kanale 3
  // do zbocza rosnacego/opadajacego sygnalu na kanale 1, czyli mierzymy czas od rozpoczecia wzbudzenia
  // pomiaru do rozpoczecia/zakonczenia odpowiedzi czujnika
  // inicjalizujemy takze generowanie przerwan przez TIM2, w ktorych odczytywane sa
  // pomiary odleglosci i wysylane na wyswietlacz 7seg.
  HAL_TIM_Base_Start_IT(&htim2);
 8001414:	480f      	ldr	r0, [pc, #60]	; (8001454 <main+0x64>)
 8001416:	f004 f891 	bl	800553c <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 800141a:	2100      	movs	r1, #0
 800141c:	480d      	ldr	r0, [pc, #52]	; (8001454 <main+0x64>)
 800141e:	f004 fac7 	bl	80059b0 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8001422:	2104      	movs	r1, #4
 8001424:	480b      	ldr	r0, [pc, #44]	; (8001454 <main+0x64>)
 8001426:	f004 fac3 	bl	80059b0 <HAL_TIM_IC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800142a:	2108      	movs	r1, #8
 800142c:	4809      	ldr	r0, [pc, #36]	; (8001454 <main+0x64>)
 800142e:	f004 f957 	bl	80056e0 <HAL_TIM_PWM_Start>
  // inicjalizacja timera TIM6 ktory bedzie generowal przerwanie, w ktorym
  // wyswietlacz 7seg. bedzie multipleksowany
  HAL_TIM_Base_Start_IT(&htim6);
 8001432:	4809      	ldr	r0, [pc, #36]	; (8001458 <main+0x68>)
 8001434:	f004 f882 	bl	800553c <HAL_TIM_Base_Start_IT>
  // inicjalizacjia odczytu ADC temperatury z analogowego czujnika
  // inicjalizacja wzmacniacza operacyjnego 4x wzmacniajacego sygnal analogowy
  // z termometru
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001438:	217f      	movs	r1, #127	; 0x7f
 800143a:	4808      	ldr	r0, [pc, #32]	; (800145c <main+0x6c>)
 800143c:	f001 fefc 	bl	8003238 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8001440:	4806      	ldr	r0, [pc, #24]	; (800145c <main+0x6c>)
 8001442:	f001 f909 	bl	8002658 <HAL_ADC_Start>
  HAL_OPAMP_SelfCalibrate(&hopamp2);
 8001446:	4806      	ldr	r0, [pc, #24]	; (8001460 <main+0x70>)
 8001448:	f002 fbe1 	bl	8003c0e <HAL_OPAMP_SelfCalibrate>
  HAL_OPAMP_Start(&hopamp2);
 800144c:	4804      	ldr	r0, [pc, #16]	; (8001460 <main+0x70>)
 800144e:	f002 fbad 	bl	8003bac <HAL_OPAMP_Start>

  while (1)
 8001452:	e7fe      	b.n	8001452 <main+0x62>
 8001454:	2000029c 	.word	0x2000029c
 8001458:	200002e8 	.word	0x200002e8
 800145c:	200001f8 	.word	0x200001f8
 8001460:	2000025c 	.word	0x2000025c

08001464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b096      	sub	sp, #88	; 0x58
 8001468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	2244      	movs	r2, #68	; 0x44
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f006 fb0c 	bl	8007a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001478:	463b      	mov	r3, r7
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001486:	f44f 7000 	mov.w	r0, #512	; 0x200
 800148a:	f002 fced 	bl	8003e68 <HAL_PWREx_ControlVoltageScaling>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001494:	f000 f838 	bl	8001508 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001498:	2310      	movs	r3, #16
 800149a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800149c:	2301      	movs	r3, #1
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80014a4:	2360      	movs	r3, #96	; 0x60
 80014a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a8:	2302      	movs	r3, #2
 80014aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80014ac:	2301      	movs	r3, #1
 80014ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014b0:	2301      	movs	r3, #1
 80014b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80014b4:	2328      	movs	r3, #40	; 0x28
 80014b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014b8:	2307      	movs	r3, #7
 80014ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014bc:	2302      	movs	r3, #2
 80014be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014c0:	2302      	movs	r3, #2
 80014c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4618      	mov	r0, r3
 80014ca:	f002 fd23 	bl	8003f14 <HAL_RCC_OscConfig>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80014d4:	f000 f818 	bl	8001508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d8:	230f      	movs	r3, #15
 80014da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014dc:	2303      	movs	r3, #3
 80014de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014ec:	463b      	mov	r3, r7
 80014ee:	2104      	movs	r1, #4
 80014f0:	4618      	mov	r0, r3
 80014f2:	f003 f8eb 	bl	80046cc <HAL_RCC_ClockConfig>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80014fc:	f000 f804 	bl	8001508 <Error_Handler>
  }
}
 8001500:	bf00      	nop
 8001502:	3758      	adds	r7, #88	; 0x58
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800150c:	b672      	cpsid	i
}
 800150e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001510:	e7fe      	b.n	8001510 <Error_Handler+0x8>
	...

08001514 <MX_OPAMP2_Init>:

OPAMP_HandleTypeDef hopamp2;

/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <MX_OPAMP2_Init+0x4c>)
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <MX_OPAMP2_Init+0x50>)
 800151c:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerSupplyRange = OPAMP_POWERSUPPLY_HIGH;
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <MX_OPAMP2_Init+0x4c>)
 8001520:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001524:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <MX_OPAMP2_Init+0x4c>)
 8001528:	2208      	movs	r2, #8
 800152a:	60da      	str	r2, [r3, #12]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <MX_OPAMP2_Init+0x4c>)
 800152e:	2200      	movs	r2, #0
 8001530:	615a      	str	r2, [r3, #20]
  hopamp2.Init.InvertingInput = OPAMP_INVERTINGINPUT_CONNECT_NO;
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <MX_OPAMP2_Init+0x4c>)
 8001534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001538:	611a      	str	r2, [r3, #16]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_4;
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <MX_OPAMP2_Init+0x4c>)
 800153c:	2210      	movs	r2, #16
 800153e:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER;
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <MX_OPAMP2_Init+0x4c>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <MX_OPAMP2_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 800154c:	4804      	ldr	r0, [pc, #16]	; (8001560 <MX_OPAMP2_Init+0x4c>)
 800154e:	f002 fa57 	bl	8003a00 <HAL_OPAMP_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_OPAMP2_Init+0x48>
  {
    Error_Handler();
 8001558:	f7ff ffd6 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	2000025c 	.word	0x2000025c
 8001564:	40007810 	.word	0x40007810

08001568 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	; 0x28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP2)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a21      	ldr	r2, [pc, #132]	; (800160c <HAL_OPAMP_MspInit+0xa4>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d13c      	bne.n	8001604 <HAL_OPAMP_MspInit+0x9c>
  {
  /* USER CODE BEGIN OPAMP2_MspInit 0 */

  /* USER CODE END OPAMP2_MspInit 0 */
    /* OPAMP2 clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 800158a:	4b21      	ldr	r3, [pc, #132]	; (8001610 <HAL_OPAMP_MspInit+0xa8>)
 800158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158e:	4a20      	ldr	r2, [pc, #128]	; (8001610 <HAL_OPAMP_MspInit+0xa8>)
 8001590:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001594:	6593      	str	r3, [r2, #88]	; 0x58
 8001596:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <HAL_OPAMP_MspInit+0xa8>)
 8001598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <HAL_OPAMP_MspInit+0xa8>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	4a1a      	ldr	r2, [pc, #104]	; (8001610 <HAL_OPAMP_MspInit+0xa8>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ae:	4b18      	ldr	r3, [pc, #96]	; (8001610 <HAL_OPAMP_MspInit+0xa8>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <HAL_OPAMP_MspInit+0xa8>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015be:	4a14      	ldr	r2, [pc, #80]	; (8001610 <HAL_OPAMP_MspInit+0xa8>)
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_OPAMP_MspInit+0xa8>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP2 GPIO Configuration
    PA6     ------> OPAMP2_VINP
    PB0     ------> OPAMP2_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015d2:	2340      	movs	r3, #64	; 0x40
 80015d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d6:	2303      	movs	r3, #3
 80015d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	4619      	mov	r1, r3
 80015e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e8:	f002 f848 	bl	800367c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015ec:	2301      	movs	r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015f0:	230b      	movs	r3, #11
 80015f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	4619      	mov	r1, r3
 80015fe:	4805      	ldr	r0, [pc, #20]	; (8001614 <HAL_OPAMP_MspInit+0xac>)
 8001600:	f002 f83c 	bl	800367c <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
}
 8001604:	bf00      	nop
 8001606:	3728      	adds	r7, #40	; 0x28
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40007810 	.word	0x40007810
 8001610:	40021000 	.word	0x40021000
 8001614:	48000400 	.word	0x48000400

08001618 <set_output>:
#include "seg7.h"
#include <stdbool.h>
#include "gpio.h"

static void set_output(uint8_t mask)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, mask & 0x01);
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	b2db      	uxtb	r3, r3
 800162a:	461a      	mov	r2, r3
 800162c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001630:	481f      	ldr	r0, [pc, #124]	; (80016b0 <set_output+0x98>)
 8001632:	f002 f9cd 	bl	80039d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, mask & 0x02);
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	b2db      	uxtb	r3, r3
 800163e:	461a      	mov	r2, r3
 8001640:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001644:	481a      	ldr	r0, [pc, #104]	; (80016b0 <set_output+0x98>)
 8001646:	f002 f9c3 	bl	80039d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, mask & 0x04);
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	b2db      	uxtb	r3, r3
 8001652:	461a      	mov	r2, r3
 8001654:	2102      	movs	r1, #2
 8001656:	4816      	ldr	r0, [pc, #88]	; (80016b0 <set_output+0x98>)
 8001658:	f002 f9ba 	bl	80039d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, mask & 0x08);
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	b2db      	uxtb	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800166a:	4811      	ldr	r0, [pc, #68]	; (80016b0 <set_output+0x98>)
 800166c:	f002 f9b0 	bl	80039d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, mask & 0x10);
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	f003 0310 	and.w	r3, r3, #16
 8001676:	b2db      	uxtb	r3, r3
 8001678:	461a      	mov	r2, r3
 800167a:	2104      	movs	r1, #4
 800167c:	480c      	ldr	r0, [pc, #48]	; (80016b0 <set_output+0x98>)
 800167e:	f002 f9a7 	bl	80039d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, mask & 0x20);
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	f003 0320 	and.w	r3, r3, #32
 8001688:	b2db      	uxtb	r3, r3
 800168a:	461a      	mov	r2, r3
 800168c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001690:	4807      	ldr	r0, [pc, #28]	; (80016b0 <set_output+0x98>)
 8001692:	f002 f99d 	bl	80039d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, mask & 0x40);
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800169c:	b2db      	uxtb	r3, r3
 800169e:	461a      	mov	r2, r3
 80016a0:	2110      	movs	r1, #16
 80016a2:	4804      	ldr	r0, [pc, #16]	; (80016b4 <set_output+0x9c>)
 80016a4:	f002 f994 	bl	80039d0 <HAL_GPIO_WritePin>
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	48000400 	.word	0x48000400
 80016b4:	48000800 	.word	0x48000800

080016b8 <seg7_show_digit>:

static void seg7_show_digit(uint32_t value)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	const uint8_t digit[] =
 80016c0:	4a0d      	ldr	r2, [pc, #52]	; (80016f8 <seg7_show_digit+0x40>)
 80016c2:	f107 030c 	add.w	r3, r7, #12
 80016c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80016c8:	c303      	stmia	r3!, {r0, r1}
 80016ca:	801a      	strh	r2, [r3, #0]
			0b0000111,
			0b1111111,
			0b1101111
	};

	set_output(digit[value % 10]);
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <seg7_show_digit+0x44>)
 80016d0:	fba3 2301 	umull	r2, r3, r3, r1
 80016d4:	08da      	lsrs	r2, r3, #3
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	1aca      	subs	r2, r1, r3
 80016e0:	f102 0318 	add.w	r3, r2, #24
 80016e4:	443b      	add	r3, r7
 80016e6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ff94 	bl	8001618 <set_output>
}
 80016f0:	bf00      	nop
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	0800a4e8 	.word	0x0800a4e8
 80016fc:	cccccccd 	.word	0xcccccccd

08001700 <seg7_show>:

static uint32_t actual_value;
static uint32_t active_digit;

void seg7_show(uint32_t value)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	actual_value = value;
 8001708:	4a04      	ldr	r2, [pc, #16]	; (800171c <seg7_show+0x1c>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6013      	str	r3, [r2, #0]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000290 	.word	0x20000290

08001720 <seg7_update>:

void seg7_update(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 8001724:	2201      	movs	r2, #1
 8001726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800172a:	4827      	ldr	r0, [pc, #156]	; (80017c8 <seg7_update+0xa8>)
 800172c:	f002 f950 	bl	80039d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 8001730:	2201      	movs	r2, #1
 8001732:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173a:	f002 f949 	bl	80039d0 <HAL_GPIO_WritePin>

	switch (active_digit)
 800173e:	4b23      	ldr	r3, [pc, #140]	; (80017cc <seg7_update+0xac>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d002      	beq.n	800174c <seg7_update+0x2c>
 8001746:	2b01      	cmp	r3, #1
 8001748:	d020      	beq.n	800178c <seg7_update+0x6c>
		else						set_output(0b1000000);
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
		active_digit = 0;
		break;
	}
}
 800174a:	e03b      	b.n	80017c4 <seg7_update+0xa4>
		if (actual_value < 100)		seg7_show_digit(actual_value % 10);
 800174c:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <seg7_update+0xb0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b63      	cmp	r3, #99	; 0x63
 8001752:	d80e      	bhi.n	8001772 <seg7_update+0x52>
 8001754:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <seg7_update+0xb0>)
 8001756:	6819      	ldr	r1, [r3, #0]
 8001758:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <seg7_update+0xb4>)
 800175a:	fba3 2301 	umull	r2, r3, r3, r1
 800175e:	08da      	lsrs	r2, r3, #3
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	1aca      	subs	r2, r1, r3
 800176a:	4610      	mov	r0, r2
 800176c:	f7ff ffa4 	bl	80016b8 <seg7_show_digit>
 8001770:	e002      	b.n	8001778 <seg7_update+0x58>
		else						set_output(0b1000000);
 8001772:	2040      	movs	r0, #64	; 0x40
 8001774:	f7ff ff50 	bl	8001618 <set_output>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8001778:	2200      	movs	r2, #0
 800177a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800177e:	4812      	ldr	r0, [pc, #72]	; (80017c8 <seg7_update+0xa8>)
 8001780:	f002 f926 	bl	80039d0 <HAL_GPIO_WritePin>
		active_digit = 1;
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <seg7_update+0xac>)
 8001786:	2201      	movs	r2, #1
 8001788:	601a      	str	r2, [r3, #0]
		break;
 800178a:	e01b      	b.n	80017c4 <seg7_update+0xa4>
		if (actual_value < 100)		seg7_show_digit(actual_value / 10);
 800178c:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <seg7_update+0xb0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b63      	cmp	r3, #99	; 0x63
 8001792:	d809      	bhi.n	80017a8 <seg7_update+0x88>
 8001794:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <seg7_update+0xb0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <seg7_update+0xb4>)
 800179a:	fba2 2303 	umull	r2, r3, r2, r3
 800179e:	08db      	lsrs	r3, r3, #3
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff89 	bl	80016b8 <seg7_show_digit>
 80017a6:	e002      	b.n	80017ae <seg7_update+0x8e>
		else						set_output(0b1000000);
 80017a8:	2040      	movs	r0, #64	; 0x40
 80017aa:	f7ff ff35 	bl	8001618 <set_output>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b8:	f002 f90a 	bl	80039d0 <HAL_GPIO_WritePin>
		active_digit = 0;
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <seg7_update+0xac>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
		break;
 80017c2:	bf00      	nop
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	48000400 	.word	0x48000400
 80017cc:	20000294 	.word	0x20000294
 80017d0:	20000290 	.word	0x20000290
 80017d4:	cccccccd 	.word	0xcccccccd

080017d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017de:	4b0f      	ldr	r3, [pc, #60]	; (800181c <HAL_MspInit+0x44>)
 80017e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e2:	4a0e      	ldr	r2, [pc, #56]	; (800181c <HAL_MspInit+0x44>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6613      	str	r3, [r2, #96]	; 0x60
 80017ea:	4b0c      	ldr	r3, [pc, #48]	; (800181c <HAL_MspInit+0x44>)
 80017ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <HAL_MspInit+0x44>)
 80017f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fa:	4a08      	ldr	r2, [pc, #32]	; (800181c <HAL_MspInit+0x44>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001800:	6593      	str	r3, [r2, #88]	; 0x58
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_MspInit+0x44>)
 8001804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000

08001820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <NMI_Handler+0x4>

08001826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182a:	e7fe      	b.n	800182a <HardFault_Handler+0x4>

0800182c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <MemManage_Handler+0x4>

08001832 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <BusFault_Handler+0x4>

08001838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <UsageFault_Handler+0x4>

0800183e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800186c:	f000 fb72 	bl	8001f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}

08001874 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001878:	4802      	ldr	r0, [pc, #8]	; (8001884 <TIM2_IRQHandler+0x10>)
 800187a:	f004 f995 	bl	8005ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	2000029c 	.word	0x2000029c

08001888 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <TIM6_DAC_IRQHandler+0x10>)
 800188e:	f004 f98b 	bl	8005ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200002e8 	.word	0x200002e8

0800189c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return 1;
 80018a0:	2301      	movs	r3, #1
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <_kill>:

int _kill(int pid, int sig)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018b6:	f006 f8c1 	bl	8007a3c <__errno>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2216      	movs	r2, #22
 80018be:	601a      	str	r2, [r3, #0]
  return -1;
 80018c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <_exit>:

void _exit (int status)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018d4:	f04f 31ff 	mov.w	r1, #4294967295
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ffe7 	bl	80018ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80018de:	e7fe      	b.n	80018de <_exit+0x12>

080018e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	e00a      	b.n	8001908 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018f2:	f3af 8000 	nop.w
 80018f6:	4601      	mov	r1, r0
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	60ba      	str	r2, [r7, #8]
 80018fe:	b2ca      	uxtb	r2, r1
 8001900:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	3301      	adds	r3, #1
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	429a      	cmp	r2, r3
 800190e:	dbf0      	blt.n	80018f2 <_read+0x12>
  }

  return len;
 8001910:	687b      	ldr	r3, [r7, #4]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	e009      	b.n	8001940 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	60ba      	str	r2, [r7, #8]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fc99 	bl	800126c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3301      	adds	r3, #1
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	429a      	cmp	r2, r3
 8001946:	dbf1      	blt.n	800192c <_write+0x12>
  }
  return len;
 8001948:	687b      	ldr	r3, [r7, #4]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <_close>:

int _close(int file)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800197a:	605a      	str	r2, [r3, #4]
  return 0;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <_isatty>:

int _isatty(int file)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001992:	2301      	movs	r3, #1
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c4:	4a14      	ldr	r2, [pc, #80]	; (8001a18 <_sbrk+0x5c>)
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <_sbrk+0x60>)
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d0:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <_sbrk+0x64>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d102      	bne.n	80019de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <_sbrk+0x64>)
 80019da:	4a12      	ldr	r2, [pc, #72]	; (8001a24 <_sbrk+0x68>)
 80019dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <_sbrk+0x64>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d207      	bcs.n	80019fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019ec:	f006 f826 	bl	8007a3c <__errno>
 80019f0:	4603      	mov	r3, r0
 80019f2:	220c      	movs	r2, #12
 80019f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019f6:	f04f 33ff 	mov.w	r3, #4294967295
 80019fa:	e009      	b.n	8001a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <_sbrk+0x64>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <_sbrk+0x64>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	4a05      	ldr	r2, [pc, #20]	; (8001a20 <_sbrk+0x64>)
 8001a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20018000 	.word	0x20018000
 8001a1c:	00000400 	.word	0x00000400
 8001a20:	20000298 	.word	0x20000298
 8001a24:	200003d0 	.word	0x200003d0

08001a28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <SystemInit+0x20>)
 8001a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a32:	4a05      	ldr	r2, [pc, #20]	; (8001a48 <SystemInit+0x20>)
 8001a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b092      	sub	sp, #72	; 0x48
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a52:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a6c:	f107 031c 	add.w	r3, r7, #28
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a7a:	463b      	mov	r3, r7
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
 8001a88:	615a      	str	r2, [r3, #20]
 8001a8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a8c:	4b42      	ldr	r3, [pc, #264]	; (8001b98 <MX_TIM2_Init+0x14c>)
 8001a8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001a94:	4b40      	ldr	r3, [pc, #256]	; (8001b98 <MX_TIM2_Init+0x14c>)
 8001a96:	224f      	movs	r2, #79	; 0x4f
 8001a98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9a:	4b3f      	ldr	r3, [pc, #252]	; (8001b98 <MX_TIM2_Init+0x14c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8001aa0:	4b3d      	ldr	r3, [pc, #244]	; (8001b98 <MX_TIM2_Init+0x14c>)
 8001aa2:	4a3e      	ldr	r2, [pc, #248]	; (8001b9c <MX_TIM2_Init+0x150>)
 8001aa4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa6:	4b3c      	ldr	r3, [pc, #240]	; (8001b98 <MX_TIM2_Init+0x14c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aac:	4b3a      	ldr	r3, [pc, #232]	; (8001b98 <MX_TIM2_Init+0x14c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ab2:	4839      	ldr	r0, [pc, #228]	; (8001b98 <MX_TIM2_Init+0x14c>)
 8001ab4:	f003 fcea 	bl	800548c <HAL_TIM_Base_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001abe:	f7ff fd23 	bl	8001508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ac8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001acc:	4619      	mov	r1, r3
 8001ace:	4832      	ldr	r0, [pc, #200]	; (8001b98 <MX_TIM2_Init+0x14c>)
 8001ad0:	f004 fb3a 	bl	8006148 <HAL_TIM_ConfigClockSource>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001ada:	f7ff fd15 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001ade:	482e      	ldr	r0, [pc, #184]	; (8001b98 <MX_TIM2_Init+0x14c>)
 8001ae0:	f003 ff04 	bl	80058ec <HAL_TIM_IC_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001aea:	f7ff fd0d 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001aee:	482a      	ldr	r0, [pc, #168]	; (8001b98 <MX_TIM2_Init+0x14c>)
 8001af0:	f003 fd94 	bl	800561c <HAL_TIM_PWM_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001afa:	f7ff fd05 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001afe:	2300      	movs	r3, #0
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4822      	ldr	r0, [pc, #136]	; (8001b98 <MX_TIM2_Init+0x14c>)
 8001b0e:	f005 f9a5 	bl	8006e5c <HAL_TIMEx_MasterConfigSynchronization>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8001b18:	f7ff fcf6 	bl	8001508 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b20:	2301      	movs	r3, #1
 8001b22:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b24:	2300      	movs	r3, #0
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b2c:	f107 031c 	add.w	r3, r7, #28
 8001b30:	2200      	movs	r2, #0
 8001b32:	4619      	mov	r1, r3
 8001b34:	4818      	ldr	r0, [pc, #96]	; (8001b98 <MX_TIM2_Init+0x14c>)
 8001b36:	f004 f956 	bl	8005de6 <HAL_TIM_IC_ConfigChannel>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8001b40:	f7ff fce2 	bl	8001508 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b44:	2302      	movs	r3, #2
 8001b46:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b4c:	f107 031c 	add.w	r3, r7, #28
 8001b50:	2204      	movs	r2, #4
 8001b52:	4619      	mov	r1, r3
 8001b54:	4810      	ldr	r0, [pc, #64]	; (8001b98 <MX_TIM2_Init+0x14c>)
 8001b56:	f004 f946 	bl	8005de6 <HAL_TIM_IC_ConfigChannel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8001b60:	f7ff fcd2 	bl	8001508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b64:	2360      	movs	r3, #96	; 0x60
 8001b66:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8001b68:	230a      	movs	r3, #10
 8001b6a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b74:	463b      	mov	r3, r7
 8001b76:	2208      	movs	r2, #8
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4807      	ldr	r0, [pc, #28]	; (8001b98 <MX_TIM2_Init+0x14c>)
 8001b7c:	f004 f9d0 	bl	8005f20 <HAL_TIM_PWM_ConfigChannel>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM2_Init+0x13e>
  {
    Error_Handler();
 8001b86:	f7ff fcbf 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b8a:	4803      	ldr	r0, [pc, #12]	; (8001b98 <MX_TIM2_Init+0x14c>)
 8001b8c:	f000 f8a2 	bl	8001cd4 <HAL_TIM_MspPostInit>

}
 8001b90:	bf00      	nop
 8001b92:	3748      	adds	r7, #72	; 0x48
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	2000029c 	.word	0x2000029c
 8001b9c:	0001869f 	.word	0x0001869f

08001ba0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bb0:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <MX_TIM6_Init+0x64>)
 8001bb2:	4a15      	ldr	r2, [pc, #84]	; (8001c08 <MX_TIM6_Init+0x68>)
 8001bb4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8001bb6:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <MX_TIM6_Init+0x64>)
 8001bb8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001bbc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bbe:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <MX_TIM6_Init+0x64>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <MX_TIM6_Init+0x64>)
 8001bc6:	2263      	movs	r2, #99	; 0x63
 8001bc8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <MX_TIM6_Init+0x64>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001bd0:	480c      	ldr	r0, [pc, #48]	; (8001c04 <MX_TIM6_Init+0x64>)
 8001bd2:	f003 fc5b 	bl	800548c <HAL_TIM_Base_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001bdc:	f7ff fc94 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be0:	2300      	movs	r3, #0
 8001be2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	4619      	mov	r1, r3
 8001bec:	4805      	ldr	r0, [pc, #20]	; (8001c04 <MX_TIM6_Init+0x64>)
 8001bee:	f005 f935 	bl	8006e5c <HAL_TIMEx_MasterConfigSynchronization>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001bf8:	f7ff fc86 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001bfc:	bf00      	nop
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	200002e8 	.word	0x200002e8
 8001c08:	40001000 	.word	0x40001000

08001c0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	; 0x28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c2c:	d131      	bne.n	8001c92 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c2e:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <HAL_TIM_Base_MspInit+0xc0>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c32:	4a26      	ldr	r2, [pc, #152]	; (8001ccc <HAL_TIM_Base_MspInit+0xc0>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6593      	str	r3, [r2, #88]	; 0x58
 8001c3a:	4b24      	ldr	r3, [pc, #144]	; (8001ccc <HAL_TIM_Base_MspInit+0xc0>)
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c46:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <HAL_TIM_Base_MspInit+0xc0>)
 8001c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4a:	4a20      	ldr	r2, [pc, #128]	; (8001ccc <HAL_TIM_Base_MspInit+0xc0>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c52:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <HAL_TIM_Base_MspInit+0xc0>)
 8001c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c62:	2302      	movs	r3, #2
 8001c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	f107 0314 	add.w	r3, r7, #20
 8001c76:	4619      	mov	r1, r3
 8001c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c7c:	f001 fcfe 	bl	800367c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 11, 0);
 8001c80:	2200      	movs	r2, #0
 8001c82:	210b      	movs	r1, #11
 8001c84:	201c      	movs	r0, #28
 8001c86:	f001 fcc2 	bl	800360e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c8a:	201c      	movs	r0, #28
 8001c8c:	f001 fcdb 	bl	8003646 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c90:	e018      	b.n	8001cc4 <HAL_TIM_Base_MspInit+0xb8>
  else if(tim_baseHandle->Instance==TIM6)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a0e      	ldr	r2, [pc, #56]	; (8001cd0 <HAL_TIM_Base_MspInit+0xc4>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d113      	bne.n	8001cc4 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <HAL_TIM_Base_MspInit+0xc0>)
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca0:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <HAL_TIM_Base_MspInit+0xc0>)
 8001ca2:	f043 0310 	orr.w	r3, r3, #16
 8001ca6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <HAL_TIM_Base_MspInit+0xc0>)
 8001caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cac:	f003 0310 	and.w	r3, r3, #16
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 10, 0);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	210a      	movs	r1, #10
 8001cb8:	2036      	movs	r0, #54	; 0x36
 8001cba:	f001 fca8 	bl	800360e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cbe:	2036      	movs	r0, #54	; 0x36
 8001cc0:	f001 fcc1 	bl	8003646 <HAL_NVIC_EnableIRQ>
}
 8001cc4:	bf00      	nop
 8001cc6:	3728      	adds	r7, #40	; 0x28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40001000 	.word	0x40001000

08001cd4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf4:	d11c      	bne.n	8001d30 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <HAL_TIM_MspPostInit+0x64>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	4a0f      	ldr	r2, [pc, #60]	; (8001d38 <HAL_TIM_MspPostInit+0x64>)
 8001cfc:	f043 0302 	orr.w	r3, r3, #2
 8001d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d02:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <HAL_TIM_MspPostInit+0x64>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d20:	2301      	movs	r3, #1
 8001d22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d24:	f107 030c 	add.w	r3, r7, #12
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4804      	ldr	r0, [pc, #16]	; (8001d3c <HAL_TIM_MspPostInit+0x68>)
 8001d2c:	f001 fca6 	bl	800367c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d30:	bf00      	nop
 8001d32:	3720      	adds	r7, #32
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	48000400 	.word	0x48000400

08001d40 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d44:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d46:	4a15      	ldr	r2, [pc, #84]	; (8001d9c <MX_USART2_UART_Init+0x5c>)
 8001d48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d4a:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d52:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d66:	220c      	movs	r2, #12
 8001d68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d76:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d82:	4805      	ldr	r0, [pc, #20]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d84:	f005 f910 	bl	8006fa8 <HAL_UART_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d8e:	f7ff fbbb 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000334 	.word	0x20000334
 8001d9c:	40004400 	.word	0x40004400

08001da0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b0ac      	sub	sp, #176	; 0xb0
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	2288      	movs	r2, #136	; 0x88
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f005 fe65 	bl	8007a90 <memset>
  if(uartHandle->Instance==USART2)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a21      	ldr	r2, [pc, #132]	; (8001e50 <HAL_UART_MspInit+0xb0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d13b      	bne.n	8001e48 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f002 fe99 	bl	8004b14 <HAL_RCCEx_PeriphCLKConfig>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001de8:	f7ff fb8e 	bl	8001508 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HAL_UART_MspInit+0xb4>)
 8001dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df0:	4a18      	ldr	r2, [pc, #96]	; (8001e54 <HAL_UART_MspInit+0xb4>)
 8001df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df6:	6593      	str	r3, [r2, #88]	; 0x58
 8001df8:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <HAL_UART_MspInit+0xb4>)
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e04:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <HAL_UART_MspInit+0xb4>)
 8001e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e08:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <HAL_UART_MspInit+0xb4>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e10:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <HAL_UART_MspInit+0xb4>)
 8001e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e1c:	230c      	movs	r3, #12
 8001e1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e34:	2307      	movs	r3, #7
 8001e36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e44:	f001 fc1a 	bl	800367c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e48:	bf00      	nop
 8001e4a:	37b0      	adds	r7, #176	; 0xb0
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40004400 	.word	0x40004400
 8001e54:	40021000 	.word	0x40021000

08001e58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e5c:	f7ff fde4 	bl	8001a28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e60:	480c      	ldr	r0, [pc, #48]	; (8001e94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e62:	490d      	ldr	r1, [pc, #52]	; (8001e98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e64:	4a0d      	ldr	r2, [pc, #52]	; (8001e9c <LoopForever+0xe>)
  movs r3, #0
 8001e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e68:	e002      	b.n	8001e70 <LoopCopyDataInit>

08001e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e6e:	3304      	adds	r3, #4

08001e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e74:	d3f9      	bcc.n	8001e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e78:	4c0a      	ldr	r4, [pc, #40]	; (8001ea4 <LoopForever+0x16>)
  movs r3, #0
 8001e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e7c:	e001      	b.n	8001e82 <LoopFillZerobss>

08001e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e80:	3204      	adds	r2, #4

08001e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e84:	d3fb      	bcc.n	8001e7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e86:	f005 fddf 	bl	8007a48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e8a:	f7ff fab1 	bl	80013f0 <main>

08001e8e <LoopForever>:

LoopForever:
    b LoopForever
 8001e8e:	e7fe      	b.n	8001e8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e98:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001e9c:	0800a924 	.word	0x0800a924
  ldr r2, =_sbss
 8001ea0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001ea4:	200003cc 	.word	0x200003cc

08001ea8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ea8:	e7fe      	b.n	8001ea8 <ADC1_2_IRQHandler>

08001eaa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb4:	2003      	movs	r0, #3
 8001eb6:	f001 fb9f 	bl	80035f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eba:	200f      	movs	r0, #15
 8001ebc:	f000 f80e 	bl	8001edc <HAL_InitTick>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	71fb      	strb	r3, [r7, #7]
 8001eca:	e001      	b.n	8001ed0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ecc:	f7ff fc84 	bl	80017d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ee8:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <HAL_InitTick+0x6c>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d023      	beq.n	8001f38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ef0:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <HAL_InitTick+0x70>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <HAL_InitTick+0x6c>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f06:	4618      	mov	r0, r3
 8001f08:	f001 fbab 	bl	8003662 <HAL_SYSTICK_Config>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10f      	bne.n	8001f32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b0f      	cmp	r3, #15
 8001f16:	d809      	bhi.n	8001f2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	f001 fb75 	bl	800360e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f24:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <HAL_InitTick+0x74>)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e007      	b.n	8001f3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
 8001f30:	e004      	b.n	8001f3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	73fb      	strb	r3, [r7, #15]
 8001f36:	e001      	b.n	8001f3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000008 	.word	0x20000008
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	20000004 	.word	0x20000004

08001f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_IncTick+0x20>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_IncTick+0x24>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <HAL_IncTick+0x24>)
 8001f66:	6013      	str	r3, [r2, #0]
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000008 	.word	0x20000008
 8001f78:	200003b8 	.word	0x200003b8

08001f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f80:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <HAL_GetTick+0x14>)
 8001f82:	681b      	ldr	r3, [r3, #0]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	200003b8 	.word	0x200003b8

08001f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f9c:	f7ff ffee 	bl	8001f7c <HAL_GetTick>
 8001fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fac:	d005      	beq.n	8001fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001fae:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_Delay+0x44>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fba:	bf00      	nop
 8001fbc:	f7ff ffde 	bl	8001f7c <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d8f7      	bhi.n	8001fbc <HAL_Delay+0x28>
  {
  }
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000008 	.word	0x20000008

08001fdc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	609a      	str	r2, [r3, #8]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002038:	4618      	mov	r0, r3
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
 8002050:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	3360      	adds	r3, #96	; 0x60
 8002056:	461a      	mov	r2, r3
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4b08      	ldr	r3, [pc, #32]	; (8002088 <LL_ADC_SetOffset+0x44>)
 8002066:	4013      	ands	r3, r2
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	4313      	orrs	r3, r2
 8002074:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800207c:	bf00      	nop
 800207e:	371c      	adds	r7, #28
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	03fff000 	.word	0x03fff000

0800208c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3360      	adds	r3, #96	; 0x60
 800209a:	461a      	mov	r2, r3
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	3360      	adds	r3, #96	; 0x60
 80020c8:	461a      	mov	r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	431a      	orrs	r2, r3
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020e2:	bf00      	nop
 80020e4:	371c      	adds	r7, #28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b087      	sub	sp, #28
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	3330      	adds	r3, #48	; 0x30
 80020fe:	461a      	mov	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	0a1b      	lsrs	r3, r3, #8
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	4413      	add	r3, r2
 800210c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	f003 031f 	and.w	r3, r3, #31
 8002118:	211f      	movs	r1, #31
 800211a:	fa01 f303 	lsl.w	r3, r1, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	401a      	ands	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	0e9b      	lsrs	r3, r3, #26
 8002126:	f003 011f 	and.w	r1, r3, #31
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	f003 031f 	and.w	r3, r3, #31
 8002130:	fa01 f303 	lsl.w	r3, r1, r3
 8002134:	431a      	orrs	r2, r3
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800213a:	bf00      	nop
 800213c:	371c      	adds	r7, #28
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002146:	b480      	push	{r7}
 8002148:	b087      	sub	sp, #28
 800214a:	af00      	add	r7, sp, #0
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	3314      	adds	r3, #20
 8002156:	461a      	mov	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	0e5b      	lsrs	r3, r3, #25
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	4413      	add	r3, r2
 8002164:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	0d1b      	lsrs	r3, r3, #20
 800216e:	f003 031f 	and.w	r3, r3, #31
 8002172:	2107      	movs	r1, #7
 8002174:	fa01 f303 	lsl.w	r3, r1, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	401a      	ands	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	0d1b      	lsrs	r3, r3, #20
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	fa01 f303 	lsl.w	r3, r1, r3
 800218a:	431a      	orrs	r2, r3
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002190:	bf00      	nop
 8002192:	371c      	adds	r7, #28
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b4:	43db      	mvns	r3, r3
 80021b6:	401a      	ands	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f003 0318 	and.w	r3, r3, #24
 80021be:	4908      	ldr	r1, [pc, #32]	; (80021e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80021c0:	40d9      	lsrs	r1, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	400b      	ands	r3, r1
 80021c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ca:	431a      	orrs	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80021d2:	bf00      	nop
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	0007ffff 	.word	0x0007ffff

080021e4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 031f 	and.w	r3, r3, #31
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002210:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6093      	str	r3, [r2, #8]
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002238:	d101      	bne.n	800223e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800225c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002260:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002284:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002288:	d101      	bne.n	800228e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022b0:	f043 0201 	orr.w	r2, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022d8:	f043 0202 	orr.w	r2, r3, #2
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <LL_ADC_IsEnabled+0x18>
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <LL_ADC_IsEnabled+0x1a>
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b02      	cmp	r3, #2
 8002324:	d101      	bne.n	800232a <LL_ADC_IsDisableOngoing+0x18>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <LL_ADC_IsDisableOngoing+0x1a>
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002348:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800234c:	f043 0204 	orr.w	r2, r3, #4
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b04      	cmp	r3, #4
 8002372:	d101      	bne.n	8002378 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002374:	2301      	movs	r3, #1
 8002376:	e000      	b.n	800237a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b08      	cmp	r3, #8
 8002398:	d101      	bne.n	800239e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023ac:	b590      	push	{r4, r7, lr}
 80023ae:	b089      	sub	sp, #36	; 0x24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e136      	b.n	8002634 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d109      	bne.n	80023e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7fe fe51 	bl	800107c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff19 	bl	8002224 <LL_ADC_IsDeepPowerDownEnabled>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d004      	beq.n	8002402 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff feff 	bl	8002200 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff ff34 	bl	8002274 <LL_ADC_IsInternalRegulatorEnabled>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d115      	bne.n	800243e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff ff18 	bl	800224c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800241c:	4b87      	ldr	r3, [pc, #540]	; (800263c <HAL_ADC_Init+0x290>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	099b      	lsrs	r3, r3, #6
 8002422:	4a87      	ldr	r2, [pc, #540]	; (8002640 <HAL_ADC_Init+0x294>)
 8002424:	fba2 2303 	umull	r2, r3, r2, r3
 8002428:	099b      	lsrs	r3, r3, #6
 800242a:	3301      	adds	r3, #1
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002430:	e002      	b.n	8002438 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	3b01      	subs	r3, #1
 8002436:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f9      	bne.n	8002432 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ff16 	bl	8002274 <LL_ADC_IsInternalRegulatorEnabled>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10d      	bne.n	800246a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002452:	f043 0210 	orr.w	r2, r3, #16
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	f043 0201 	orr.w	r2, r3, #1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff ff76 	bl	8002360 <LL_ADC_REG_IsConversionOngoing>
 8002474:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	2b00      	cmp	r3, #0
 8002480:	f040 80cf 	bne.w	8002622 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	2b00      	cmp	r3, #0
 8002488:	f040 80cb 	bne.w	8002622 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002490:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002494:	f043 0202 	orr.w	r2, r3, #2
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff23 	bl	80022ec <LL_ADC_IsEnabled>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d115      	bne.n	80024d8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024ac:	4865      	ldr	r0, [pc, #404]	; (8002644 <HAL_ADC_Init+0x298>)
 80024ae:	f7ff ff1d 	bl	80022ec <LL_ADC_IsEnabled>
 80024b2:	4604      	mov	r4, r0
 80024b4:	4864      	ldr	r0, [pc, #400]	; (8002648 <HAL_ADC_Init+0x29c>)
 80024b6:	f7ff ff19 	bl	80022ec <LL_ADC_IsEnabled>
 80024ba:	4603      	mov	r3, r0
 80024bc:	431c      	orrs	r4, r3
 80024be:	4863      	ldr	r0, [pc, #396]	; (800264c <HAL_ADC_Init+0x2a0>)
 80024c0:	f7ff ff14 	bl	80022ec <LL_ADC_IsEnabled>
 80024c4:	4603      	mov	r3, r0
 80024c6:	4323      	orrs	r3, r4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d105      	bne.n	80024d8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4619      	mov	r1, r3
 80024d2:	485f      	ldr	r0, [pc, #380]	; (8002650 <HAL_ADC_Init+0x2a4>)
 80024d4:	f7ff fd82 	bl	8001fdc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	7e5b      	ldrb	r3, [r3, #25]
 80024dc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024e2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80024e8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80024ee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024f6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d106      	bne.n	8002514 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	3b01      	subs	r3, #1
 800250c:	045b      	lsls	r3, r3, #17
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	2b00      	cmp	r3, #0
 800251a:	d009      	beq.n	8002530 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002520:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	4b47      	ldr	r3, [pc, #284]	; (8002654 <HAL_ADC_Init+0x2a8>)
 8002538:	4013      	ands	r3, r2
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6812      	ldr	r2, [r2, #0]
 800253e:	69b9      	ldr	r1, [r7, #24]
 8002540:	430b      	orrs	r3, r1
 8002542:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff ff09 	bl	8002360 <LL_ADC_REG_IsConversionOngoing>
 800254e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff ff16 	bl	8002386 <LL_ADC_INJ_IsConversionOngoing>
 800255a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d13d      	bne.n	80025de <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d13a      	bne.n	80025de <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800256c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002574:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002584:	f023 0302 	bic.w	r3, r3, #2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	69b9      	ldr	r1, [r7, #24]
 800258e:	430b      	orrs	r3, r1
 8002590:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002598:	2b01      	cmp	r3, #1
 800259a:	d118      	bne.n	80025ce <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025a6:	f023 0304 	bic.w	r3, r3, #4
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025b2:	4311      	orrs	r1, r2
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80025b8:	4311      	orrs	r1, r2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025be:	430a      	orrs	r2, r1
 80025c0:	431a      	orrs	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0201 	orr.w	r2, r2, #1
 80025ca:	611a      	str	r2, [r3, #16]
 80025cc:	e007      	b.n	80025de <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0201 	bic.w	r2, r2, #1
 80025dc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d10c      	bne.n	8002600 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	f023 010f 	bic.w	r1, r3, #15
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	1e5a      	subs	r2, r3, #1
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	631a      	str	r2, [r3, #48]	; 0x30
 80025fe:	e007      	b.n	8002610 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 020f 	bic.w	r2, r2, #15
 800260e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002614:	f023 0303 	bic.w	r3, r3, #3
 8002618:	f043 0201 	orr.w	r2, r3, #1
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	655a      	str	r2, [r3, #84]	; 0x54
 8002620:	e007      	b.n	8002632 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002626:	f043 0210 	orr.w	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002632:	7ffb      	ldrb	r3, [r7, #31]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3724      	adds	r7, #36	; 0x24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd90      	pop	{r4, r7, pc}
 800263c:	20000000 	.word	0x20000000
 8002640:	053e2d63 	.word	0x053e2d63
 8002644:	50040000 	.word	0x50040000
 8002648:	50040100 	.word	0x50040100
 800264c:	50040200 	.word	0x50040200
 8002650:	50040300 	.word	0x50040300
 8002654:	fff0c007 	.word	0xfff0c007

08002658 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002660:	4857      	ldr	r0, [pc, #348]	; (80027c0 <HAL_ADC_Start+0x168>)
 8002662:	f7ff fdbf 	bl	80021e4 <LL_ADC_GetMultimode>
 8002666:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff fe77 	bl	8002360 <LL_ADC_REG_IsConversionOngoing>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	f040 809c 	bne.w	80027b2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_ADC_Start+0x30>
 8002684:	2302      	movs	r3, #2
 8002686:	e097      	b.n	80027b8 <HAL_ADC_Start+0x160>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 fc99 	bl	8002fc8 <ADC_Enable>
 8002696:	4603      	mov	r3, r0
 8002698:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800269a:	7dfb      	ldrb	r3, [r7, #23]
 800269c:	2b00      	cmp	r3, #0
 800269e:	f040 8083 	bne.w	80027a8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026aa:	f023 0301 	bic.w	r3, r3, #1
 80026ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a42      	ldr	r2, [pc, #264]	; (80027c4 <HAL_ADC_Start+0x16c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d002      	beq.n	80026c6 <HAL_ADC_Start+0x6e>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	e000      	b.n	80026c8 <HAL_ADC_Start+0x70>
 80026c6:	4b40      	ldr	r3, [pc, #256]	; (80027c8 <HAL_ADC_Start+0x170>)
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d002      	beq.n	80026d6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d105      	bne.n	80026e2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ee:	d106      	bne.n	80026fe <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f4:	f023 0206 	bic.w	r2, r3, #6
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	659a      	str	r2, [r3, #88]	; 0x58
 80026fc:	e002      	b.n	8002704 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	221c      	movs	r2, #28
 800270a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a2a      	ldr	r2, [pc, #168]	; (80027c4 <HAL_ADC_Start+0x16c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d002      	beq.n	8002724 <HAL_ADC_Start+0xcc>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	e000      	b.n	8002726 <HAL_ADC_Start+0xce>
 8002724:	4b28      	ldr	r3, [pc, #160]	; (80027c8 <HAL_ADC_Start+0x170>)
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6812      	ldr	r2, [r2, #0]
 800272a:	4293      	cmp	r3, r2
 800272c:	d008      	beq.n	8002740 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	2b05      	cmp	r3, #5
 8002738:	d002      	beq.n	8002740 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	2b09      	cmp	r3, #9
 800273e:	d114      	bne.n	800276a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d007      	beq.n	800275e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002752:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002756:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fde8 	bl	8002338 <LL_ADC_REG_StartConversion>
 8002768:	e025      	b.n	80027b6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a12      	ldr	r2, [pc, #72]	; (80027c4 <HAL_ADC_Start+0x16c>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d002      	beq.n	8002786 <HAL_ADC_Start+0x12e>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	e000      	b.n	8002788 <HAL_ADC_Start+0x130>
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <HAL_ADC_Start+0x170>)
 8002788:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00f      	beq.n	80027b6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800279e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54
 80027a6:	e006      	b.n	80027b6 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80027b0:	e001      	b.n	80027b6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027b2:	2302      	movs	r3, #2
 80027b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80027b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	50040300 	.word	0x50040300
 80027c4:	50040100 	.word	0x50040100
 80027c8:	50040000 	.word	0x50040000

080027cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
	...

080027e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b0b6      	sub	sp, #216	; 0xd8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_ADC_ConfigChannel+0x22>
 8002806:	2302      	movs	r3, #2
 8002808:	e3c7      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x7b2>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fda2 	bl	8002360 <LL_ADC_REG_IsConversionOngoing>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	f040 83a8 	bne.w	8002f74 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b05      	cmp	r3, #5
 800282a:	d824      	bhi.n	8002876 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	3b02      	subs	r3, #2
 8002832:	2b03      	cmp	r3, #3
 8002834:	d81b      	bhi.n	800286e <HAL_ADC_ConfigChannel+0x86>
 8002836:	a201      	add	r2, pc, #4	; (adr r2, 800283c <HAL_ADC_ConfigChannel+0x54>)
 8002838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283c:	0800284d 	.word	0x0800284d
 8002840:	08002855 	.word	0x08002855
 8002844:	0800285d 	.word	0x0800285d
 8002848:	08002865 	.word	0x08002865
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	220c      	movs	r2, #12
 8002850:	605a      	str	r2, [r3, #4]
          break;
 8002852:	e011      	b.n	8002878 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	2212      	movs	r2, #18
 8002858:	605a      	str	r2, [r3, #4]
          break;
 800285a:	e00d      	b.n	8002878 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2218      	movs	r2, #24
 8002860:	605a      	str	r2, [r3, #4]
          break;
 8002862:	e009      	b.n	8002878 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	f44f 7280 	mov.w	r2, #256	; 0x100
 800286a:	605a      	str	r2, [r3, #4]
          break;
 800286c:	e004      	b.n	8002878 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2206      	movs	r2, #6
 8002872:	605a      	str	r2, [r3, #4]
          break;
 8002874:	e000      	b.n	8002878 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002876:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	6859      	ldr	r1, [r3, #4]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	f7ff fc32 	bl	80020ee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fd66 	bl	8002360 <LL_ADC_REG_IsConversionOngoing>
 8002894:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fd72 	bl	8002386 <LL_ADC_INJ_IsConversionOngoing>
 80028a2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f040 81a6 	bne.w	8002bfc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f040 81a1 	bne.w	8002bfc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6819      	ldr	r1, [r3, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	461a      	mov	r2, r3
 80028c8:	f7ff fc3d 	bl	8002146 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	695a      	ldr	r2, [r3, #20]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	08db      	lsrs	r3, r3, #3
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d00a      	beq.n	8002904 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6919      	ldr	r1, [r3, #16]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028fe:	f7ff fba1 	bl	8002044 <LL_ADC_SetOffset>
 8002902:	e17b      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2100      	movs	r1, #0
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fbbe 	bl	800208c <LL_ADC_GetOffsetChannel>
 8002910:	4603      	mov	r3, r0
 8002912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10a      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x148>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2100      	movs	r1, #0
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fbb3 	bl	800208c <LL_ADC_GetOffsetChannel>
 8002926:	4603      	mov	r3, r0
 8002928:	0e9b      	lsrs	r3, r3, #26
 800292a:	f003 021f 	and.w	r2, r3, #31
 800292e:	e01e      	b.n	800296e <HAL_ADC_ConfigChannel+0x186>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2100      	movs	r1, #0
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fba8 	bl	800208c <LL_ADC_GetOffsetChannel>
 800293c:	4603      	mov	r3, r0
 800293e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800294e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002952:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002956:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800295e:	2320      	movs	r3, #32
 8002960:	e004      	b.n	800296c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002962:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002966:	fab3 f383 	clz	r3, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002976:	2b00      	cmp	r3, #0
 8002978:	d105      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x19e>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	0e9b      	lsrs	r3, r3, #26
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	e018      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x1d0>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800299a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800299e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80029a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80029aa:	2320      	movs	r3, #32
 80029ac:	e004      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80029ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d106      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2200      	movs	r2, #0
 80029c2:	2100      	movs	r1, #0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fb77 	bl	80020b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2101      	movs	r1, #1
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff fb5b 	bl	800208c <LL_ADC_GetOffsetChannel>
 80029d6:	4603      	mov	r3, r0
 80029d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10a      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x20e>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2101      	movs	r1, #1
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fb50 	bl	800208c <LL_ADC_GetOffsetChannel>
 80029ec:	4603      	mov	r3, r0
 80029ee:	0e9b      	lsrs	r3, r3, #26
 80029f0:	f003 021f 	and.w	r2, r3, #31
 80029f4:	e01e      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x24c>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2101      	movs	r1, #1
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fb45 	bl	800208c <LL_ADC_GetOffsetChannel>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a0c:	fa93 f3a3 	rbit	r3, r3
 8002a10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002a14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002a1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002a24:	2320      	movs	r3, #32
 8002a26:	e004      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002a28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a2c:	fab3 f383 	clz	r3, r3
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d105      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x264>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	0e9b      	lsrs	r3, r3, #26
 8002a46:	f003 031f 	and.w	r3, r3, #31
 8002a4a:	e018      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x296>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a58:	fa93 f3a3 	rbit	r3, r3
 8002a5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002a60:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002a68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002a70:	2320      	movs	r3, #32
 8002a72:	e004      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002a74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a78:	fab3 f383 	clz	r3, r3
 8002a7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d106      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2200      	movs	r2, #0
 8002a88:	2101      	movs	r1, #1
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fb14 	bl	80020b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2102      	movs	r1, #2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff faf8 	bl	800208c <LL_ADC_GetOffsetChannel>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10a      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x2d4>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2102      	movs	r1, #2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff faed 	bl	800208c <LL_ADC_GetOffsetChannel>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	0e9b      	lsrs	r3, r3, #26
 8002ab6:	f003 021f 	and.w	r2, r3, #31
 8002aba:	e01e      	b.n	8002afa <HAL_ADC_ConfigChannel+0x312>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2102      	movs	r1, #2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fae2 	bl	800208c <LL_ADC_GetOffsetChannel>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002ada:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ade:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002ae2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002aea:	2320      	movs	r3, #32
 8002aec:	e004      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002aee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002af2:	fab3 f383 	clz	r3, r3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d105      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x32a>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	0e9b      	lsrs	r3, r3, #26
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	e016      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x358>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002b24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002b2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002b32:	2320      	movs	r3, #32
 8002b34:	e004      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002b36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b3a:	fab3 f383 	clz	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d106      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2102      	movs	r1, #2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fab3 	bl	80020b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2103      	movs	r1, #3
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fa97 	bl	800208c <LL_ADC_GetOffsetChannel>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10a      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x396>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2103      	movs	r1, #3
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fa8c 	bl	800208c <LL_ADC_GetOffsetChannel>
 8002b74:	4603      	mov	r3, r0
 8002b76:	0e9b      	lsrs	r3, r3, #26
 8002b78:	f003 021f 	and.w	r2, r3, #31
 8002b7c:	e017      	b.n	8002bae <HAL_ADC_ConfigChannel+0x3c6>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2103      	movs	r1, #3
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fa81 	bl	800208c <LL_ADC_GetOffsetChannel>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002b96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b98:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002b9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002ba0:	2320      	movs	r3, #32
 8002ba2:	e003      	b.n	8002bac <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002ba4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d105      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x3de>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	0e9b      	lsrs	r3, r3, #26
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	e011      	b.n	8002bea <HAL_ADC_ConfigChannel+0x402>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bd6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002bde:	2320      	movs	r3, #32
 8002be0:	e003      	b.n	8002bea <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be4:	fab3 f383 	clz	r3, r3
 8002be8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d106      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2103      	movs	r1, #3
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fa5e 	bl	80020b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff fb73 	bl	80022ec <LL_ADC_IsEnabled>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f040 813f 	bne.w	8002e8c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6818      	ldr	r0, [r3, #0]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	6819      	ldr	r1, [r3, #0]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	f7ff fabe 	bl	800219c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4a8e      	ldr	r2, [pc, #568]	; (8002e60 <HAL_ADC_ConfigChannel+0x678>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	f040 8130 	bne.w	8002e8c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10b      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x46c>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	0e9b      	lsrs	r3, r3, #26
 8002c42:	3301      	adds	r3, #1
 8002c44:	f003 031f 	and.w	r3, r3, #31
 8002c48:	2b09      	cmp	r3, #9
 8002c4a:	bf94      	ite	ls
 8002c4c:	2301      	movls	r3, #1
 8002c4e:	2300      	movhi	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	e019      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x4a0>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c5c:	fa93 f3a3 	rbit	r3, r3
 8002c60:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002c62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c64:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002c66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002c6c:	2320      	movs	r3, #32
 8002c6e:	e003      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002c70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	2b09      	cmp	r3, #9
 8002c80:	bf94      	ite	ls
 8002c82:	2301      	movls	r3, #1
 8002c84:	2300      	movhi	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d079      	beq.n	8002d80 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d107      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x4c0>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	0e9b      	lsrs	r3, r3, #26
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	069b      	lsls	r3, r3, #26
 8002ca2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ca6:	e015      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x4ec>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cb0:	fa93 f3a3 	rbit	r3, r3
 8002cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002cc0:	2320      	movs	r3, #32
 8002cc2:	e003      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	3301      	adds	r3, #1
 8002cce:	069b      	lsls	r3, r3, #26
 8002cd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d109      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x50c>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	0e9b      	lsrs	r3, r3, #26
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	2101      	movs	r1, #1
 8002cee:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf2:	e017      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x53c>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cfc:	fa93 f3a3 	rbit	r3, r3
 8002d00:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002d02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d04:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002d0c:	2320      	movs	r3, #32
 8002d0e:	e003      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002d10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d12:	fab3 f383 	clz	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	3301      	adds	r3, #1
 8002d1a:	f003 031f 	and.w	r3, r3, #31
 8002d1e:	2101      	movs	r1, #1
 8002d20:	fa01 f303 	lsl.w	r3, r1, r3
 8002d24:	ea42 0103 	orr.w	r1, r2, r3
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10a      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x562>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	0e9b      	lsrs	r3, r3, #26
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	f003 021f 	and.w	r2, r3, #31
 8002d40:	4613      	mov	r3, r2
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	4413      	add	r3, r2
 8002d46:	051b      	lsls	r3, r3, #20
 8002d48:	e018      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x594>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d52:	fa93 f3a3 	rbit	r3, r3
 8002d56:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002d62:	2320      	movs	r3, #32
 8002d64:	e003      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d68:	fab3 f383 	clz	r3, r3
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f003 021f 	and.w	r2, r3, #31
 8002d74:	4613      	mov	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4413      	add	r3, r2
 8002d7a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	e080      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d107      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x5b4>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	0e9b      	lsrs	r3, r3, #26
 8002d92:	3301      	adds	r3, #1
 8002d94:	069b      	lsls	r3, r3, #26
 8002d96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d9a:	e015      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x5e0>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002db4:	2320      	movs	r3, #32
 8002db6:	e003      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	069b      	lsls	r3, r3, #26
 8002dc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d109      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x600>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	0e9b      	lsrs	r3, r3, #26
 8002dda:	3301      	adds	r3, #1
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	2101      	movs	r1, #1
 8002de2:	fa01 f303 	lsl.w	r3, r1, r3
 8002de6:	e017      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x630>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	fa93 f3a3 	rbit	r3, r3
 8002df4:	61fb      	str	r3, [r7, #28]
  return result;
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002e00:	2320      	movs	r3, #32
 8002e02:	e003      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	f003 031f 	and.w	r3, r3, #31
 8002e12:	2101      	movs	r1, #1
 8002e14:	fa01 f303 	lsl.w	r3, r1, r3
 8002e18:	ea42 0103 	orr.w	r1, r2, r3
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10d      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x65c>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	0e9b      	lsrs	r3, r3, #26
 8002e2e:	3301      	adds	r3, #1
 8002e30:	f003 021f 	and.w	r2, r3, #31
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	3b1e      	subs	r3, #30
 8002e3c:	051b      	lsls	r3, r3, #20
 8002e3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e42:	e01d      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x698>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	fa93 f3a3 	rbit	r3, r3
 8002e50:	613b      	str	r3, [r7, #16]
  return result;
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d103      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002e5c:	2320      	movs	r3, #32
 8002e5e:	e005      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x684>
 8002e60:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	f003 021f 	and.w	r2, r3, #31
 8002e72:	4613      	mov	r3, r2
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	4413      	add	r3, r2
 8002e78:	3b1e      	subs	r3, #30
 8002e7a:	051b      	lsls	r3, r3, #20
 8002e7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e80:	430b      	orrs	r3, r1
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	6892      	ldr	r2, [r2, #8]
 8002e86:	4619      	mov	r1, r3
 8002e88:	f7ff f95d 	bl	8002146 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4b44      	ldr	r3, [pc, #272]	; (8002fa4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d07a      	beq.n	8002f8e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e98:	4843      	ldr	r0, [pc, #268]	; (8002fa8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e9a:	f7ff f8c5 	bl	8002028 <LL_ADC_GetCommonPathInternalCh>
 8002e9e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a41      	ldr	r2, [pc, #260]	; (8002fac <HAL_ADC_ConfigChannel+0x7c4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d12c      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002eac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002eb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d126      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a3c      	ldr	r2, [pc, #240]	; (8002fb0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d004      	beq.n	8002ecc <HAL_ADC_ConfigChannel+0x6e4>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a3b      	ldr	r2, [pc, #236]	; (8002fb4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d15d      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ecc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ed0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4834      	ldr	r0, [pc, #208]	; (8002fa8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ed8:	f7ff f893 	bl	8002002 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002edc:	4b36      	ldr	r3, [pc, #216]	; (8002fb8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	099b      	lsrs	r3, r3, #6
 8002ee2:	4a36      	ldr	r2, [pc, #216]	; (8002fbc <HAL_ADC_ConfigChannel+0x7d4>)
 8002ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee8:	099b      	lsrs	r3, r3, #6
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	4613      	mov	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ef6:	e002      	b.n	8002efe <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1f9      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f04:	e040      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a2d      	ldr	r2, [pc, #180]	; (8002fc0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d118      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x75a>
 8002f10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d112      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a23      	ldr	r2, [pc, #140]	; (8002fb0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d004      	beq.n	8002f30 <HAL_ADC_ConfigChannel+0x748>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a22      	ldr	r2, [pc, #136]	; (8002fb4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d12d      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f38:	4619      	mov	r1, r3
 8002f3a:	481b      	ldr	r0, [pc, #108]	; (8002fa8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f3c:	f7ff f861 	bl	8002002 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f40:	e024      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1f      	ldr	r2, [pc, #124]	; (8002fc4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d120      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d11a      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a14      	ldr	r2, [pc, #80]	; (8002fb0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d115      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	480e      	ldr	r0, [pc, #56]	; (8002fa8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f6e:	f7ff f848 	bl	8002002 <LL_ADC_SetCommonPathInternalCh>
 8002f72:	e00c      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f78:	f043 0220 	orr.w	r2, r3, #32
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002f86:	e002      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f88:	bf00      	nop
 8002f8a:	e000      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f8c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f96:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	37d8      	adds	r7, #216	; 0xd8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	80080000 	.word	0x80080000
 8002fa8:	50040300 	.word	0x50040300
 8002fac:	c7520000 	.word	0xc7520000
 8002fb0:	50040000 	.word	0x50040000
 8002fb4:	50040200 	.word	0x50040200
 8002fb8:	20000000 	.word	0x20000000
 8002fbc:	053e2d63 	.word	0x053e2d63
 8002fc0:	cb840000 	.word	0xcb840000
 8002fc4:	80000001 	.word	0x80000001

08002fc8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff f987 	bl	80022ec <LL_ADC_IsEnabled>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d169      	bne.n	80030b8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	4b36      	ldr	r3, [pc, #216]	; (80030c4 <ADC_Enable+0xfc>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00d      	beq.n	800300e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff6:	f043 0210 	orr.w	r2, r3, #16
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003002:	f043 0201 	orr.w	r2, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e055      	b.n	80030ba <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff f942 	bl	800229c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003018:	482b      	ldr	r0, [pc, #172]	; (80030c8 <ADC_Enable+0x100>)
 800301a:	f7ff f805 	bl	8002028 <LL_ADC_GetCommonPathInternalCh>
 800301e:	4603      	mov	r3, r0
 8003020:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d013      	beq.n	8003050 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003028:	4b28      	ldr	r3, [pc, #160]	; (80030cc <ADC_Enable+0x104>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	099b      	lsrs	r3, r3, #6
 800302e:	4a28      	ldr	r2, [pc, #160]	; (80030d0 <ADC_Enable+0x108>)
 8003030:	fba2 2303 	umull	r2, r3, r2, r3
 8003034:	099b      	lsrs	r3, r3, #6
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	4613      	mov	r3, r2
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003042:	e002      	b.n	800304a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	3b01      	subs	r3, #1
 8003048:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1f9      	bne.n	8003044 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003050:	f7fe ff94 	bl	8001f7c <HAL_GetTick>
 8003054:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003056:	e028      	b.n	80030aa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff f945 	bl	80022ec <LL_ADC_IsEnabled>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d104      	bne.n	8003072 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff f915 	bl	800229c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003072:	f7fe ff83 	bl	8001f7c <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d914      	bls.n	80030aa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b01      	cmp	r3, #1
 800308c:	d00d      	beq.n	80030aa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003092:	f043 0210 	orr.w	r2, r3, #16
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309e:	f043 0201 	orr.w	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e007      	b.n	80030ba <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d1cf      	bne.n	8003058 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	8000003f 	.word	0x8000003f
 80030c8:	50040300 	.word	0x50040300
 80030cc:	20000000 	.word	0x20000000
 80030d0:	053e2d63 	.word	0x053e2d63

080030d4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff f916 	bl	8002312 <LL_ADC_IsDisableOngoing>
 80030e6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff f8fd 	bl	80022ec <LL_ADC_IsEnabled>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d047      	beq.n	8003188 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d144      	bne.n	8003188 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 030d 	and.w	r3, r3, #13
 8003108:	2b01      	cmp	r3, #1
 800310a:	d10c      	bne.n	8003126 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff f8d7 	bl	80022c4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2203      	movs	r2, #3
 800311c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800311e:	f7fe ff2d 	bl	8001f7c <HAL_GetTick>
 8003122:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003124:	e029      	b.n	800317a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312a:	f043 0210 	orr.w	r2, r3, #16
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003136:	f043 0201 	orr.w	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e023      	b.n	800318a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003142:	f7fe ff1b 	bl	8001f7c <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d914      	bls.n	800317a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00d      	beq.n	800317a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003162:	f043 0210 	orr.w	r2, r3, #16
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316e:	f043 0201 	orr.w	r2, r3, #1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e007      	b.n	800318a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1dc      	bne.n	8003142 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <LL_ADC_IsEnabled>:
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <LL_ADC_IsEnabled+0x18>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <LL_ADC_IsEnabled+0x1a>
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <LL_ADC_StartCalibration>:
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80031ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	609a      	str	r2, [r3, #8]
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <LL_ADC_IsCalibrationOnGoing>:
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031fe:	d101      	bne.n	8003204 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003200:	2301      	movs	r3, #1
 8003202:	e000      	b.n	8003206 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <LL_ADC_REG_IsConversionOngoing>:
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	2b04      	cmp	r3, #4
 8003224:	d101      	bne.n	800322a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003242:	2300      	movs	r3, #0
 8003244:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_ADCEx_Calibration_Start+0x1c>
 8003250:	2302      	movs	r3, #2
 8003252:	e04d      	b.n	80032f0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff ff39 	bl	80030d4 <ADC_Disable>
 8003262:	4603      	mov	r3, r0
 8003264:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d136      	bne.n	80032da <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003270:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003274:	f023 0302 	bic.w	r3, r3, #2
 8003278:	f043 0202 	orr.w	r2, r3, #2
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6839      	ldr	r1, [r7, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff ff96 	bl	80031b8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800328c:	e014      	b.n	80032b8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	3301      	adds	r3, #1
 8003292:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800329a:	d30d      	bcc.n	80032b8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a0:	f023 0312 	bic.w	r3, r3, #18
 80032a4:	f043 0210 	orr.w	r2, r3, #16
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e01b      	b.n	80032f0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff ff94 	bl	80031ea <LL_ADC_IsCalibrationOnGoing>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1e2      	bne.n	800328e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032cc:	f023 0303 	bic.w	r3, r3, #3
 80032d0:	f043 0201 	orr.w	r2, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	655a      	str	r2, [r3, #84]	; 0x54
 80032d8:	e005      	b.n	80032e6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032de:	f043 0210 	orr.w	r2, r3, #16
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80032f8:	b590      	push	{r4, r7, lr}
 80032fa:	b09f      	sub	sp, #124	; 0x7c
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003302:	2300      	movs	r3, #0
 8003304:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003312:	2302      	movs	r3, #2
 8003314:	e093      	b.n	800343e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800331e:	2300      	movs	r3, #0
 8003320:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003322:	2300      	movs	r3, #0
 8003324:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a47      	ldr	r2, [pc, #284]	; (8003448 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d102      	bne.n	8003336 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003330:	4b46      	ldr	r3, [pc, #280]	; (800344c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	e001      	b.n	800333a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003336:	2300      	movs	r3, #0
 8003338:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10b      	bne.n	8003358 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003344:	f043 0220 	orr.w	r2, r3, #32
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e072      	b.n	800343e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff ff59 	bl	8003212 <LL_ADC_REG_IsConversionOngoing>
 8003360:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff ff53 	bl	8003212 <LL_ADC_REG_IsConversionOngoing>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d154      	bne.n	800341c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003374:	2b00      	cmp	r3, #0
 8003376:	d151      	bne.n	800341c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003378:	4b35      	ldr	r3, [pc, #212]	; (8003450 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800337a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d02c      	beq.n	80033de <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	6859      	ldr	r1, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003396:	035b      	lsls	r3, r3, #13
 8003398:	430b      	orrs	r3, r1
 800339a:	431a      	orrs	r2, r3
 800339c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800339e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033a0:	4829      	ldr	r0, [pc, #164]	; (8003448 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80033a2:	f7ff fef6 	bl	8003192 <LL_ADC_IsEnabled>
 80033a6:	4604      	mov	r4, r0
 80033a8:	4828      	ldr	r0, [pc, #160]	; (800344c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80033aa:	f7ff fef2 	bl	8003192 <LL_ADC_IsEnabled>
 80033ae:	4603      	mov	r3, r0
 80033b0:	431c      	orrs	r4, r3
 80033b2:	4828      	ldr	r0, [pc, #160]	; (8003454 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80033b4:	f7ff feed 	bl	8003192 <LL_ADC_IsEnabled>
 80033b8:	4603      	mov	r3, r0
 80033ba:	4323      	orrs	r3, r4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d137      	bne.n	8003430 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033c8:	f023 030f 	bic.w	r3, r3, #15
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	6811      	ldr	r1, [r2, #0]
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	6892      	ldr	r2, [r2, #8]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	431a      	orrs	r2, r3
 80033d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033da:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033dc:	e028      	b.n	8003430 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80033de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033ea:	4817      	ldr	r0, [pc, #92]	; (8003448 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80033ec:	f7ff fed1 	bl	8003192 <LL_ADC_IsEnabled>
 80033f0:	4604      	mov	r4, r0
 80033f2:	4816      	ldr	r0, [pc, #88]	; (800344c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80033f4:	f7ff fecd 	bl	8003192 <LL_ADC_IsEnabled>
 80033f8:	4603      	mov	r3, r0
 80033fa:	431c      	orrs	r4, r3
 80033fc:	4815      	ldr	r0, [pc, #84]	; (8003454 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80033fe:	f7ff fec8 	bl	8003192 <LL_ADC_IsEnabled>
 8003402:	4603      	mov	r3, r0
 8003404:	4323      	orrs	r3, r4
 8003406:	2b00      	cmp	r3, #0
 8003408:	d112      	bne.n	8003430 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800340a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003412:	f023 030f 	bic.w	r3, r3, #15
 8003416:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003418:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800341a:	e009      	b.n	8003430 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003420:	f043 0220 	orr.w	r2, r3, #32
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800342e:	e000      	b.n	8003432 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003430:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800343a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800343e:	4618      	mov	r0, r3
 8003440:	377c      	adds	r7, #124	; 0x7c
 8003442:	46bd      	mov	sp, r7
 8003444:	bd90      	pop	{r4, r7, pc}
 8003446:	bf00      	nop
 8003448:	50040000 	.word	0x50040000
 800344c:	50040100 	.word	0x50040100
 8003450:	50040300 	.word	0x50040300
 8003454:	50040200 	.word	0x50040200

08003458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003468:	4b0c      	ldr	r3, [pc, #48]	; (800349c <__NVIC_SetPriorityGrouping+0x44>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003474:	4013      	ands	r3, r2
 8003476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800348a:	4a04      	ldr	r2, [pc, #16]	; (800349c <__NVIC_SetPriorityGrouping+0x44>)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	60d3      	str	r3, [r2, #12]
}
 8003490:	bf00      	nop
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	e000ed00 	.word	0xe000ed00

080034a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <__NVIC_GetPriorityGrouping+0x18>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	0a1b      	lsrs	r3, r3, #8
 80034aa:	f003 0307 	and.w	r3, r3, #7
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	e000ed00 	.word	0xe000ed00

080034bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	db0b      	blt.n	80034e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	f003 021f 	and.w	r2, r3, #31
 80034d4:	4907      	ldr	r1, [pc, #28]	; (80034f4 <__NVIC_EnableIRQ+0x38>)
 80034d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	2001      	movs	r0, #1
 80034de:	fa00 f202 	lsl.w	r2, r0, r2
 80034e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	e000e100 	.word	0xe000e100

080034f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	6039      	str	r1, [r7, #0]
 8003502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003508:	2b00      	cmp	r3, #0
 800350a:	db0a      	blt.n	8003522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	b2da      	uxtb	r2, r3
 8003510:	490c      	ldr	r1, [pc, #48]	; (8003544 <__NVIC_SetPriority+0x4c>)
 8003512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003516:	0112      	lsls	r2, r2, #4
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	440b      	add	r3, r1
 800351c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003520:	e00a      	b.n	8003538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	b2da      	uxtb	r2, r3
 8003526:	4908      	ldr	r1, [pc, #32]	; (8003548 <__NVIC_SetPriority+0x50>)
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	3b04      	subs	r3, #4
 8003530:	0112      	lsls	r2, r2, #4
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	440b      	add	r3, r1
 8003536:	761a      	strb	r2, [r3, #24]
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	e000e100 	.word	0xe000e100
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800354c:	b480      	push	{r7}
 800354e:	b089      	sub	sp, #36	; 0x24
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f1c3 0307 	rsb	r3, r3, #7
 8003566:	2b04      	cmp	r3, #4
 8003568:	bf28      	it	cs
 800356a:	2304      	movcs	r3, #4
 800356c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	3304      	adds	r3, #4
 8003572:	2b06      	cmp	r3, #6
 8003574:	d902      	bls.n	800357c <NVIC_EncodePriority+0x30>
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	3b03      	subs	r3, #3
 800357a:	e000      	b.n	800357e <NVIC_EncodePriority+0x32>
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003580:	f04f 32ff 	mov.w	r2, #4294967295
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43da      	mvns	r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	401a      	ands	r2, r3
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003594:	f04f 31ff 	mov.w	r1, #4294967295
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	fa01 f303 	lsl.w	r3, r1, r3
 800359e:	43d9      	mvns	r1, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a4:	4313      	orrs	r3, r2
         );
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3724      	adds	r7, #36	; 0x24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
	...

080035b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3b01      	subs	r3, #1
 80035c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035c4:	d301      	bcc.n	80035ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035c6:	2301      	movs	r3, #1
 80035c8:	e00f      	b.n	80035ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035ca:	4a0a      	ldr	r2, [pc, #40]	; (80035f4 <SysTick_Config+0x40>)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035d2:	210f      	movs	r1, #15
 80035d4:	f04f 30ff 	mov.w	r0, #4294967295
 80035d8:	f7ff ff8e 	bl	80034f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035dc:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <SysTick_Config+0x40>)
 80035de:	2200      	movs	r2, #0
 80035e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035e2:	4b04      	ldr	r3, [pc, #16]	; (80035f4 <SysTick_Config+0x40>)
 80035e4:	2207      	movs	r2, #7
 80035e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	e000e010 	.word	0xe000e010

080035f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff ff29 	bl	8003458 <__NVIC_SetPriorityGrouping>
}
 8003606:	bf00      	nop
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b086      	sub	sp, #24
 8003612:	af00      	add	r7, sp, #0
 8003614:	4603      	mov	r3, r0
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	607a      	str	r2, [r7, #4]
 800361a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003620:	f7ff ff3e 	bl	80034a0 <__NVIC_GetPriorityGrouping>
 8003624:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	6978      	ldr	r0, [r7, #20]
 800362c:	f7ff ff8e 	bl	800354c <NVIC_EncodePriority>
 8003630:	4602      	mov	r2, r0
 8003632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003636:	4611      	mov	r1, r2
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff ff5d 	bl	80034f8 <__NVIC_SetPriority>
}
 800363e:	bf00      	nop
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	4603      	mov	r3, r0
 800364e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff ff31 	bl	80034bc <__NVIC_EnableIRQ>
}
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b082      	sub	sp, #8
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7ff ffa2 	bl	80035b4 <SysTick_Config>
 8003670:	4603      	mov	r3, r0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800368a:	e17f      	b.n	800398c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	2101      	movs	r1, #1
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	fa01 f303 	lsl.w	r3, r1, r3
 8003698:	4013      	ands	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 8171 	beq.w	8003986 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 0303 	and.w	r3, r3, #3
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d005      	beq.n	80036bc <HAL_GPIO_Init+0x40>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 0303 	and.w	r3, r3, #3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d130      	bne.n	800371e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	2203      	movs	r2, #3
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	43db      	mvns	r3, r3
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4013      	ands	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036f2:	2201      	movs	r2, #1
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	43db      	mvns	r3, r3
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4013      	ands	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	091b      	lsrs	r3, r3, #4
 8003708:	f003 0201 	and.w	r2, r3, #1
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	2b03      	cmp	r3, #3
 8003728:	d118      	bne.n	800375c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003730:	2201      	movs	r2, #1
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	43db      	mvns	r3, r3
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	4013      	ands	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	08db      	lsrs	r3, r3, #3
 8003746:	f003 0201 	and.w	r2, r3, #1
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	2b03      	cmp	r3, #3
 8003766:	d017      	beq.n	8003798 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	2203      	movs	r2, #3
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4013      	ands	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d123      	bne.n	80037ec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	08da      	lsrs	r2, r3, #3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3208      	adds	r2, #8
 80037ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	220f      	movs	r2, #15
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	43db      	mvns	r3, r3
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4013      	ands	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	08da      	lsrs	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3208      	adds	r2, #8
 80037e6:	6939      	ldr	r1, [r7, #16]
 80037e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	2203      	movs	r2, #3
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4013      	ands	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 0203 	and.w	r2, r3, #3
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	4313      	orrs	r3, r2
 8003818:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 80ac 	beq.w	8003986 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800382e:	4b5f      	ldr	r3, [pc, #380]	; (80039ac <HAL_GPIO_Init+0x330>)
 8003830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003832:	4a5e      	ldr	r2, [pc, #376]	; (80039ac <HAL_GPIO_Init+0x330>)
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	6613      	str	r3, [r2, #96]	; 0x60
 800383a:	4b5c      	ldr	r3, [pc, #368]	; (80039ac <HAL_GPIO_Init+0x330>)
 800383c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	60bb      	str	r3, [r7, #8]
 8003844:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003846:	4a5a      	ldr	r2, [pc, #360]	; (80039b0 <HAL_GPIO_Init+0x334>)
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	089b      	lsrs	r3, r3, #2
 800384c:	3302      	adds	r3, #2
 800384e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003852:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	220f      	movs	r2, #15
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43db      	mvns	r3, r3
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4013      	ands	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003870:	d025      	beq.n	80038be <HAL_GPIO_Init+0x242>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a4f      	ldr	r2, [pc, #316]	; (80039b4 <HAL_GPIO_Init+0x338>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d01f      	beq.n	80038ba <HAL_GPIO_Init+0x23e>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a4e      	ldr	r2, [pc, #312]	; (80039b8 <HAL_GPIO_Init+0x33c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d019      	beq.n	80038b6 <HAL_GPIO_Init+0x23a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a4d      	ldr	r2, [pc, #308]	; (80039bc <HAL_GPIO_Init+0x340>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d013      	beq.n	80038b2 <HAL_GPIO_Init+0x236>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a4c      	ldr	r2, [pc, #304]	; (80039c0 <HAL_GPIO_Init+0x344>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00d      	beq.n	80038ae <HAL_GPIO_Init+0x232>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a4b      	ldr	r2, [pc, #300]	; (80039c4 <HAL_GPIO_Init+0x348>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d007      	beq.n	80038aa <HAL_GPIO_Init+0x22e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a4a      	ldr	r2, [pc, #296]	; (80039c8 <HAL_GPIO_Init+0x34c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d101      	bne.n	80038a6 <HAL_GPIO_Init+0x22a>
 80038a2:	2306      	movs	r3, #6
 80038a4:	e00c      	b.n	80038c0 <HAL_GPIO_Init+0x244>
 80038a6:	2307      	movs	r3, #7
 80038a8:	e00a      	b.n	80038c0 <HAL_GPIO_Init+0x244>
 80038aa:	2305      	movs	r3, #5
 80038ac:	e008      	b.n	80038c0 <HAL_GPIO_Init+0x244>
 80038ae:	2304      	movs	r3, #4
 80038b0:	e006      	b.n	80038c0 <HAL_GPIO_Init+0x244>
 80038b2:	2303      	movs	r3, #3
 80038b4:	e004      	b.n	80038c0 <HAL_GPIO_Init+0x244>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e002      	b.n	80038c0 <HAL_GPIO_Init+0x244>
 80038ba:	2301      	movs	r3, #1
 80038bc:	e000      	b.n	80038c0 <HAL_GPIO_Init+0x244>
 80038be:	2300      	movs	r3, #0
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	f002 0203 	and.w	r2, r2, #3
 80038c6:	0092      	lsls	r2, r2, #2
 80038c8:	4093      	lsls	r3, r2
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038d0:	4937      	ldr	r1, [pc, #220]	; (80039b0 <HAL_GPIO_Init+0x334>)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	089b      	lsrs	r3, r3, #2
 80038d6:	3302      	adds	r3, #2
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038de:	4b3b      	ldr	r3, [pc, #236]	; (80039cc <HAL_GPIO_Init+0x350>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	43db      	mvns	r3, r3
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4013      	ands	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003902:	4a32      	ldr	r2, [pc, #200]	; (80039cc <HAL_GPIO_Init+0x350>)
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003908:	4b30      	ldr	r3, [pc, #192]	; (80039cc <HAL_GPIO_Init+0x350>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	43db      	mvns	r3, r3
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4013      	ands	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800392c:	4a27      	ldr	r2, [pc, #156]	; (80039cc <HAL_GPIO_Init+0x350>)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003932:	4b26      	ldr	r3, [pc, #152]	; (80039cc <HAL_GPIO_Init+0x350>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	43db      	mvns	r3, r3
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4013      	ands	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003956:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <HAL_GPIO_Init+0x350>)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800395c:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <HAL_GPIO_Init+0x350>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	43db      	mvns	r3, r3
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	4013      	ands	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4313      	orrs	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003980:	4a12      	ldr	r2, [pc, #72]	; (80039cc <HAL_GPIO_Init+0x350>)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	3301      	adds	r3, #1
 800398a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	fa22 f303 	lsr.w	r3, r2, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	f47f ae78 	bne.w	800368c <HAL_GPIO_Init+0x10>
  }
}
 800399c:	bf00      	nop
 800399e:	bf00      	nop
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40010000 	.word	0x40010000
 80039b4:	48000400 	.word	0x48000400
 80039b8:	48000800 	.word	0x48000800
 80039bc:	48000c00 	.word	0x48000c00
 80039c0:	48001000 	.word	0x48001000
 80039c4:	48001400 	.word	0x48001400
 80039c8:	48001800 	.word	0x48001800
 80039cc:	40010400 	.word	0x40010400

080039d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	807b      	strh	r3, [r7, #2]
 80039dc:	4613      	mov	r3, r2
 80039de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039e0:	787b      	ldrb	r3, [r7, #1]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039e6:	887a      	ldrh	r2, [r7, #2]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039ec:	e002      	b.n	80039f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039ee:	887a      	ldrh	r2, [r7, #2]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e0c3      	b.n	8003b9e <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b05      	cmp	r3, #5
 8003a20:	d101      	bne.n	8003a26 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e0bb      	b.n	8003b9e <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d101      	bne.n	8003a36 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e0b3      	b.n	8003b9e <HAL_OPAMP_Init+0x19e>
    {
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
    }

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePLowPower));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNLowPower));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d103      	bne.n	8003a52 <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fd fd88 	bl	8001568 <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a66:	601a      	str	r2, [r3, #0]

    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d11b      	bne.n	8003aa8 <HAL_OPAMP_Init+0xa8>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 8003a7a:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6891      	ldr	r1, [r2, #8]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	68d2      	ldr	r2, [r2, #12]
 8003a86:	4311      	orrs	r1, r2
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6992      	ldr	r2, [r2, #24]
 8003a8c:	4311      	orrs	r1, r2
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6912      	ldr	r2, [r2, #16]
 8003a92:	4311      	orrs	r1, r2
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6952      	ldr	r2, [r2, #20]
 8003a98:	4311      	orrs	r1, r2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	69d2      	ldr	r2, [r2, #28]
 8003a9e:	4311      	orrs	r1, r2
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6812      	ldr	r2, [r2, #0]
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	2b0c      	cmp	r3, #12
 8003aae:	d115      	bne.n	8003adc <HAL_OPAMP_Init+0xdc>
    {
    /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 8003aba:	f023 030e 	bic.w	r3, r3, #14
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6891      	ldr	r1, [r2, #8]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	68d2      	ldr	r2, [r2, #12]
 8003ac6:	4311      	orrs	r1, r2
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6952      	ldr	r2, [r2, #20]
 8003acc:	4311      	orrs	r1, r2
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	69d2      	ldr	r2, [r2, #28]
 8003ad2:	4311      	orrs	r1, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.Mode | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d118      	bne.n	8003b16 <HAL_OPAMP_Init+0x116>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 8003aee:	f023 030e 	bic.w	r3, r3, #14
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6891      	ldr	r1, [r2, #8]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68d2      	ldr	r2, [r2, #12]
 8003afa:	4311      	orrs	r1, r2
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6912      	ldr	r2, [r2, #16]
 8003b00:	4311      	orrs	r1, r2
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6952      	ldr	r2, [r2, #20]
 8003b06:	4311      	orrs	r1, r2
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	69d2      	ldr	r2, [r2, #28]
 8003b0c:	4311      	orrs	r1, r2
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6812      	ldr	r2, [r2, #0]
 8003b12:	430b      	orrs	r3, r1
 8003b14:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b1e:	d12a      	bne.n	8003b76 <HAL_OPAMP_Init+0x176>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d013      	beq.n	8003b50 <HAL_OPAMP_Init+0x150>
      {
        /* OPAMP_POWERMODE_NORMALPOWER */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003b40:	f023 031f 	bic.w	r3, r3, #31
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6812      	ldr	r2, [r2, #0]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	430b      	orrs	r3, r1
 8003b4c:	6053      	str	r3, [r2, #4]
 8003b4e:	e012      	b.n	8003b76 <HAL_OPAMP_Init+0x176>
      else
      {
        /* OPAMP_POWERMODE_LOWPOWER */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* low power mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNLowPower));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->LPOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003b68:	f023 031f 	bic.w	r3, r3, #31
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6812      	ldr	r2, [r2, #0]
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	430b      	orrs	r3, r1
 8003b74:	6093      	str	r3, [r2, #8]
    }

    /* Configure the power supply range */
    /* The OPAMP_CSR_OPARANGE is common configuration for all OPAMPs */
    /* bit OPAMP1_CSR_OPARANGE is used for both OPAMPs */
    MODIFY_REG(OPAMP1->CSR, OPAMP1_CSR_OPARANGE, hopamp->Init.PowerSupplyRange);
 8003b76:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <HAL_OPAMP_Init+0x1a8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	4909      	ldr	r1, [pc, #36]	; (8003ba8 <HAL_OPAMP_Init+0x1a8>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	600b      	str	r3, [r1, #0]

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d103      	bne.n	8003b9c <HAL_OPAMP_Init+0x19c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40007800 	.word	0x40007800

08003bac <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d102      	bne.n	8003bc4 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	73fb      	strb	r3, [r7, #15]
 8003bc2:	e01d      	b.n	8003c00 <HAL_OPAMP_Start+0x54>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b05      	cmp	r3, #5
 8003bce:	d102      	bne.n	8003bd6 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	73fb      	strb	r3, [r7, #15]
 8003bd4:	e014      	b.n	8003c00 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if(hopamp->State == HAL_OPAMP_STATE_READY)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d10c      	bne.n	8003bfc <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f042 0201 	orr.w	r2, r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2204      	movs	r2, #4
 8003bf6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8003bfa:	e001      	b.n	8003c00 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	73fb      	strb	r3, [r7, #15]
    }

   }
  return status;
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <HAL_OPAMP_SelfCalibrate>:
  * @retval HAL status

  */

HAL_StatusTypeDef HAL_OPAMP_SelfCalibrate(OPAMP_HandleTypeDef *hopamp)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b088      	sub	sp, #32
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	77fb      	strb	r3, [r7, #31]

  __IO uint32_t* tmp_opamp_reg_trimming;   /* Selection of register of trimming depending on power mode: OTR or LPOTR */

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d102      	bne.n	8003c26 <HAL_OPAMP_SelfCalibrate+0x18>
  {
    status = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	77fb      	strb	r3, [r7, #31]
 8003c24:	e10d      	b.n	8003e42 <HAL_OPAMP_SelfCalibrate+0x234>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b05      	cmp	r3, #5
 8003c30:	d102      	bne.n	8003c38 <HAL_OPAMP_SelfCalibrate+0x2a>
  {
    status = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	77fb      	strb	r3, [r7, #31]
 8003c36:	e104      	b.n	8003e42 <HAL_OPAMP_SelfCalibrate+0x234>
  }
  else
  {
    /* Check if OPAMP in calibration mode and calibration not yet enable */
    if(hopamp->State ==  HAL_OPAMP_STATE_READY)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	f040 80fc 	bne.w	8003e3e <HAL_OPAMP_SelfCalibrate+0x230>
      assert_param(IS_OPAMP_POWERMODE(hopamp->Init.PowerMode));

      /* Save OPAMP mode as in                                       */
      /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx */
      /* the calibration is not working in PGA mode                  */
      opampmode = READ_BIT(hopamp->Instance->CSR,OPAMP_CSR_OPAMODE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 030c 	and.w	r3, r3, #12
 8003c50:	60bb      	str	r3, [r7, #8]

      /* Use of standalone mode */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_OPAMODE, OPAMP_STANDALONE_MODE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 020c 	bic.w	r2, r2, #12
 8003c60:	601a      	str	r2, [r3, #0]

      /*  user trimming values are used for offset calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_USERTRIM);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c70:	601a      	str	r2, [r3, #0]

      /* Select trimming settings depending on power mode */
      if (hopamp->Init.PowerMode == OPAMP_POWERMODE_NORMALPOWER)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d104      	bne.n	8003c84 <HAL_OPAMP_SelfCalibrate+0x76>
      {
        tmp_opamp_reg_trimming = &hopamp->Instance->OTR;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	e003      	b.n	8003c8c <HAL_OPAMP_SelfCalibrate+0x7e>
      }
      else
      {
        tmp_opamp_reg_trimming = &hopamp->Instance->LPOTR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3308      	adds	r3, #8
 8003c8a:	60fb      	str	r3, [r7, #12]
      }

      /* Enable calibration */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c9a:	601a      	str	r2, [r3, #0]

      /* 1st calibration - N */
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALSEL);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003caa:	601a      	str	r2, [r3, #0]

      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0201 	orr.w	r2, r2, #1
 8003cba:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluen = 16U;
 8003cbc:	2310      	movs	r3, #16
 8003cbe:	61bb      	str	r3, [r7, #24]
      delta = 8U;
 8003cc0:	2308      	movs	r3, #8
 8003cc2:	613b      	str	r3, [r7, #16]

      while (delta != 0U)
 8003cc4:	e01d      	b.n	8003d02 <HAL_OPAMP_SelfCalibrate+0xf4>
      {
        /* Set candidate trimming */
        /* OPAMP_POWERMODE_NORMALPOWER */
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETN, trimmingvaluen);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 021f 	bic.w	r2, r3, #31
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(OPAMP_TRIMMING_DELAY);
 8003cd6:	2001      	movs	r0, #1
 8003cd8:	f7fe f95c 	bl	8001f94 <HAL_Delay>

        if (READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT) != 0U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d004      	beq.n	8003cf4 <HAL_OPAMP_SelfCalibrate+0xe6>
        {
          /* OPAMP_CSR_CALOUT is HIGH try higher trimming */
          trimmingvaluen -= delta;
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	61bb      	str	r3, [r7, #24]
 8003cf2:	e003      	b.n	8003cfc <HAL_OPAMP_SelfCalibrate+0xee>
        }
        else
        {
          /* OPAMP_CSR_CALOUT is LOW try lower trimming */
          trimmingvaluen += delta;
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        }
        /* Divide range by 2 to continue dichotomy sweep */
        delta >>= 1U;
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	085b      	lsrs	r3, r3, #1
 8003d00:	613b      	str	r3, [r7, #16]
      while (delta != 0U)
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1de      	bne.n	8003cc6 <HAL_OPAMP_SelfCalibrate+0xb8>
      }

      /* Still need to check if right calibration is current value or one step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 0 to 1  */
      /* Set candidate trimming */
      MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETN, trimmingvaluen);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f023 021f 	bic.w	r2, r3, #31
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	431a      	orrs	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(OPAMP_TRIMMING_DELAY);
 8003d18:	2001      	movs	r0, #1
 8003d1a:	f7fe f93b 	bl	8001f94 <HAL_Delay>

      if ((READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT)) == 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10a      	bne.n	8003d42 <HAL_OPAMP_SelfCalibrate+0x134>
      {
        /* Trimming value is actually one value more */
        trimmingvaluen++;
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	61bb      	str	r3, [r7, #24]
        /* Set right trimming */
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETN, trimmingvaluen);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f023 021f 	bic.w	r2, r3, #31
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	601a      	str	r2, [r3, #0]
      }

      /* 2nd calibration - P */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALSEL);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d50:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluep = 16U;
 8003d52:	2310      	movs	r3, #16
 8003d54:	617b      	str	r3, [r7, #20]
      delta = 8U;
 8003d56:	2308      	movs	r3, #8
 8003d58:	613b      	str	r3, [r7, #16]

      while (delta != 0U)
 8003d5a:	e01e      	b.n	8003d9a <HAL_OPAMP_SelfCalibrate+0x18c>
      {
        /* Set candidate trimming */
        /* OPAMP_POWERMODE_NORMALPOWER */
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETP, (trimmingvaluep<<OPAMP_INPUT_NONINVERTING));
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	021b      	lsls	r3, r3, #8
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(OPAMP_TRIMMING_DELAY);
 8003d6e:	2001      	movs	r0, #1
 8003d70:	f7fe f910 	bl	8001f94 <HAL_Delay>

        if (READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT) != 0U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d004      	beq.n	8003d8c <HAL_OPAMP_SelfCalibrate+0x17e>
        {
          /* OPAMP_CSR_CALOUT is HIGH try higher trimming */
          trimmingvaluep += delta;
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	4413      	add	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	e003      	b.n	8003d94 <HAL_OPAMP_SelfCalibrate+0x186>
        }
        else
        {
          /* OPAMP_CSR_CALOUT  is LOW try lower trimming */
          trimmingvaluep -= delta;
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	617b      	str	r3, [r7, #20]
        }

        /* Divide range by 2 to continue dichotomy sweep */
        delta >>= 1U;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	085b      	lsrs	r3, r3, #1
 8003d98:	613b      	str	r3, [r7, #16]
      while (delta != 0U)
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1dd      	bne.n	8003d5c <HAL_OPAMP_SelfCalibrate+0x14e>
      }

      /* Still need to check if right calibration is current value or one step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0  */
      /* Set candidate trimming */
      MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETP, (trimmingvaluep<<OPAMP_INPUT_NONINVERTING));
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	021b      	lsls	r3, r3, #8
 8003dac:	431a      	orrs	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(OPAMP_TRIMMING_DELAY);
 8003db2:	2001      	movs	r0, #1
 8003db4:	f7fe f8ee 	bl	8001f94 <HAL_Delay>

      if (READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT) != 0U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00b      	beq.n	8003dde <HAL_OPAMP_SelfCalibrate+0x1d0>
      {
        /* Trimming value is actually one value more */
        trimmingvaluep++;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	617b      	str	r3, [r7, #20]
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETP, (trimmingvaluep<<OPAMP_INPUT_NONINVERTING));
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	021b      	lsls	r3, r3, #8
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	601a      	str	r2, [r3, #0]
      }

      /* Disable the OPAMP */
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0201 	bic.w	r2, r2, #1
 8003dec:	601a      	str	r2, [r3, #0]

      /* Disable calibration & set normal mode (operating mode) */
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dfc:	601a      	str	r2, [r3, #0]

      /* Self calibration is successful  */
      /* Store calibration(user trimming) results in init structure. */

      /* Set user trimming mode */
      hopamp->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e04:	61da      	str	r2, [r3, #28]

      /* Affect calibration parameters depending on mode normal/low power */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d006      	beq.n	8003e1c <HAL_OPAMP_SelfCalibrate+0x20e>
      {
        /* Write calibration result N */
        hopamp->Init.TrimmingValueN = trimmingvaluen;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	625a      	str	r2, [r3, #36]	; 0x24
        /* Write calibration result P */
        hopamp->Init.TrimmingValueP = trimmingvaluep;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	621a      	str	r2, [r3, #32]
 8003e1a:	e005      	b.n	8003e28 <HAL_OPAMP_SelfCalibrate+0x21a>
      }
      else
      {
        /* Write calibration result N */
        hopamp->Init.TrimmingValueNLowPower = trimmingvaluen;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	62da      	str	r2, [r3, #44]	; 0x2c
        /* Write calibration result P */
        hopamp->Init.TrimmingValuePLowPower = trimmingvaluep;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	629a      	str	r2, [r3, #40]	; 0x28
      }

    /* Restore OPAMP mode after calibration */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_OPAMODE, opampmode);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f023 010c 	bic.w	r1, r3, #12
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	e001      	b.n	8003e42 <HAL_OPAMP_SelfCalibrate+0x234>
    }
    else
    {
      /* OPAMP can not be calibrated from this mode */
      status = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 8003e42:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3720      	adds	r7, #32
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e50:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <HAL_PWREx_GetVoltageRange+0x18>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	40007000 	.word	0x40007000

08003e68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e76:	d130      	bne.n	8003eda <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e78:	4b23      	ldr	r3, [pc, #140]	; (8003f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e84:	d038      	beq.n	8003ef8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e86:	4b20      	ldr	r3, [pc, #128]	; (8003f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e8e:	4a1e      	ldr	r2, [pc, #120]	; (8003f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e94:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e96:	4b1d      	ldr	r3, [pc, #116]	; (8003f0c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2232      	movs	r2, #50	; 0x32
 8003e9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ea0:	4a1b      	ldr	r2, [pc, #108]	; (8003f10 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea6:	0c9b      	lsrs	r3, r3, #18
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003eac:	e002      	b.n	8003eb4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003eb4:	4b14      	ldr	r3, [pc, #80]	; (8003f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec0:	d102      	bne.n	8003ec8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1f2      	bne.n	8003eae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ec8:	4b0f      	ldr	r3, [pc, #60]	; (8003f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed4:	d110      	bne.n	8003ef8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e00f      	b.n	8003efa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003eda:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee6:	d007      	beq.n	8003ef8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ee8:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ef0:	4a05      	ldr	r2, [pc, #20]	; (8003f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ef6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40007000 	.word	0x40007000
 8003f0c:	20000000 	.word	0x20000000
 8003f10:	431bde83 	.word	0x431bde83

08003f14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e3ca      	b.n	80046bc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f26:	4b97      	ldr	r3, [pc, #604]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
 8003f2e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f30:	4b94      	ldr	r3, [pc, #592]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0310 	and.w	r3, r3, #16
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 80e4 	beq.w	8004110 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d007      	beq.n	8003f5e <HAL_RCC_OscConfig+0x4a>
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	2b0c      	cmp	r3, #12
 8003f52:	f040 808b 	bne.w	800406c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	f040 8087 	bne.w	800406c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f5e:	4b89      	ldr	r3, [pc, #548]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_RCC_OscConfig+0x62>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e3a2      	b.n	80046bc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1a      	ldr	r2, [r3, #32]
 8003f7a:	4b82      	ldr	r3, [pc, #520]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d004      	beq.n	8003f90 <HAL_RCC_OscConfig+0x7c>
 8003f86:	4b7f      	ldr	r3, [pc, #508]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f8e:	e005      	b.n	8003f9c <HAL_RCC_OscConfig+0x88>
 8003f90:	4b7c      	ldr	r3, [pc, #496]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 8003f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f96:	091b      	lsrs	r3, r3, #4
 8003f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d223      	bcs.n	8003fe8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 fd55 	bl	8004a54 <RCC_SetFlashLatencyFromMSIRange>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e383      	b.n	80046bc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fb4:	4b73      	ldr	r3, [pc, #460]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a72      	ldr	r2, [pc, #456]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 8003fba:	f043 0308 	orr.w	r3, r3, #8
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	4b70      	ldr	r3, [pc, #448]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	496d      	ldr	r1, [pc, #436]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fd2:	4b6c      	ldr	r3, [pc, #432]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	021b      	lsls	r3, r3, #8
 8003fe0:	4968      	ldr	r1, [pc, #416]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	604b      	str	r3, [r1, #4]
 8003fe6:	e025      	b.n	8004034 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fe8:	4b66      	ldr	r3, [pc, #408]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a65      	ldr	r2, [pc, #404]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 8003fee:	f043 0308 	orr.w	r3, r3, #8
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	4b63      	ldr	r3, [pc, #396]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	4960      	ldr	r1, [pc, #384]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 8004002:	4313      	orrs	r3, r2
 8004004:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004006:	4b5f      	ldr	r3, [pc, #380]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	021b      	lsls	r3, r3, #8
 8004014:	495b      	ldr	r1, [pc, #364]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 8004016:	4313      	orrs	r3, r2
 8004018:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d109      	bne.n	8004034 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	4618      	mov	r0, r3
 8004026:	f000 fd15 	bl	8004a54 <RCC_SetFlashLatencyFromMSIRange>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e343      	b.n	80046bc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004034:	f000 fc4a 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 8004038:	4602      	mov	r2, r0
 800403a:	4b52      	ldr	r3, [pc, #328]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	091b      	lsrs	r3, r3, #4
 8004040:	f003 030f 	and.w	r3, r3, #15
 8004044:	4950      	ldr	r1, [pc, #320]	; (8004188 <HAL_RCC_OscConfig+0x274>)
 8004046:	5ccb      	ldrb	r3, [r1, r3]
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	fa22 f303 	lsr.w	r3, r2, r3
 8004050:	4a4e      	ldr	r2, [pc, #312]	; (800418c <HAL_RCC_OscConfig+0x278>)
 8004052:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004054:	4b4e      	ldr	r3, [pc, #312]	; (8004190 <HAL_RCC_OscConfig+0x27c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f7fd ff3f 	bl	8001edc <HAL_InitTick>
 800405e:	4603      	mov	r3, r0
 8004060:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004062:	7bfb      	ldrb	r3, [r7, #15]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d052      	beq.n	800410e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004068:	7bfb      	ldrb	r3, [r7, #15]
 800406a:	e327      	b.n	80046bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d032      	beq.n	80040da <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004074:	4b43      	ldr	r3, [pc, #268]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a42      	ldr	r2, [pc, #264]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004080:	f7fd ff7c 	bl	8001f7c <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004088:	f7fd ff78 	bl	8001f7c <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e310      	b.n	80046bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800409a:	4b3a      	ldr	r3, [pc, #232]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0f0      	beq.n	8004088 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040a6:	4b37      	ldr	r3, [pc, #220]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a36      	ldr	r2, [pc, #216]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 80040ac:	f043 0308 	orr.w	r3, r3, #8
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	4b34      	ldr	r3, [pc, #208]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	4931      	ldr	r1, [pc, #196]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040c4:	4b2f      	ldr	r3, [pc, #188]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	492c      	ldr	r1, [pc, #176]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	604b      	str	r3, [r1, #4]
 80040d8:	e01a      	b.n	8004110 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040da:	4b2a      	ldr	r3, [pc, #168]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a29      	ldr	r2, [pc, #164]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 80040e0:	f023 0301 	bic.w	r3, r3, #1
 80040e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040e6:	f7fd ff49 	bl	8001f7c <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040ec:	e008      	b.n	8004100 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040ee:	f7fd ff45 	bl	8001f7c <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e2dd      	b.n	80046bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004100:	4b20      	ldr	r3, [pc, #128]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1f0      	bne.n	80040ee <HAL_RCC_OscConfig+0x1da>
 800410c:	e000      	b.n	8004110 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800410e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d074      	beq.n	8004206 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	2b08      	cmp	r3, #8
 8004120:	d005      	beq.n	800412e <HAL_RCC_OscConfig+0x21a>
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	2b0c      	cmp	r3, #12
 8004126:	d10e      	bne.n	8004146 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2b03      	cmp	r3, #3
 800412c:	d10b      	bne.n	8004146 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800412e:	4b15      	ldr	r3, [pc, #84]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d064      	beq.n	8004204 <HAL_RCC_OscConfig+0x2f0>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d160      	bne.n	8004204 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e2ba      	b.n	80046bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800414e:	d106      	bne.n	800415e <HAL_RCC_OscConfig+0x24a>
 8004150:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a0b      	ldr	r2, [pc, #44]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 8004156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800415a:	6013      	str	r3, [r2, #0]
 800415c:	e026      	b.n	80041ac <HAL_RCC_OscConfig+0x298>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004166:	d115      	bne.n	8004194 <HAL_RCC_OscConfig+0x280>
 8004168:	4b06      	ldr	r3, [pc, #24]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a05      	ldr	r2, [pc, #20]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 800416e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	4b03      	ldr	r3, [pc, #12]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a02      	ldr	r2, [pc, #8]	; (8004184 <HAL_RCC_OscConfig+0x270>)
 800417a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	e014      	b.n	80041ac <HAL_RCC_OscConfig+0x298>
 8004182:	bf00      	nop
 8004184:	40021000 	.word	0x40021000
 8004188:	0800a4f4 	.word	0x0800a4f4
 800418c:	20000000 	.word	0x20000000
 8004190:	20000004 	.word	0x20000004
 8004194:	4ba0      	ldr	r3, [pc, #640]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a9f      	ldr	r2, [pc, #636]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 800419a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800419e:	6013      	str	r3, [r2, #0]
 80041a0:	4b9d      	ldr	r3, [pc, #628]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a9c      	ldr	r2, [pc, #624]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 80041a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d013      	beq.n	80041dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b4:	f7fd fee2 	bl	8001f7c <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041bc:	f7fd fede 	bl	8001f7c <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b64      	cmp	r3, #100	; 0x64
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e276      	b.n	80046bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041ce:	4b92      	ldr	r3, [pc, #584]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0f0      	beq.n	80041bc <HAL_RCC_OscConfig+0x2a8>
 80041da:	e014      	b.n	8004206 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041dc:	f7fd fece 	bl	8001f7c <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041e4:	f7fd feca 	bl	8001f7c <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b64      	cmp	r3, #100	; 0x64
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e262      	b.n	80046bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041f6:	4b88      	ldr	r3, [pc, #544]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1f0      	bne.n	80041e4 <HAL_RCC_OscConfig+0x2d0>
 8004202:	e000      	b.n	8004206 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d060      	beq.n	80042d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	2b04      	cmp	r3, #4
 8004216:	d005      	beq.n	8004224 <HAL_RCC_OscConfig+0x310>
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	2b0c      	cmp	r3, #12
 800421c:	d119      	bne.n	8004252 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2b02      	cmp	r3, #2
 8004222:	d116      	bne.n	8004252 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004224:	4b7c      	ldr	r3, [pc, #496]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <HAL_RCC_OscConfig+0x328>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e23f      	b.n	80046bc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423c:	4b76      	ldr	r3, [pc, #472]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	061b      	lsls	r3, r3, #24
 800424a:	4973      	ldr	r1, [pc, #460]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 800424c:	4313      	orrs	r3, r2
 800424e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004250:	e040      	b.n	80042d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d023      	beq.n	80042a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800425a:	4b6f      	ldr	r3, [pc, #444]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a6e      	ldr	r2, [pc, #440]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 8004260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004266:	f7fd fe89 	bl	8001f7c <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800426e:	f7fd fe85 	bl	8001f7c <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e21d      	b.n	80046bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004280:	4b65      	ldr	r3, [pc, #404]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f0      	beq.n	800426e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800428c:	4b62      	ldr	r3, [pc, #392]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	061b      	lsls	r3, r3, #24
 800429a:	495f      	ldr	r1, [pc, #380]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 800429c:	4313      	orrs	r3, r2
 800429e:	604b      	str	r3, [r1, #4]
 80042a0:	e018      	b.n	80042d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042a2:	4b5d      	ldr	r3, [pc, #372]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a5c      	ldr	r2, [pc, #368]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 80042a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ae:	f7fd fe65 	bl	8001f7c <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042b6:	f7fd fe61 	bl	8001f7c <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e1f9      	b.n	80046bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042c8:	4b53      	ldr	r3, [pc, #332]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1f0      	bne.n	80042b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0308 	and.w	r3, r3, #8
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d03c      	beq.n	800435a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d01c      	beq.n	8004322 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042e8:	4b4b      	ldr	r3, [pc, #300]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 80042ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ee:	4a4a      	ldr	r2, [pc, #296]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 80042f0:	f043 0301 	orr.w	r3, r3, #1
 80042f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f8:	f7fd fe40 	bl	8001f7c <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004300:	f7fd fe3c 	bl	8001f7c <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e1d4      	b.n	80046bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004312:	4b41      	ldr	r3, [pc, #260]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 8004314:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0ef      	beq.n	8004300 <HAL_RCC_OscConfig+0x3ec>
 8004320:	e01b      	b.n	800435a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004322:	4b3d      	ldr	r3, [pc, #244]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 8004324:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004328:	4a3b      	ldr	r2, [pc, #236]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 800432a:	f023 0301 	bic.w	r3, r3, #1
 800432e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004332:	f7fd fe23 	bl	8001f7c <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800433a:	f7fd fe1f 	bl	8001f7c <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e1b7      	b.n	80046bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800434c:	4b32      	ldr	r3, [pc, #200]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 800434e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1ef      	bne.n	800433a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0304 	and.w	r3, r3, #4
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 80a6 	beq.w	80044b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004368:	2300      	movs	r3, #0
 800436a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800436c:	4b2a      	ldr	r3, [pc, #168]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 800436e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10d      	bne.n	8004394 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004378:	4b27      	ldr	r3, [pc, #156]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 800437a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437c:	4a26      	ldr	r2, [pc, #152]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 800437e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004382:	6593      	str	r3, [r2, #88]	; 0x58
 8004384:	4b24      	ldr	r3, [pc, #144]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 8004386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438c:	60bb      	str	r3, [r7, #8]
 800438e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004390:	2301      	movs	r3, #1
 8004392:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004394:	4b21      	ldr	r3, [pc, #132]	; (800441c <HAL_RCC_OscConfig+0x508>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439c:	2b00      	cmp	r3, #0
 800439e:	d118      	bne.n	80043d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043a0:	4b1e      	ldr	r3, [pc, #120]	; (800441c <HAL_RCC_OscConfig+0x508>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a1d      	ldr	r2, [pc, #116]	; (800441c <HAL_RCC_OscConfig+0x508>)
 80043a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ac:	f7fd fde6 	bl	8001f7c <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b4:	f7fd fde2 	bl	8001f7c <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e17a      	b.n	80046bc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043c6:	4b15      	ldr	r3, [pc, #84]	; (800441c <HAL_RCC_OscConfig+0x508>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0f0      	beq.n	80043b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d108      	bne.n	80043ec <HAL_RCC_OscConfig+0x4d8>
 80043da:	4b0f      	ldr	r3, [pc, #60]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 80043dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e0:	4a0d      	ldr	r2, [pc, #52]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 80043e2:	f043 0301 	orr.w	r3, r3, #1
 80043e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043ea:	e029      	b.n	8004440 <HAL_RCC_OscConfig+0x52c>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b05      	cmp	r3, #5
 80043f2:	d115      	bne.n	8004420 <HAL_RCC_OscConfig+0x50c>
 80043f4:	4b08      	ldr	r3, [pc, #32]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 80043f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fa:	4a07      	ldr	r2, [pc, #28]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 80043fc:	f043 0304 	orr.w	r3, r3, #4
 8004400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004404:	4b04      	ldr	r3, [pc, #16]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 8004406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440a:	4a03      	ldr	r2, [pc, #12]	; (8004418 <HAL_RCC_OscConfig+0x504>)
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004414:	e014      	b.n	8004440 <HAL_RCC_OscConfig+0x52c>
 8004416:	bf00      	nop
 8004418:	40021000 	.word	0x40021000
 800441c:	40007000 	.word	0x40007000
 8004420:	4b9c      	ldr	r3, [pc, #624]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 8004422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004426:	4a9b      	ldr	r2, [pc, #620]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 8004428:	f023 0301 	bic.w	r3, r3, #1
 800442c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004430:	4b98      	ldr	r3, [pc, #608]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 8004432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004436:	4a97      	ldr	r2, [pc, #604]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 8004438:	f023 0304 	bic.w	r3, r3, #4
 800443c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d016      	beq.n	8004476 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004448:	f7fd fd98 	bl	8001f7c <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800444e:	e00a      	b.n	8004466 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004450:	f7fd fd94 	bl	8001f7c <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	f241 3288 	movw	r2, #5000	; 0x1388
 800445e:	4293      	cmp	r3, r2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e12a      	b.n	80046bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004466:	4b8b      	ldr	r3, [pc, #556]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 8004468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0ed      	beq.n	8004450 <HAL_RCC_OscConfig+0x53c>
 8004474:	e015      	b.n	80044a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004476:	f7fd fd81 	bl	8001f7c <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800447c:	e00a      	b.n	8004494 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800447e:	f7fd fd7d 	bl	8001f7c <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	f241 3288 	movw	r2, #5000	; 0x1388
 800448c:	4293      	cmp	r3, r2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e113      	b.n	80046bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004494:	4b7f      	ldr	r3, [pc, #508]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 8004496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1ed      	bne.n	800447e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044a2:	7ffb      	ldrb	r3, [r7, #31]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d105      	bne.n	80044b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a8:	4b7a      	ldr	r3, [pc, #488]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 80044aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ac:	4a79      	ldr	r2, [pc, #484]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 80044ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044b2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 80fe 	beq.w	80046ba <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	f040 80d0 	bne.w	8004668 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80044c8:	4b72      	ldr	r3, [pc, #456]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f003 0203 	and.w	r2, r3, #3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	429a      	cmp	r2, r3
 80044da:	d130      	bne.n	800453e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	3b01      	subs	r3, #1
 80044e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d127      	bne.n	800453e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d11f      	bne.n	800453e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004508:	2a07      	cmp	r2, #7
 800450a:	bf14      	ite	ne
 800450c:	2201      	movne	r2, #1
 800450e:	2200      	moveq	r2, #0
 8004510:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004512:	4293      	cmp	r3, r2
 8004514:	d113      	bne.n	800453e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004520:	085b      	lsrs	r3, r3, #1
 8004522:	3b01      	subs	r3, #1
 8004524:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004526:	429a      	cmp	r2, r3
 8004528:	d109      	bne.n	800453e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	085b      	lsrs	r3, r3, #1
 8004536:	3b01      	subs	r3, #1
 8004538:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800453a:	429a      	cmp	r2, r3
 800453c:	d06e      	beq.n	800461c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	2b0c      	cmp	r3, #12
 8004542:	d069      	beq.n	8004618 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004544:	4b53      	ldr	r3, [pc, #332]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d105      	bne.n	800455c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004550:	4b50      	ldr	r3, [pc, #320]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e0ad      	b.n	80046bc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004560:	4b4c      	ldr	r3, [pc, #304]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a4b      	ldr	r2, [pc, #300]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 8004566:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800456a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800456c:	f7fd fd06 	bl	8001f7c <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004574:	f7fd fd02 	bl	8001f7c <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e09a      	b.n	80046bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004586:	4b43      	ldr	r3, [pc, #268]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f0      	bne.n	8004574 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004592:	4b40      	ldr	r3, [pc, #256]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	4b40      	ldr	r3, [pc, #256]	; (8004698 <HAL_RCC_OscConfig+0x784>)
 8004598:	4013      	ands	r3, r2
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045a2:	3a01      	subs	r2, #1
 80045a4:	0112      	lsls	r2, r2, #4
 80045a6:	4311      	orrs	r1, r2
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045ac:	0212      	lsls	r2, r2, #8
 80045ae:	4311      	orrs	r1, r2
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045b4:	0852      	lsrs	r2, r2, #1
 80045b6:	3a01      	subs	r2, #1
 80045b8:	0552      	lsls	r2, r2, #21
 80045ba:	4311      	orrs	r1, r2
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045c0:	0852      	lsrs	r2, r2, #1
 80045c2:	3a01      	subs	r2, #1
 80045c4:	0652      	lsls	r2, r2, #25
 80045c6:	4311      	orrs	r1, r2
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045cc:	0912      	lsrs	r2, r2, #4
 80045ce:	0452      	lsls	r2, r2, #17
 80045d0:	430a      	orrs	r2, r1
 80045d2:	4930      	ldr	r1, [pc, #192]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80045d8:	4b2e      	ldr	r3, [pc, #184]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a2d      	ldr	r2, [pc, #180]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 80045de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045e4:	4b2b      	ldr	r3, [pc, #172]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	4a2a      	ldr	r2, [pc, #168]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 80045ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045f0:	f7fd fcc4 	bl	8001f7c <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f8:	f7fd fcc0 	bl	8001f7c <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e058      	b.n	80046bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800460a:	4b22      	ldr	r3, [pc, #136]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0f0      	beq.n	80045f8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004616:	e050      	b.n	80046ba <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e04f      	b.n	80046bc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800461c:	4b1d      	ldr	r3, [pc, #116]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d148      	bne.n	80046ba <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004628:	4b1a      	ldr	r3, [pc, #104]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a19      	ldr	r2, [pc, #100]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 800462e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004632:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004634:	4b17      	ldr	r3, [pc, #92]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	4a16      	ldr	r2, [pc, #88]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 800463a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800463e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004640:	f7fd fc9c 	bl	8001f7c <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004648:	f7fd fc98 	bl	8001f7c <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e030      	b.n	80046bc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800465a:	4b0e      	ldr	r3, [pc, #56]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0f0      	beq.n	8004648 <HAL_RCC_OscConfig+0x734>
 8004666:	e028      	b.n	80046ba <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	2b0c      	cmp	r3, #12
 800466c:	d023      	beq.n	80046b6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466e:	4b09      	ldr	r3, [pc, #36]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a08      	ldr	r2, [pc, #32]	; (8004694 <HAL_RCC_OscConfig+0x780>)
 8004674:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467a:	f7fd fc7f 	bl	8001f7c <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004680:	e00c      	b.n	800469c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004682:	f7fd fc7b 	bl	8001f7c <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d905      	bls.n	800469c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e013      	b.n	80046bc <HAL_RCC_OscConfig+0x7a8>
 8004694:	40021000 	.word	0x40021000
 8004698:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800469c:	4b09      	ldr	r3, [pc, #36]	; (80046c4 <HAL_RCC_OscConfig+0x7b0>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1ec      	bne.n	8004682 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80046a8:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <HAL_RCC_OscConfig+0x7b0>)
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	4905      	ldr	r1, [pc, #20]	; (80046c4 <HAL_RCC_OscConfig+0x7b0>)
 80046ae:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <HAL_RCC_OscConfig+0x7b4>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	60cb      	str	r3, [r1, #12]
 80046b4:	e001      	b.n	80046ba <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e000      	b.n	80046bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3720      	adds	r7, #32
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40021000 	.word	0x40021000
 80046c8:	feeefffc 	.word	0xfeeefffc

080046cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e0e7      	b.n	80048b0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046e0:	4b75      	ldr	r3, [pc, #468]	; (80048b8 <HAL_RCC_ClockConfig+0x1ec>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d910      	bls.n	8004710 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ee:	4b72      	ldr	r3, [pc, #456]	; (80048b8 <HAL_RCC_ClockConfig+0x1ec>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f023 0207 	bic.w	r2, r3, #7
 80046f6:	4970      	ldr	r1, [pc, #448]	; (80048b8 <HAL_RCC_ClockConfig+0x1ec>)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fe:	4b6e      	ldr	r3, [pc, #440]	; (80048b8 <HAL_RCC_ClockConfig+0x1ec>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d001      	beq.n	8004710 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e0cf      	b.n	80048b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d010      	beq.n	800473e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	4b66      	ldr	r3, [pc, #408]	; (80048bc <HAL_RCC_ClockConfig+0x1f0>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004728:	429a      	cmp	r2, r3
 800472a:	d908      	bls.n	800473e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800472c:	4b63      	ldr	r3, [pc, #396]	; (80048bc <HAL_RCC_ClockConfig+0x1f0>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	4960      	ldr	r1, [pc, #384]	; (80048bc <HAL_RCC_ClockConfig+0x1f0>)
 800473a:	4313      	orrs	r3, r2
 800473c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d04c      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b03      	cmp	r3, #3
 8004750:	d107      	bne.n	8004762 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004752:	4b5a      	ldr	r3, [pc, #360]	; (80048bc <HAL_RCC_ClockConfig+0x1f0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d121      	bne.n	80047a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e0a6      	b.n	80048b0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b02      	cmp	r3, #2
 8004768:	d107      	bne.n	800477a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800476a:	4b54      	ldr	r3, [pc, #336]	; (80048bc <HAL_RCC_ClockConfig+0x1f0>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d115      	bne.n	80047a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e09a      	b.n	80048b0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d107      	bne.n	8004792 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004782:	4b4e      	ldr	r3, [pc, #312]	; (80048bc <HAL_RCC_ClockConfig+0x1f0>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d109      	bne.n	80047a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e08e      	b.n	80048b0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004792:	4b4a      	ldr	r3, [pc, #296]	; (80048bc <HAL_RCC_ClockConfig+0x1f0>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e086      	b.n	80048b0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047a2:	4b46      	ldr	r3, [pc, #280]	; (80048bc <HAL_RCC_ClockConfig+0x1f0>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f023 0203 	bic.w	r2, r3, #3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	4943      	ldr	r1, [pc, #268]	; (80048bc <HAL_RCC_ClockConfig+0x1f0>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047b4:	f7fd fbe2 	bl	8001f7c <HAL_GetTick>
 80047b8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ba:	e00a      	b.n	80047d2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047bc:	f7fd fbde 	bl	8001f7c <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e06e      	b.n	80048b0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d2:	4b3a      	ldr	r3, [pc, #232]	; (80048bc <HAL_RCC_ClockConfig+0x1f0>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 020c 	and.w	r2, r3, #12
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d1eb      	bne.n	80047bc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d010      	beq.n	8004812 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	4b31      	ldr	r3, [pc, #196]	; (80048bc <HAL_RCC_ClockConfig+0x1f0>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d208      	bcs.n	8004812 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004800:	4b2e      	ldr	r3, [pc, #184]	; (80048bc <HAL_RCC_ClockConfig+0x1f0>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	492b      	ldr	r1, [pc, #172]	; (80048bc <HAL_RCC_ClockConfig+0x1f0>)
 800480e:	4313      	orrs	r3, r2
 8004810:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004812:	4b29      	ldr	r3, [pc, #164]	; (80048b8 <HAL_RCC_ClockConfig+0x1ec>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d210      	bcs.n	8004842 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004820:	4b25      	ldr	r3, [pc, #148]	; (80048b8 <HAL_RCC_ClockConfig+0x1ec>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f023 0207 	bic.w	r2, r3, #7
 8004828:	4923      	ldr	r1, [pc, #140]	; (80048b8 <HAL_RCC_ClockConfig+0x1ec>)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	4313      	orrs	r3, r2
 800482e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004830:	4b21      	ldr	r3, [pc, #132]	; (80048b8 <HAL_RCC_ClockConfig+0x1ec>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d001      	beq.n	8004842 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e036      	b.n	80048b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0304 	and.w	r3, r3, #4
 800484a:	2b00      	cmp	r3, #0
 800484c:	d008      	beq.n	8004860 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800484e:	4b1b      	ldr	r3, [pc, #108]	; (80048bc <HAL_RCC_ClockConfig+0x1f0>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	4918      	ldr	r1, [pc, #96]	; (80048bc <HAL_RCC_ClockConfig+0x1f0>)
 800485c:	4313      	orrs	r3, r2
 800485e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0308 	and.w	r3, r3, #8
 8004868:	2b00      	cmp	r3, #0
 800486a:	d009      	beq.n	8004880 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800486c:	4b13      	ldr	r3, [pc, #76]	; (80048bc <HAL_RCC_ClockConfig+0x1f0>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	4910      	ldr	r1, [pc, #64]	; (80048bc <HAL_RCC_ClockConfig+0x1f0>)
 800487c:	4313      	orrs	r3, r2
 800487e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004880:	f000 f824 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 8004884:	4602      	mov	r2, r0
 8004886:	4b0d      	ldr	r3, [pc, #52]	; (80048bc <HAL_RCC_ClockConfig+0x1f0>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	091b      	lsrs	r3, r3, #4
 800488c:	f003 030f 	and.w	r3, r3, #15
 8004890:	490b      	ldr	r1, [pc, #44]	; (80048c0 <HAL_RCC_ClockConfig+0x1f4>)
 8004892:	5ccb      	ldrb	r3, [r1, r3]
 8004894:	f003 031f 	and.w	r3, r3, #31
 8004898:	fa22 f303 	lsr.w	r3, r2, r3
 800489c:	4a09      	ldr	r2, [pc, #36]	; (80048c4 <HAL_RCC_ClockConfig+0x1f8>)
 800489e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048a0:	4b09      	ldr	r3, [pc, #36]	; (80048c8 <HAL_RCC_ClockConfig+0x1fc>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fd fb19 	bl	8001edc <HAL_InitTick>
 80048aa:	4603      	mov	r3, r0
 80048ac:	72fb      	strb	r3, [r7, #11]

  return status;
 80048ae:	7afb      	ldrb	r3, [r7, #11]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40022000 	.word	0x40022000
 80048bc:	40021000 	.word	0x40021000
 80048c0:	0800a4f4 	.word	0x0800a4f4
 80048c4:	20000000 	.word	0x20000000
 80048c8:	20000004 	.word	0x20000004

080048cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b089      	sub	sp, #36	; 0x24
 80048d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	61fb      	str	r3, [r7, #28]
 80048d6:	2300      	movs	r3, #0
 80048d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048da:	4b3e      	ldr	r3, [pc, #248]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 030c 	and.w	r3, r3, #12
 80048e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048e4:	4b3b      	ldr	r3, [pc, #236]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f003 0303 	and.w	r3, r3, #3
 80048ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d005      	beq.n	8004900 <HAL_RCC_GetSysClockFreq+0x34>
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	2b0c      	cmp	r3, #12
 80048f8:	d121      	bne.n	800493e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d11e      	bne.n	800493e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004900:	4b34      	ldr	r3, [pc, #208]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b00      	cmp	r3, #0
 800490a:	d107      	bne.n	800491c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800490c:	4b31      	ldr	r3, [pc, #196]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800490e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004912:	0a1b      	lsrs	r3, r3, #8
 8004914:	f003 030f 	and.w	r3, r3, #15
 8004918:	61fb      	str	r3, [r7, #28]
 800491a:	e005      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800491c:	4b2d      	ldr	r3, [pc, #180]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	091b      	lsrs	r3, r3, #4
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004928:	4a2b      	ldr	r2, [pc, #172]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004930:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10d      	bne.n	8004954 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800493c:	e00a      	b.n	8004954 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	2b04      	cmp	r3, #4
 8004942:	d102      	bne.n	800494a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004944:	4b25      	ldr	r3, [pc, #148]	; (80049dc <HAL_RCC_GetSysClockFreq+0x110>)
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	e004      	b.n	8004954 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2b08      	cmp	r3, #8
 800494e:	d101      	bne.n	8004954 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004950:	4b23      	ldr	r3, [pc, #140]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004952:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	2b0c      	cmp	r3, #12
 8004958:	d134      	bne.n	80049c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800495a:	4b1e      	ldr	r3, [pc, #120]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d003      	beq.n	8004972 <HAL_RCC_GetSysClockFreq+0xa6>
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b03      	cmp	r3, #3
 800496e:	d003      	beq.n	8004978 <HAL_RCC_GetSysClockFreq+0xac>
 8004970:	e005      	b.n	800497e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004972:	4b1a      	ldr	r3, [pc, #104]	; (80049dc <HAL_RCC_GetSysClockFreq+0x110>)
 8004974:	617b      	str	r3, [r7, #20]
      break;
 8004976:	e005      	b.n	8004984 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004978:	4b19      	ldr	r3, [pc, #100]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800497a:	617b      	str	r3, [r7, #20]
      break;
 800497c:	e002      	b.n	8004984 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	617b      	str	r3, [r7, #20]
      break;
 8004982:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004984:	4b13      	ldr	r3, [pc, #76]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	091b      	lsrs	r3, r3, #4
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	3301      	adds	r3, #1
 8004990:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004992:	4b10      	ldr	r3, [pc, #64]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	0a1b      	lsrs	r3, r3, #8
 8004998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	fb03 f202 	mul.w	r2, r3, r2
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049aa:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	0e5b      	lsrs	r3, r3, #25
 80049b0:	f003 0303 	and.w	r3, r3, #3
 80049b4:	3301      	adds	r3, #1
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80049c4:	69bb      	ldr	r3, [r7, #24]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3724      	adds	r7, #36	; 0x24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	40021000 	.word	0x40021000
 80049d8:	0800a50c 	.word	0x0800a50c
 80049dc:	00f42400 	.word	0x00f42400
 80049e0:	007a1200 	.word	0x007a1200

080049e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049e8:	4b03      	ldr	r3, [pc, #12]	; (80049f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80049ea:	681b      	ldr	r3, [r3, #0]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	20000000 	.word	0x20000000

080049fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a00:	f7ff fff0 	bl	80049e4 <HAL_RCC_GetHCLKFreq>
 8004a04:	4602      	mov	r2, r0
 8004a06:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	0a1b      	lsrs	r3, r3, #8
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	4904      	ldr	r1, [pc, #16]	; (8004a24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a12:	5ccb      	ldrb	r3, [r1, r3]
 8004a14:	f003 031f 	and.w	r3, r3, #31
 8004a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40021000 	.word	0x40021000
 8004a24:	0800a504 	.word	0x0800a504

08004a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a2c:	f7ff ffda 	bl	80049e4 <HAL_RCC_GetHCLKFreq>
 8004a30:	4602      	mov	r2, r0
 8004a32:	4b06      	ldr	r3, [pc, #24]	; (8004a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	0adb      	lsrs	r3, r3, #11
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	4904      	ldr	r1, [pc, #16]	; (8004a50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a3e:	5ccb      	ldrb	r3, [r1, r3]
 8004a40:	f003 031f 	and.w	r3, r3, #31
 8004a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	0800a504 	.word	0x0800a504

08004a54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a60:	4b2a      	ldr	r3, [pc, #168]	; (8004b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a6c:	f7ff f9ee 	bl	8003e4c <HAL_PWREx_GetVoltageRange>
 8004a70:	6178      	str	r0, [r7, #20]
 8004a72:	e014      	b.n	8004a9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a74:	4b25      	ldr	r3, [pc, #148]	; (8004b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a78:	4a24      	ldr	r2, [pc, #144]	; (8004b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a80:	4b22      	ldr	r3, [pc, #136]	; (8004b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a88:	60fb      	str	r3, [r7, #12]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a8c:	f7ff f9de 	bl	8003e4c <HAL_PWREx_GetVoltageRange>
 8004a90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a92:	4b1e      	ldr	r3, [pc, #120]	; (8004b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a96:	4a1d      	ldr	r2, [pc, #116]	; (8004b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aa4:	d10b      	bne.n	8004abe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b80      	cmp	r3, #128	; 0x80
 8004aaa:	d919      	bls.n	8004ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2ba0      	cmp	r3, #160	; 0xa0
 8004ab0:	d902      	bls.n	8004ab8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	e013      	b.n	8004ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ab8:	2301      	movs	r3, #1
 8004aba:	613b      	str	r3, [r7, #16]
 8004abc:	e010      	b.n	8004ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b80      	cmp	r3, #128	; 0x80
 8004ac2:	d902      	bls.n	8004aca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	613b      	str	r3, [r7, #16]
 8004ac8:	e00a      	b.n	8004ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b80      	cmp	r3, #128	; 0x80
 8004ace:	d102      	bne.n	8004ad6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	613b      	str	r3, [r7, #16]
 8004ad4:	e004      	b.n	8004ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b70      	cmp	r3, #112	; 0x70
 8004ada:	d101      	bne.n	8004ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004adc:	2301      	movs	r3, #1
 8004ade:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f023 0207 	bic.w	r2, r3, #7
 8004ae8:	4909      	ldr	r1, [pc, #36]	; (8004b10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004af0:	4b07      	ldr	r3, [pc, #28]	; (8004b10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d001      	beq.n	8004b02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e000      	b.n	8004b04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	40022000 	.word	0x40022000

08004b14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b20:	2300      	movs	r3, #0
 8004b22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d041      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b34:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b38:	d02a      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004b3a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b3e:	d824      	bhi.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b44:	d008      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004b46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b4a:	d81e      	bhi.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00a      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004b50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b54:	d010      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004b56:	e018      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b58:	4b86      	ldr	r3, [pc, #536]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	4a85      	ldr	r2, [pc, #532]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b62:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b64:	e015      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	3304      	adds	r3, #4
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 fabb 	bl	80050e8 <RCCEx_PLLSAI1_Config>
 8004b72:	4603      	mov	r3, r0
 8004b74:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b76:	e00c      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3320      	adds	r3, #32
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 fba6 	bl	80052d0 <RCCEx_PLLSAI2_Config>
 8004b84:	4603      	mov	r3, r0
 8004b86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b88:	e003      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	74fb      	strb	r3, [r7, #19]
      break;
 8004b8e:	e000      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004b90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b92:	7cfb      	ldrb	r3, [r7, #19]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10b      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b98:	4b76      	ldr	r3, [pc, #472]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ba6:	4973      	ldr	r1, [pc, #460]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004bae:	e001      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb0:	7cfb      	ldrb	r3, [r7, #19]
 8004bb2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d041      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004bc8:	d02a      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004bca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004bce:	d824      	bhi.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004bd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bd4:	d008      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004bd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bda:	d81e      	bhi.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00a      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004be4:	d010      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004be6:	e018      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004be8:	4b62      	ldr	r3, [pc, #392]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	4a61      	ldr	r2, [pc, #388]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bf4:	e015      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 fa73 	bl	80050e8 <RCCEx_PLLSAI1_Config>
 8004c02:	4603      	mov	r3, r0
 8004c04:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c06:	e00c      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3320      	adds	r3, #32
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fb5e 	bl	80052d0 <RCCEx_PLLSAI2_Config>
 8004c14:	4603      	mov	r3, r0
 8004c16:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c18:	e003      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	74fb      	strb	r3, [r7, #19]
      break;
 8004c1e:	e000      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004c20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c22:	7cfb      	ldrb	r3, [r7, #19]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10b      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c28:	4b52      	ldr	r3, [pc, #328]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c36:	494f      	ldr	r1, [pc, #316]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c3e:	e001      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c40:	7cfb      	ldrb	r3, [r7, #19]
 8004c42:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 80a0 	beq.w	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c52:	2300      	movs	r3, #0
 8004c54:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c56:	4b47      	ldr	r3, [pc, #284]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004c66:	2300      	movs	r3, #0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00d      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c6c:	4b41      	ldr	r3, [pc, #260]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c70:	4a40      	ldr	r2, [pc, #256]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c76:	6593      	str	r3, [r2, #88]	; 0x58
 8004c78:	4b3e      	ldr	r3, [pc, #248]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c80:	60bb      	str	r3, [r7, #8]
 8004c82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c84:	2301      	movs	r3, #1
 8004c86:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c88:	4b3b      	ldr	r3, [pc, #236]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a3a      	ldr	r2, [pc, #232]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c94:	f7fd f972 	bl	8001f7c <HAL_GetTick>
 8004c98:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c9a:	e009      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c9c:	f7fd f96e 	bl	8001f7c <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d902      	bls.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	74fb      	strb	r3, [r7, #19]
        break;
 8004cae:	e005      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004cb0:	4b31      	ldr	r3, [pc, #196]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0ef      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004cbc:	7cfb      	ldrb	r3, [r7, #19]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d15c      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004cc2:	4b2c      	ldr	r3, [pc, #176]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ccc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01f      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d019      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ce0:	4b24      	ldr	r3, [pc, #144]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cec:	4b21      	ldr	r3, [pc, #132]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf2:	4a20      	ldr	r2, [pc, #128]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cfc:	4b1d      	ldr	r3, [pc, #116]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d02:	4a1c      	ldr	r2, [pc, #112]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d0c:	4a19      	ldr	r2, [pc, #100]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d016      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1e:	f7fd f92d 	bl	8001f7c <HAL_GetTick>
 8004d22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d24:	e00b      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d26:	f7fd f929 	bl	8001f7c <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d902      	bls.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	74fb      	strb	r3, [r7, #19]
            break;
 8004d3c:	e006      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d3e:	4b0d      	ldr	r3, [pc, #52]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d0ec      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004d4c:	7cfb      	ldrb	r3, [r7, #19]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10c      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d52:	4b08      	ldr	r3, [pc, #32]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d62:	4904      	ldr	r1, [pc, #16]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d6a:	e009      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d6c:	7cfb      	ldrb	r3, [r7, #19]
 8004d6e:	74bb      	strb	r3, [r7, #18]
 8004d70:	e006      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004d72:	bf00      	nop
 8004d74:	40021000 	.word	0x40021000
 8004d78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7c:	7cfb      	ldrb	r3, [r7, #19]
 8004d7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d80:	7c7b      	ldrb	r3, [r7, #17]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d105      	bne.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d86:	4b9e      	ldr	r3, [pc, #632]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8a:	4a9d      	ldr	r2, [pc, #628]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d90:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d9e:	4b98      	ldr	r3, [pc, #608]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da4:	f023 0203 	bic.w	r2, r3, #3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dac:	4994      	ldr	r1, [pc, #592]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00a      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dc0:	4b8f      	ldr	r3, [pc, #572]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc6:	f023 020c 	bic.w	r2, r3, #12
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dce:	498c      	ldr	r1, [pc, #560]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0304 	and.w	r3, r3, #4
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00a      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004de2:	4b87      	ldr	r3, [pc, #540]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	4983      	ldr	r1, [pc, #524]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0308 	and.w	r3, r3, #8
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00a      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e04:	4b7e      	ldr	r3, [pc, #504]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e12:	497b      	ldr	r1, [pc, #492]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0310 	and.w	r3, r3, #16
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00a      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e26:	4b76      	ldr	r3, [pc, #472]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e34:	4972      	ldr	r1, [pc, #456]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0320 	and.w	r3, r3, #32
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00a      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e48:	4b6d      	ldr	r3, [pc, #436]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e56:	496a      	ldr	r1, [pc, #424]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00a      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e6a:	4b65      	ldr	r3, [pc, #404]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e78:	4961      	ldr	r1, [pc, #388]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00a      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e8c:	4b5c      	ldr	r3, [pc, #368]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e9a:	4959      	ldr	r1, [pc, #356]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004eae:	4b54      	ldr	r3, [pc, #336]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ebc:	4950      	ldr	r1, [pc, #320]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00a      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ed0:	4b4b      	ldr	r3, [pc, #300]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ede:	4948      	ldr	r1, [pc, #288]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ef2:	4b43      	ldr	r3, [pc, #268]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f00:	493f      	ldr	r1, [pc, #252]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d028      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f14:	4b3a      	ldr	r3, [pc, #232]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f22:	4937      	ldr	r1, [pc, #220]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f32:	d106      	bne.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f34:	4b32      	ldr	r3, [pc, #200]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	4a31      	ldr	r2, [pc, #196]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f3e:	60d3      	str	r3, [r2, #12]
 8004f40:	e011      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f4a:	d10c      	bne.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	3304      	adds	r3, #4
 8004f50:	2101      	movs	r1, #1
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 f8c8 	bl	80050e8 <RCCEx_PLLSAI1_Config>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004f5c:	7cfb      	ldrb	r3, [r7, #19]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004f62:	7cfb      	ldrb	r3, [r7, #19]
 8004f64:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d028      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f72:	4b23      	ldr	r3, [pc, #140]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f78:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f80:	491f      	ldr	r1, [pc, #124]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f90:	d106      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f92:	4b1b      	ldr	r3, [pc, #108]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	4a1a      	ldr	r2, [pc, #104]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f9c:	60d3      	str	r3, [r2, #12]
 8004f9e:	e011      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fa8:	d10c      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	3304      	adds	r3, #4
 8004fae:	2101      	movs	r1, #1
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 f899 	bl	80050e8 <RCCEx_PLLSAI1_Config>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fba:	7cfb      	ldrb	r3, [r7, #19]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004fc0:	7cfb      	ldrb	r3, [r7, #19]
 8004fc2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d02b      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fd0:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fde:	4908      	ldr	r1, [pc, #32]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fee:	d109      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ff0:	4b03      	ldr	r3, [pc, #12]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	4a02      	ldr	r2, [pc, #8]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ffa:	60d3      	str	r3, [r2, #12]
 8004ffc:	e014      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004ffe:	bf00      	nop
 8005000:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005008:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800500c:	d10c      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3304      	adds	r3, #4
 8005012:	2101      	movs	r1, #1
 8005014:	4618      	mov	r0, r3
 8005016:	f000 f867 	bl	80050e8 <RCCEx_PLLSAI1_Config>
 800501a:	4603      	mov	r3, r0
 800501c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800501e:	7cfb      	ldrb	r3, [r7, #19]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d001      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005024:	7cfb      	ldrb	r3, [r7, #19]
 8005026:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d02f      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005034:	4b2b      	ldr	r3, [pc, #172]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005042:	4928      	ldr	r1, [pc, #160]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005044:	4313      	orrs	r3, r2
 8005046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800504e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005052:	d10d      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3304      	adds	r3, #4
 8005058:	2102      	movs	r1, #2
 800505a:	4618      	mov	r0, r3
 800505c:	f000 f844 	bl	80050e8 <RCCEx_PLLSAI1_Config>
 8005060:	4603      	mov	r3, r0
 8005062:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005064:	7cfb      	ldrb	r3, [r7, #19]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d014      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800506a:	7cfb      	ldrb	r3, [r7, #19]
 800506c:	74bb      	strb	r3, [r7, #18]
 800506e:	e011      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005074:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005078:	d10c      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3320      	adds	r3, #32
 800507e:	2102      	movs	r1, #2
 8005080:	4618      	mov	r0, r3
 8005082:	f000 f925 	bl	80052d0 <RCCEx_PLLSAI2_Config>
 8005086:	4603      	mov	r3, r0
 8005088:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800508a:	7cfb      	ldrb	r3, [r7, #19]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005090:	7cfb      	ldrb	r3, [r7, #19]
 8005092:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00a      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80050a0:	4b10      	ldr	r3, [pc, #64]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050ae:	490d      	ldr	r1, [pc, #52]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00b      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050c2:	4b08      	ldr	r3, [pc, #32]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050d2:	4904      	ldr	r1, [pc, #16]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80050da:	7cbb      	ldrb	r3, [r7, #18]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	40021000 	.word	0x40021000

080050e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80050f6:	4b75      	ldr	r3, [pc, #468]	; (80052cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d018      	beq.n	8005134 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005102:	4b72      	ldr	r3, [pc, #456]	; (80052cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f003 0203 	and.w	r2, r3, #3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	429a      	cmp	r2, r3
 8005110:	d10d      	bne.n	800512e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
       ||
 8005116:	2b00      	cmp	r3, #0
 8005118:	d009      	beq.n	800512e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800511a:	4b6c      	ldr	r3, [pc, #432]	; (80052cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	091b      	lsrs	r3, r3, #4
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	1c5a      	adds	r2, r3, #1
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
       ||
 800512a:	429a      	cmp	r2, r3
 800512c:	d047      	beq.n	80051be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	73fb      	strb	r3, [r7, #15]
 8005132:	e044      	b.n	80051be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b03      	cmp	r3, #3
 800513a:	d018      	beq.n	800516e <RCCEx_PLLSAI1_Config+0x86>
 800513c:	2b03      	cmp	r3, #3
 800513e:	d825      	bhi.n	800518c <RCCEx_PLLSAI1_Config+0xa4>
 8005140:	2b01      	cmp	r3, #1
 8005142:	d002      	beq.n	800514a <RCCEx_PLLSAI1_Config+0x62>
 8005144:	2b02      	cmp	r3, #2
 8005146:	d009      	beq.n	800515c <RCCEx_PLLSAI1_Config+0x74>
 8005148:	e020      	b.n	800518c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800514a:	4b60      	ldr	r3, [pc, #384]	; (80052cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d11d      	bne.n	8005192 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800515a:	e01a      	b.n	8005192 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800515c:	4b5b      	ldr	r3, [pc, #364]	; (80052cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005164:	2b00      	cmp	r3, #0
 8005166:	d116      	bne.n	8005196 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800516c:	e013      	b.n	8005196 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800516e:	4b57      	ldr	r3, [pc, #348]	; (80052cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10f      	bne.n	800519a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800517a:	4b54      	ldr	r3, [pc, #336]	; (80052cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d109      	bne.n	800519a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800518a:	e006      	b.n	800519a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	73fb      	strb	r3, [r7, #15]
      break;
 8005190:	e004      	b.n	800519c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005192:	bf00      	nop
 8005194:	e002      	b.n	800519c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005196:	bf00      	nop
 8005198:	e000      	b.n	800519c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800519a:	bf00      	nop
    }

    if(status == HAL_OK)
 800519c:	7bfb      	ldrb	r3, [r7, #15]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10d      	bne.n	80051be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051a2:	4b4a      	ldr	r3, [pc, #296]	; (80052cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6819      	ldr	r1, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	430b      	orrs	r3, r1
 80051b8:	4944      	ldr	r1, [pc, #272]	; (80052cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051be:	7bfb      	ldrb	r3, [r7, #15]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d17d      	bne.n	80052c0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80051c4:	4b41      	ldr	r3, [pc, #260]	; (80052cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a40      	ldr	r2, [pc, #256]	; (80052cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80051ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051d0:	f7fc fed4 	bl	8001f7c <HAL_GetTick>
 80051d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051d6:	e009      	b.n	80051ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051d8:	f7fc fed0 	bl	8001f7c <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d902      	bls.n	80051ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	73fb      	strb	r3, [r7, #15]
        break;
 80051ea:	e005      	b.n	80051f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051ec:	4b37      	ldr	r3, [pc, #220]	; (80052cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1ef      	bne.n	80051d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d160      	bne.n	80052c0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d111      	bne.n	8005228 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005204:	4b31      	ldr	r3, [pc, #196]	; (80052cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800520c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	6892      	ldr	r2, [r2, #8]
 8005214:	0211      	lsls	r1, r2, #8
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	68d2      	ldr	r2, [r2, #12]
 800521a:	0912      	lsrs	r2, r2, #4
 800521c:	0452      	lsls	r2, r2, #17
 800521e:	430a      	orrs	r2, r1
 8005220:	492a      	ldr	r1, [pc, #168]	; (80052cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005222:	4313      	orrs	r3, r2
 8005224:	610b      	str	r3, [r1, #16]
 8005226:	e027      	b.n	8005278 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d112      	bne.n	8005254 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800522e:	4b27      	ldr	r3, [pc, #156]	; (80052cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005236:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6892      	ldr	r2, [r2, #8]
 800523e:	0211      	lsls	r1, r2, #8
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6912      	ldr	r2, [r2, #16]
 8005244:	0852      	lsrs	r2, r2, #1
 8005246:	3a01      	subs	r2, #1
 8005248:	0552      	lsls	r2, r2, #21
 800524a:	430a      	orrs	r2, r1
 800524c:	491f      	ldr	r1, [pc, #124]	; (80052cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800524e:	4313      	orrs	r3, r2
 8005250:	610b      	str	r3, [r1, #16]
 8005252:	e011      	b.n	8005278 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005254:	4b1d      	ldr	r3, [pc, #116]	; (80052cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800525c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6892      	ldr	r2, [r2, #8]
 8005264:	0211      	lsls	r1, r2, #8
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	6952      	ldr	r2, [r2, #20]
 800526a:	0852      	lsrs	r2, r2, #1
 800526c:	3a01      	subs	r2, #1
 800526e:	0652      	lsls	r2, r2, #25
 8005270:	430a      	orrs	r2, r1
 8005272:	4916      	ldr	r1, [pc, #88]	; (80052cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005274:	4313      	orrs	r3, r2
 8005276:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005278:	4b14      	ldr	r3, [pc, #80]	; (80052cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a13      	ldr	r2, [pc, #76]	; (80052cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800527e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005282:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005284:	f7fc fe7a 	bl	8001f7c <HAL_GetTick>
 8005288:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800528a:	e009      	b.n	80052a0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800528c:	f7fc fe76 	bl	8001f7c <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d902      	bls.n	80052a0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	73fb      	strb	r3, [r7, #15]
          break;
 800529e:	e005      	b.n	80052ac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052a0:	4b0a      	ldr	r3, [pc, #40]	; (80052cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0ef      	beq.n	800528c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d106      	bne.n	80052c0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80052b2:	4b06      	ldr	r3, [pc, #24]	; (80052cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80052b4:	691a      	ldr	r2, [r3, #16]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	4904      	ldr	r1, [pc, #16]	; (80052cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80052c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	40021000 	.word	0x40021000

080052d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052de:	4b6a      	ldr	r3, [pc, #424]	; (8005488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d018      	beq.n	800531c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80052ea:	4b67      	ldr	r3, [pc, #412]	; (8005488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f003 0203 	and.w	r2, r3, #3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d10d      	bne.n	8005316 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
       ||
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d009      	beq.n	8005316 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005302:	4b61      	ldr	r3, [pc, #388]	; (8005488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	091b      	lsrs	r3, r3, #4
 8005308:	f003 0307 	and.w	r3, r3, #7
 800530c:	1c5a      	adds	r2, r3, #1
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
       ||
 8005312:	429a      	cmp	r2, r3
 8005314:	d047      	beq.n	80053a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	73fb      	strb	r3, [r7, #15]
 800531a:	e044      	b.n	80053a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b03      	cmp	r3, #3
 8005322:	d018      	beq.n	8005356 <RCCEx_PLLSAI2_Config+0x86>
 8005324:	2b03      	cmp	r3, #3
 8005326:	d825      	bhi.n	8005374 <RCCEx_PLLSAI2_Config+0xa4>
 8005328:	2b01      	cmp	r3, #1
 800532a:	d002      	beq.n	8005332 <RCCEx_PLLSAI2_Config+0x62>
 800532c:	2b02      	cmp	r3, #2
 800532e:	d009      	beq.n	8005344 <RCCEx_PLLSAI2_Config+0x74>
 8005330:	e020      	b.n	8005374 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005332:	4b55      	ldr	r3, [pc, #340]	; (8005488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d11d      	bne.n	800537a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005342:	e01a      	b.n	800537a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005344:	4b50      	ldr	r3, [pc, #320]	; (8005488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800534c:	2b00      	cmp	r3, #0
 800534e:	d116      	bne.n	800537e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005354:	e013      	b.n	800537e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005356:	4b4c      	ldr	r3, [pc, #304]	; (8005488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10f      	bne.n	8005382 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005362:	4b49      	ldr	r3, [pc, #292]	; (8005488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d109      	bne.n	8005382 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005372:	e006      	b.n	8005382 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	73fb      	strb	r3, [r7, #15]
      break;
 8005378:	e004      	b.n	8005384 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800537a:	bf00      	nop
 800537c:	e002      	b.n	8005384 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800537e:	bf00      	nop
 8005380:	e000      	b.n	8005384 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005382:	bf00      	nop
    }

    if(status == HAL_OK)
 8005384:	7bfb      	ldrb	r3, [r7, #15]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10d      	bne.n	80053a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800538a:	4b3f      	ldr	r3, [pc, #252]	; (8005488 <RCCEx_PLLSAI2_Config+0x1b8>)
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6819      	ldr	r1, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	3b01      	subs	r3, #1
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	430b      	orrs	r3, r1
 80053a0:	4939      	ldr	r1, [pc, #228]	; (8005488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053a6:	7bfb      	ldrb	r3, [r7, #15]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d167      	bne.n	800547c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80053ac:	4b36      	ldr	r3, [pc, #216]	; (8005488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a35      	ldr	r2, [pc, #212]	; (8005488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053b8:	f7fc fde0 	bl	8001f7c <HAL_GetTick>
 80053bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053be:	e009      	b.n	80053d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80053c0:	f7fc fddc 	bl	8001f7c <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d902      	bls.n	80053d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	73fb      	strb	r3, [r7, #15]
        break;
 80053d2:	e005      	b.n	80053e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053d4:	4b2c      	ldr	r3, [pc, #176]	; (8005488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1ef      	bne.n	80053c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d14a      	bne.n	800547c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d111      	bne.n	8005410 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80053ec:	4b26      	ldr	r3, [pc, #152]	; (8005488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80053f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	6892      	ldr	r2, [r2, #8]
 80053fc:	0211      	lsls	r1, r2, #8
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	68d2      	ldr	r2, [r2, #12]
 8005402:	0912      	lsrs	r2, r2, #4
 8005404:	0452      	lsls	r2, r2, #17
 8005406:	430a      	orrs	r2, r1
 8005408:	491f      	ldr	r1, [pc, #124]	; (8005488 <RCCEx_PLLSAI2_Config+0x1b8>)
 800540a:	4313      	orrs	r3, r2
 800540c:	614b      	str	r3, [r1, #20]
 800540e:	e011      	b.n	8005434 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005410:	4b1d      	ldr	r3, [pc, #116]	; (8005488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005418:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	6892      	ldr	r2, [r2, #8]
 8005420:	0211      	lsls	r1, r2, #8
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6912      	ldr	r2, [r2, #16]
 8005426:	0852      	lsrs	r2, r2, #1
 8005428:	3a01      	subs	r2, #1
 800542a:	0652      	lsls	r2, r2, #25
 800542c:	430a      	orrs	r2, r1
 800542e:	4916      	ldr	r1, [pc, #88]	; (8005488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005430:	4313      	orrs	r3, r2
 8005432:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005434:	4b14      	ldr	r3, [pc, #80]	; (8005488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a13      	ldr	r2, [pc, #76]	; (8005488 <RCCEx_PLLSAI2_Config+0x1b8>)
 800543a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800543e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005440:	f7fc fd9c 	bl	8001f7c <HAL_GetTick>
 8005444:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005446:	e009      	b.n	800545c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005448:	f7fc fd98 	bl	8001f7c <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d902      	bls.n	800545c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	73fb      	strb	r3, [r7, #15]
          break;
 800545a:	e005      	b.n	8005468 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800545c:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <RCCEx_PLLSAI2_Config+0x1b8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d0ef      	beq.n	8005448 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005468:	7bfb      	ldrb	r3, [r7, #15]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d106      	bne.n	800547c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800546e:	4b06      	ldr	r3, [pc, #24]	; (8005488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005470:	695a      	ldr	r2, [r3, #20]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	4904      	ldr	r1, [pc, #16]	; (8005488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005478:	4313      	orrs	r3, r2
 800547a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800547c:	7bfb      	ldrb	r3, [r7, #15]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	40021000 	.word	0x40021000

0800548c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e049      	b.n	8005532 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d106      	bne.n	80054b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7fc fbaa 	bl	8001c0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3304      	adds	r3, #4
 80054c8:	4619      	mov	r1, r3
 80054ca:	4610      	mov	r0, r2
 80054cc:	f000 ff72 	bl	80063b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b01      	cmp	r3, #1
 800554e:	d001      	beq.n	8005554 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e04f      	b.n	80055f4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0201 	orr.w	r2, r2, #1
 800556a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a23      	ldr	r2, [pc, #140]	; (8005600 <HAL_TIM_Base_Start_IT+0xc4>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d01d      	beq.n	80055b2 <HAL_TIM_Base_Start_IT+0x76>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800557e:	d018      	beq.n	80055b2 <HAL_TIM_Base_Start_IT+0x76>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a1f      	ldr	r2, [pc, #124]	; (8005604 <HAL_TIM_Base_Start_IT+0xc8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d013      	beq.n	80055b2 <HAL_TIM_Base_Start_IT+0x76>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a1e      	ldr	r2, [pc, #120]	; (8005608 <HAL_TIM_Base_Start_IT+0xcc>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d00e      	beq.n	80055b2 <HAL_TIM_Base_Start_IT+0x76>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a1c      	ldr	r2, [pc, #112]	; (800560c <HAL_TIM_Base_Start_IT+0xd0>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d009      	beq.n	80055b2 <HAL_TIM_Base_Start_IT+0x76>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a1b      	ldr	r2, [pc, #108]	; (8005610 <HAL_TIM_Base_Start_IT+0xd4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d004      	beq.n	80055b2 <HAL_TIM_Base_Start_IT+0x76>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a19      	ldr	r2, [pc, #100]	; (8005614 <HAL_TIM_Base_Start_IT+0xd8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d115      	bne.n	80055de <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	4b17      	ldr	r3, [pc, #92]	; (8005618 <HAL_TIM_Base_Start_IT+0xdc>)
 80055ba:	4013      	ands	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2b06      	cmp	r3, #6
 80055c2:	d015      	beq.n	80055f0 <HAL_TIM_Base_Start_IT+0xb4>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ca:	d011      	beq.n	80055f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0201 	orr.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055dc:	e008      	b.n	80055f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f042 0201 	orr.w	r2, r2, #1
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	e000      	b.n	80055f2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	40012c00 	.word	0x40012c00
 8005604:	40000400 	.word	0x40000400
 8005608:	40000800 	.word	0x40000800
 800560c:	40000c00 	.word	0x40000c00
 8005610:	40013400 	.word	0x40013400
 8005614:	40014000 	.word	0x40014000
 8005618:	00010007 	.word	0x00010007

0800561c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e049      	b.n	80056c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f841 	bl	80056ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3304      	adds	r3, #4
 8005658:	4619      	mov	r1, r3
 800565a:	4610      	mov	r0, r2
 800565c:	f000 feaa 	bl	80063b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
	...

080056e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d109      	bne.n	8005704 <HAL_TIM_PWM_Start+0x24>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	bf14      	ite	ne
 80056fc:	2301      	movne	r3, #1
 80056fe:	2300      	moveq	r3, #0
 8005700:	b2db      	uxtb	r3, r3
 8005702:	e03c      	b.n	800577e <HAL_TIM_PWM_Start+0x9e>
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	2b04      	cmp	r3, #4
 8005708:	d109      	bne.n	800571e <HAL_TIM_PWM_Start+0x3e>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b01      	cmp	r3, #1
 8005714:	bf14      	ite	ne
 8005716:	2301      	movne	r3, #1
 8005718:	2300      	moveq	r3, #0
 800571a:	b2db      	uxtb	r3, r3
 800571c:	e02f      	b.n	800577e <HAL_TIM_PWM_Start+0x9e>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b08      	cmp	r3, #8
 8005722:	d109      	bne.n	8005738 <HAL_TIM_PWM_Start+0x58>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b01      	cmp	r3, #1
 800572e:	bf14      	ite	ne
 8005730:	2301      	movne	r3, #1
 8005732:	2300      	moveq	r3, #0
 8005734:	b2db      	uxtb	r3, r3
 8005736:	e022      	b.n	800577e <HAL_TIM_PWM_Start+0x9e>
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	2b0c      	cmp	r3, #12
 800573c:	d109      	bne.n	8005752 <HAL_TIM_PWM_Start+0x72>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b01      	cmp	r3, #1
 8005748:	bf14      	ite	ne
 800574a:	2301      	movne	r3, #1
 800574c:	2300      	moveq	r3, #0
 800574e:	b2db      	uxtb	r3, r3
 8005750:	e015      	b.n	800577e <HAL_TIM_PWM_Start+0x9e>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b10      	cmp	r3, #16
 8005756:	d109      	bne.n	800576c <HAL_TIM_PWM_Start+0x8c>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b01      	cmp	r3, #1
 8005762:	bf14      	ite	ne
 8005764:	2301      	movne	r3, #1
 8005766:	2300      	moveq	r3, #0
 8005768:	b2db      	uxtb	r3, r3
 800576a:	e008      	b.n	800577e <HAL_TIM_PWM_Start+0x9e>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b01      	cmp	r3, #1
 8005776:	bf14      	ite	ne
 8005778:	2301      	movne	r3, #1
 800577a:	2300      	moveq	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e09c      	b.n	80058c0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d104      	bne.n	8005796 <HAL_TIM_PWM_Start+0xb6>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005794:	e023      	b.n	80057de <HAL_TIM_PWM_Start+0xfe>
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b04      	cmp	r3, #4
 800579a:	d104      	bne.n	80057a6 <HAL_TIM_PWM_Start+0xc6>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057a4:	e01b      	b.n	80057de <HAL_TIM_PWM_Start+0xfe>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d104      	bne.n	80057b6 <HAL_TIM_PWM_Start+0xd6>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057b4:	e013      	b.n	80057de <HAL_TIM_PWM_Start+0xfe>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b0c      	cmp	r3, #12
 80057ba:	d104      	bne.n	80057c6 <HAL_TIM_PWM_Start+0xe6>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057c4:	e00b      	b.n	80057de <HAL_TIM_PWM_Start+0xfe>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b10      	cmp	r3, #16
 80057ca:	d104      	bne.n	80057d6 <HAL_TIM_PWM_Start+0xf6>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057d4:	e003      	b.n	80057de <HAL_TIM_PWM_Start+0xfe>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2202      	movs	r2, #2
 80057da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2201      	movs	r2, #1
 80057e4:	6839      	ldr	r1, [r7, #0]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f001 fb12 	bl	8006e10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a35      	ldr	r2, [pc, #212]	; (80058c8 <HAL_TIM_PWM_Start+0x1e8>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d013      	beq.n	800581e <HAL_TIM_PWM_Start+0x13e>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a34      	ldr	r2, [pc, #208]	; (80058cc <HAL_TIM_PWM_Start+0x1ec>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d00e      	beq.n	800581e <HAL_TIM_PWM_Start+0x13e>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a32      	ldr	r2, [pc, #200]	; (80058d0 <HAL_TIM_PWM_Start+0x1f0>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d009      	beq.n	800581e <HAL_TIM_PWM_Start+0x13e>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a31      	ldr	r2, [pc, #196]	; (80058d4 <HAL_TIM_PWM_Start+0x1f4>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d004      	beq.n	800581e <HAL_TIM_PWM_Start+0x13e>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a2f      	ldr	r2, [pc, #188]	; (80058d8 <HAL_TIM_PWM_Start+0x1f8>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d101      	bne.n	8005822 <HAL_TIM_PWM_Start+0x142>
 800581e:	2301      	movs	r3, #1
 8005820:	e000      	b.n	8005824 <HAL_TIM_PWM_Start+0x144>
 8005822:	2300      	movs	r3, #0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d007      	beq.n	8005838 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005836:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a22      	ldr	r2, [pc, #136]	; (80058c8 <HAL_TIM_PWM_Start+0x1e8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d01d      	beq.n	800587e <HAL_TIM_PWM_Start+0x19e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800584a:	d018      	beq.n	800587e <HAL_TIM_PWM_Start+0x19e>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a22      	ldr	r2, [pc, #136]	; (80058dc <HAL_TIM_PWM_Start+0x1fc>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d013      	beq.n	800587e <HAL_TIM_PWM_Start+0x19e>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a21      	ldr	r2, [pc, #132]	; (80058e0 <HAL_TIM_PWM_Start+0x200>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00e      	beq.n	800587e <HAL_TIM_PWM_Start+0x19e>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a1f      	ldr	r2, [pc, #124]	; (80058e4 <HAL_TIM_PWM_Start+0x204>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d009      	beq.n	800587e <HAL_TIM_PWM_Start+0x19e>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a17      	ldr	r2, [pc, #92]	; (80058cc <HAL_TIM_PWM_Start+0x1ec>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d004      	beq.n	800587e <HAL_TIM_PWM_Start+0x19e>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a15      	ldr	r2, [pc, #84]	; (80058d0 <HAL_TIM_PWM_Start+0x1f0>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d115      	bne.n	80058aa <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	4b18      	ldr	r3, [pc, #96]	; (80058e8 <HAL_TIM_PWM_Start+0x208>)
 8005886:	4013      	ands	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b06      	cmp	r3, #6
 800588e:	d015      	beq.n	80058bc <HAL_TIM_PWM_Start+0x1dc>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005896:	d011      	beq.n	80058bc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0201 	orr.w	r2, r2, #1
 80058a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a8:	e008      	b.n	80058bc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f042 0201 	orr.w	r2, r2, #1
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	e000      	b.n	80058be <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	40012c00 	.word	0x40012c00
 80058cc:	40013400 	.word	0x40013400
 80058d0:	40014000 	.word	0x40014000
 80058d4:	40014400 	.word	0x40014400
 80058d8:	40014800 	.word	0x40014800
 80058dc:	40000400 	.word	0x40000400
 80058e0:	40000800 	.word	0x40000800
 80058e4:	40000c00 	.word	0x40000c00
 80058e8:	00010007 	.word	0x00010007

080058ec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e049      	b.n	8005992 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d106      	bne.n	8005918 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f841 	bl	800599a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3304      	adds	r3, #4
 8005928:	4619      	mov	r1, r3
 800592a:	4610      	mov	r0, r2
 800592c:	f000 fd42 	bl	80063b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
	...

080059b0 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d104      	bne.n	80059ca <HAL_TIM_IC_Start+0x1a>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	e023      	b.n	8005a12 <HAL_TIM_IC_Start+0x62>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	d104      	bne.n	80059da <HAL_TIM_IC_Start+0x2a>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	e01b      	b.n	8005a12 <HAL_TIM_IC_Start+0x62>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d104      	bne.n	80059ea <HAL_TIM_IC_Start+0x3a>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	e013      	b.n	8005a12 <HAL_TIM_IC_Start+0x62>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b0c      	cmp	r3, #12
 80059ee:	d104      	bne.n	80059fa <HAL_TIM_IC_Start+0x4a>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	e00b      	b.n	8005a12 <HAL_TIM_IC_Start+0x62>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b10      	cmp	r3, #16
 80059fe:	d104      	bne.n	8005a0a <HAL_TIM_IC_Start+0x5a>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	e003      	b.n	8005a12 <HAL_TIM_IC_Start+0x62>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d104      	bne.n	8005a24 <HAL_TIM_IC_Start+0x74>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	e013      	b.n	8005a4c <HAL_TIM_IC_Start+0x9c>
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2b04      	cmp	r3, #4
 8005a28:	d104      	bne.n	8005a34 <HAL_TIM_IC_Start+0x84>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	e00b      	b.n	8005a4c <HAL_TIM_IC_Start+0x9c>
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2b08      	cmp	r3, #8
 8005a38:	d104      	bne.n	8005a44 <HAL_TIM_IC_Start+0x94>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	e003      	b.n	8005a4c <HAL_TIM_IC_Start+0x9c>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d102      	bne.n	8005a5a <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a54:	7bbb      	ldrb	r3, [r7, #14]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d001      	beq.n	8005a5e <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e092      	b.n	8005b84 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d104      	bne.n	8005a6e <HAL_TIM_IC_Start+0xbe>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a6c:	e023      	b.n	8005ab6 <HAL_TIM_IC_Start+0x106>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	d104      	bne.n	8005a7e <HAL_TIM_IC_Start+0xce>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a7c:	e01b      	b.n	8005ab6 <HAL_TIM_IC_Start+0x106>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d104      	bne.n	8005a8e <HAL_TIM_IC_Start+0xde>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a8c:	e013      	b.n	8005ab6 <HAL_TIM_IC_Start+0x106>
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2b0c      	cmp	r3, #12
 8005a92:	d104      	bne.n	8005a9e <HAL_TIM_IC_Start+0xee>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2202      	movs	r2, #2
 8005a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a9c:	e00b      	b.n	8005ab6 <HAL_TIM_IC_Start+0x106>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b10      	cmp	r3, #16
 8005aa2:	d104      	bne.n	8005aae <HAL_TIM_IC_Start+0xfe>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005aac:	e003      	b.n	8005ab6 <HAL_TIM_IC_Start+0x106>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d104      	bne.n	8005ac6 <HAL_TIM_IC_Start+0x116>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ac4:	e013      	b.n	8005aee <HAL_TIM_IC_Start+0x13e>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b04      	cmp	r3, #4
 8005aca:	d104      	bne.n	8005ad6 <HAL_TIM_IC_Start+0x126>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ad4:	e00b      	b.n	8005aee <HAL_TIM_IC_Start+0x13e>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	d104      	bne.n	8005ae6 <HAL_TIM_IC_Start+0x136>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ae4:	e003      	b.n	8005aee <HAL_TIM_IC_Start+0x13e>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2202      	movs	r2, #2
 8005aea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2201      	movs	r2, #1
 8005af4:	6839      	ldr	r1, [r7, #0]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f001 f98a 	bl	8006e10 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a22      	ldr	r2, [pc, #136]	; (8005b8c <HAL_TIM_IC_Start+0x1dc>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d01d      	beq.n	8005b42 <HAL_TIM_IC_Start+0x192>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0e:	d018      	beq.n	8005b42 <HAL_TIM_IC_Start+0x192>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a1e      	ldr	r2, [pc, #120]	; (8005b90 <HAL_TIM_IC_Start+0x1e0>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d013      	beq.n	8005b42 <HAL_TIM_IC_Start+0x192>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a1d      	ldr	r2, [pc, #116]	; (8005b94 <HAL_TIM_IC_Start+0x1e4>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d00e      	beq.n	8005b42 <HAL_TIM_IC_Start+0x192>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a1b      	ldr	r2, [pc, #108]	; (8005b98 <HAL_TIM_IC_Start+0x1e8>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d009      	beq.n	8005b42 <HAL_TIM_IC_Start+0x192>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a1a      	ldr	r2, [pc, #104]	; (8005b9c <HAL_TIM_IC_Start+0x1ec>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d004      	beq.n	8005b42 <HAL_TIM_IC_Start+0x192>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a18      	ldr	r2, [pc, #96]	; (8005ba0 <HAL_TIM_IC_Start+0x1f0>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d115      	bne.n	8005b6e <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	689a      	ldr	r2, [r3, #8]
 8005b48:	4b16      	ldr	r3, [pc, #88]	; (8005ba4 <HAL_TIM_IC_Start+0x1f4>)
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2b06      	cmp	r3, #6
 8005b52:	d015      	beq.n	8005b80 <HAL_TIM_IC_Start+0x1d0>
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b5a:	d011      	beq.n	8005b80 <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0201 	orr.w	r2, r2, #1
 8005b6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b6c:	e008      	b.n	8005b80 <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f042 0201 	orr.w	r2, r2, #1
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	e000      	b.n	8005b82 <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	40012c00 	.word	0x40012c00
 8005b90:	40000400 	.word	0x40000400
 8005b94:	40000800 	.word	0x40000800
 8005b98:	40000c00 	.word	0x40000c00
 8005b9c:	40013400 	.word	0x40013400
 8005ba0:	40014000 	.word	0x40014000
 8005ba4:	00010007 	.word	0x00010007

08005ba8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d122      	bne.n	8005c04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d11b      	bne.n	8005c04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f06f 0202 	mvn.w	r2, #2
 8005bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	f003 0303 	and.w	r3, r3, #3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fbc4 	bl	8006378 <HAL_TIM_IC_CaptureCallback>
 8005bf0:	e005      	b.n	8005bfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fbb6 	bl	8006364 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 fbc7 	bl	800638c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	f003 0304 	and.w	r3, r3, #4
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	d122      	bne.n	8005c58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f003 0304 	and.w	r3, r3, #4
 8005c1c:	2b04      	cmp	r3, #4
 8005c1e:	d11b      	bne.n	8005c58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f06f 0204 	mvn.w	r2, #4
 8005c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fb9a 	bl	8006378 <HAL_TIM_IC_CaptureCallback>
 8005c44:	e005      	b.n	8005c52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fb8c 	bl	8006364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 fb9d 	bl	800638c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	f003 0308 	and.w	r3, r3, #8
 8005c62:	2b08      	cmp	r3, #8
 8005c64:	d122      	bne.n	8005cac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f003 0308 	and.w	r3, r3, #8
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d11b      	bne.n	8005cac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f06f 0208 	mvn.w	r2, #8
 8005c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2204      	movs	r2, #4
 8005c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	f003 0303 	and.w	r3, r3, #3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fb70 	bl	8006378 <HAL_TIM_IC_CaptureCallback>
 8005c98:	e005      	b.n	8005ca6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fb62 	bl	8006364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fb73 	bl	800638c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	f003 0310 	and.w	r3, r3, #16
 8005cb6:	2b10      	cmp	r3, #16
 8005cb8:	d122      	bne.n	8005d00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f003 0310 	and.w	r3, r3, #16
 8005cc4:	2b10      	cmp	r3, #16
 8005cc6:	d11b      	bne.n	8005d00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f06f 0210 	mvn.w	r2, #16
 8005cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2208      	movs	r2, #8
 8005cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fb46 	bl	8006378 <HAL_TIM_IC_CaptureCallback>
 8005cec:	e005      	b.n	8005cfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fb38 	bl	8006364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fb49 	bl	800638c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d10e      	bne.n	8005d2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d107      	bne.n	8005d2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f06f 0201 	mvn.w	r2, #1
 8005d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7fb fb16 	bl	8001358 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d36:	2b80      	cmp	r3, #128	; 0x80
 8005d38:	d10e      	bne.n	8005d58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d44:	2b80      	cmp	r3, #128	; 0x80
 8005d46:	d107      	bne.n	8005d58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f001 f914 	bl	8006f80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d66:	d10e      	bne.n	8005d86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d72:	2b80      	cmp	r3, #128	; 0x80
 8005d74:	d107      	bne.n	8005d86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f001 f907 	bl	8006f94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d90:	2b40      	cmp	r3, #64	; 0x40
 8005d92:	d10e      	bne.n	8005db2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9e:	2b40      	cmp	r3, #64	; 0x40
 8005da0:	d107      	bne.n	8005db2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 faf7 	bl	80063a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	f003 0320 	and.w	r3, r3, #32
 8005dbc:	2b20      	cmp	r3, #32
 8005dbe:	d10e      	bne.n	8005dde <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f003 0320 	and.w	r3, r3, #32
 8005dca:	2b20      	cmp	r3, #32
 8005dcc:	d107      	bne.n	8005dde <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f06f 0220 	mvn.w	r2, #32
 8005dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f001 f8c7 	bl	8006f6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dde:	bf00      	nop
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b086      	sub	sp, #24
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	60f8      	str	r0, [r7, #12]
 8005dee:	60b9      	str	r1, [r7, #8]
 8005df0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005df2:	2300      	movs	r3, #0
 8005df4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d101      	bne.n	8005e04 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005e00:	2302      	movs	r3, #2
 8005e02:	e088      	b.n	8005f16 <HAL_TIM_IC_ConfigChannel+0x130>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d11b      	bne.n	8005e4a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6818      	ldr	r0, [r3, #0]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	6819      	ldr	r1, [r3, #0]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f000 fe37 	bl	8006a94 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	699a      	ldr	r2, [r3, #24]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 020c 	bic.w	r2, r2, #12
 8005e34:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6999      	ldr	r1, [r3, #24]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	619a      	str	r2, [r3, #24]
 8005e48:	e060      	b.n	8005f0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b04      	cmp	r3, #4
 8005e4e:	d11c      	bne.n	8005e8a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6818      	ldr	r0, [r3, #0]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	6819      	ldr	r1, [r3, #0]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f000 feb5 	bl	8006bce <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	699a      	ldr	r2, [r3, #24]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005e72:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6999      	ldr	r1, [r3, #24]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	021a      	lsls	r2, r3, #8
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	619a      	str	r2, [r3, #24]
 8005e88:	e040      	b.n	8005f0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d11b      	bne.n	8005ec8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6818      	ldr	r0, [r3, #0]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	6819      	ldr	r1, [r3, #0]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	f000 ff02 	bl	8006ca8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	69da      	ldr	r2, [r3, #28]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 020c 	bic.w	r2, r2, #12
 8005eb2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	69d9      	ldr	r1, [r3, #28]
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	689a      	ldr	r2, [r3, #8]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	61da      	str	r2, [r3, #28]
 8005ec6:	e021      	b.n	8005f0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b0c      	cmp	r3, #12
 8005ecc:	d11c      	bne.n	8005f08 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6818      	ldr	r0, [r3, #0]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	6819      	ldr	r1, [r3, #0]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f000 ff1f 	bl	8006d20 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69da      	ldr	r2, [r3, #28]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ef0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69d9      	ldr	r1, [r3, #28]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	021a      	lsls	r2, r3, #8
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	61da      	str	r2, [r3, #28]
 8005f06:	e001      	b.n	8005f0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
	...

08005f20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d101      	bne.n	8005f3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	e0ff      	b.n	800613e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b14      	cmp	r3, #20
 8005f4a:	f200 80f0 	bhi.w	800612e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f4e:	a201      	add	r2, pc, #4	; (adr r2, 8005f54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f54:	08005fa9 	.word	0x08005fa9
 8005f58:	0800612f 	.word	0x0800612f
 8005f5c:	0800612f 	.word	0x0800612f
 8005f60:	0800612f 	.word	0x0800612f
 8005f64:	08005fe9 	.word	0x08005fe9
 8005f68:	0800612f 	.word	0x0800612f
 8005f6c:	0800612f 	.word	0x0800612f
 8005f70:	0800612f 	.word	0x0800612f
 8005f74:	0800602b 	.word	0x0800602b
 8005f78:	0800612f 	.word	0x0800612f
 8005f7c:	0800612f 	.word	0x0800612f
 8005f80:	0800612f 	.word	0x0800612f
 8005f84:	0800606b 	.word	0x0800606b
 8005f88:	0800612f 	.word	0x0800612f
 8005f8c:	0800612f 	.word	0x0800612f
 8005f90:	0800612f 	.word	0x0800612f
 8005f94:	080060ad 	.word	0x080060ad
 8005f98:	0800612f 	.word	0x0800612f
 8005f9c:	0800612f 	.word	0x0800612f
 8005fa0:	0800612f 	.word	0x0800612f
 8005fa4:	080060ed 	.word	0x080060ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68b9      	ldr	r1, [r7, #8]
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f000 fa9a 	bl	80064e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	699a      	ldr	r2, [r3, #24]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f042 0208 	orr.w	r2, r2, #8
 8005fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	699a      	ldr	r2, [r3, #24]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 0204 	bic.w	r2, r2, #4
 8005fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6999      	ldr	r1, [r3, #24]
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	691a      	ldr	r2, [r3, #16]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	619a      	str	r2, [r3, #24]
      break;
 8005fe6:	e0a5      	b.n	8006134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68b9      	ldr	r1, [r7, #8]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 fb0a 	bl	8006608 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	699a      	ldr	r2, [r3, #24]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006002:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699a      	ldr	r2, [r3, #24]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6999      	ldr	r1, [r3, #24]
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	021a      	lsls	r2, r3, #8
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	430a      	orrs	r2, r1
 8006026:	619a      	str	r2, [r3, #24]
      break;
 8006028:	e084      	b.n	8006134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68b9      	ldr	r1, [r7, #8]
 8006030:	4618      	mov	r0, r3
 8006032:	f000 fb73 	bl	800671c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	69da      	ldr	r2, [r3, #28]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f042 0208 	orr.w	r2, r2, #8
 8006044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69da      	ldr	r2, [r3, #28]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0204 	bic.w	r2, r2, #4
 8006054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	69d9      	ldr	r1, [r3, #28]
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	691a      	ldr	r2, [r3, #16]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	430a      	orrs	r2, r1
 8006066:	61da      	str	r2, [r3, #28]
      break;
 8006068:	e064      	b.n	8006134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68b9      	ldr	r1, [r7, #8]
 8006070:	4618      	mov	r0, r3
 8006072:	f000 fbdb 	bl	800682c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69da      	ldr	r2, [r3, #28]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	69da      	ldr	r2, [r3, #28]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	69d9      	ldr	r1, [r3, #28]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	021a      	lsls	r2, r3, #8
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	61da      	str	r2, [r3, #28]
      break;
 80060aa:	e043      	b.n	8006134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68b9      	ldr	r1, [r7, #8]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 fc24 	bl	8006900 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0208 	orr.w	r2, r2, #8
 80060c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 0204 	bic.w	r2, r2, #4
 80060d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	691a      	ldr	r2, [r3, #16]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80060ea:	e023      	b.n	8006134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68b9      	ldr	r1, [r7, #8]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 fc68 	bl	80069c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006106:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006116:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	021a      	lsls	r2, r3, #8
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	430a      	orrs	r2, r1
 800612a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800612c:	e002      	b.n	8006134 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	75fb      	strb	r3, [r7, #23]
      break;
 8006132:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800613c:	7dfb      	ldrb	r3, [r7, #23]
}
 800613e:	4618      	mov	r0, r3
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop

08006148 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006152:	2300      	movs	r3, #0
 8006154:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800615c:	2b01      	cmp	r3, #1
 800615e:	d101      	bne.n	8006164 <HAL_TIM_ConfigClockSource+0x1c>
 8006160:	2302      	movs	r3, #2
 8006162:	e0b6      	b.n	80062d2 <HAL_TIM_ConfigClockSource+0x18a>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006182:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800618e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061a0:	d03e      	beq.n	8006220 <HAL_TIM_ConfigClockSource+0xd8>
 80061a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061a6:	f200 8087 	bhi.w	80062b8 <HAL_TIM_ConfigClockSource+0x170>
 80061aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ae:	f000 8086 	beq.w	80062be <HAL_TIM_ConfigClockSource+0x176>
 80061b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b6:	d87f      	bhi.n	80062b8 <HAL_TIM_ConfigClockSource+0x170>
 80061b8:	2b70      	cmp	r3, #112	; 0x70
 80061ba:	d01a      	beq.n	80061f2 <HAL_TIM_ConfigClockSource+0xaa>
 80061bc:	2b70      	cmp	r3, #112	; 0x70
 80061be:	d87b      	bhi.n	80062b8 <HAL_TIM_ConfigClockSource+0x170>
 80061c0:	2b60      	cmp	r3, #96	; 0x60
 80061c2:	d050      	beq.n	8006266 <HAL_TIM_ConfigClockSource+0x11e>
 80061c4:	2b60      	cmp	r3, #96	; 0x60
 80061c6:	d877      	bhi.n	80062b8 <HAL_TIM_ConfigClockSource+0x170>
 80061c8:	2b50      	cmp	r3, #80	; 0x50
 80061ca:	d03c      	beq.n	8006246 <HAL_TIM_ConfigClockSource+0xfe>
 80061cc:	2b50      	cmp	r3, #80	; 0x50
 80061ce:	d873      	bhi.n	80062b8 <HAL_TIM_ConfigClockSource+0x170>
 80061d0:	2b40      	cmp	r3, #64	; 0x40
 80061d2:	d058      	beq.n	8006286 <HAL_TIM_ConfigClockSource+0x13e>
 80061d4:	2b40      	cmp	r3, #64	; 0x40
 80061d6:	d86f      	bhi.n	80062b8 <HAL_TIM_ConfigClockSource+0x170>
 80061d8:	2b30      	cmp	r3, #48	; 0x30
 80061da:	d064      	beq.n	80062a6 <HAL_TIM_ConfigClockSource+0x15e>
 80061dc:	2b30      	cmp	r3, #48	; 0x30
 80061de:	d86b      	bhi.n	80062b8 <HAL_TIM_ConfigClockSource+0x170>
 80061e0:	2b20      	cmp	r3, #32
 80061e2:	d060      	beq.n	80062a6 <HAL_TIM_ConfigClockSource+0x15e>
 80061e4:	2b20      	cmp	r3, #32
 80061e6:	d867      	bhi.n	80062b8 <HAL_TIM_ConfigClockSource+0x170>
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d05c      	beq.n	80062a6 <HAL_TIM_ConfigClockSource+0x15e>
 80061ec:	2b10      	cmp	r3, #16
 80061ee:	d05a      	beq.n	80062a6 <HAL_TIM_ConfigClockSource+0x15e>
 80061f0:	e062      	b.n	80062b8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6818      	ldr	r0, [r3, #0]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	6899      	ldr	r1, [r3, #8]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f000 fde5 	bl	8006dd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006214:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	609a      	str	r2, [r3, #8]
      break;
 800621e:	e04f      	b.n	80062c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6818      	ldr	r0, [r3, #0]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	6899      	ldr	r1, [r3, #8]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f000 fdce 	bl	8006dd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689a      	ldr	r2, [r3, #8]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006242:	609a      	str	r2, [r3, #8]
      break;
 8006244:	e03c      	b.n	80062c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6818      	ldr	r0, [r3, #0]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	6859      	ldr	r1, [r3, #4]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	461a      	mov	r2, r3
 8006254:	f000 fc8c 	bl	8006b70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2150      	movs	r1, #80	; 0x50
 800625e:	4618      	mov	r0, r3
 8006260:	f000 fd9b 	bl	8006d9a <TIM_ITRx_SetConfig>
      break;
 8006264:	e02c      	b.n	80062c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6818      	ldr	r0, [r3, #0]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	6859      	ldr	r1, [r3, #4]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	461a      	mov	r2, r3
 8006274:	f000 fce8 	bl	8006c48 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2160      	movs	r1, #96	; 0x60
 800627e:	4618      	mov	r0, r3
 8006280:	f000 fd8b 	bl	8006d9a <TIM_ITRx_SetConfig>
      break;
 8006284:	e01c      	b.n	80062c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6818      	ldr	r0, [r3, #0]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	6859      	ldr	r1, [r3, #4]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	461a      	mov	r2, r3
 8006294:	f000 fc6c 	bl	8006b70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2140      	movs	r1, #64	; 0x40
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 fd7b 	bl	8006d9a <TIM_ITRx_SetConfig>
      break;
 80062a4:	e00c      	b.n	80062c0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4619      	mov	r1, r3
 80062b0:	4610      	mov	r0, r2
 80062b2:	f000 fd72 	bl	8006d9a <TIM_ITRx_SetConfig>
      break;
 80062b6:	e003      	b.n	80062c0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	73fb      	strb	r3, [r7, #15]
      break;
 80062bc:	e000      	b.n	80062c0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80062be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
	...

080062dc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	2b0c      	cmp	r3, #12
 80062ee:	d831      	bhi.n	8006354 <HAL_TIM_ReadCapturedValue+0x78>
 80062f0:	a201      	add	r2, pc, #4	; (adr r2, 80062f8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80062f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f6:	bf00      	nop
 80062f8:	0800632d 	.word	0x0800632d
 80062fc:	08006355 	.word	0x08006355
 8006300:	08006355 	.word	0x08006355
 8006304:	08006355 	.word	0x08006355
 8006308:	08006337 	.word	0x08006337
 800630c:	08006355 	.word	0x08006355
 8006310:	08006355 	.word	0x08006355
 8006314:	08006355 	.word	0x08006355
 8006318:	08006341 	.word	0x08006341
 800631c:	08006355 	.word	0x08006355
 8006320:	08006355 	.word	0x08006355
 8006324:	08006355 	.word	0x08006355
 8006328:	0800634b 	.word	0x0800634b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006332:	60fb      	str	r3, [r7, #12]

      break;
 8006334:	e00f      	b.n	8006356 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633c:	60fb      	str	r3, [r7, #12]

      break;
 800633e:	e00a      	b.n	8006356 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006346:	60fb      	str	r3, [r7, #12]

      break;
 8006348:	e005      	b.n	8006356 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006350:	60fb      	str	r3, [r7, #12]

      break;
 8006352:	e000      	b.n	8006356 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006354:	bf00      	nop
  }

  return tmpreg;
 8006356:	68fb      	ldr	r3, [r7, #12]
}
 8006358:	4618      	mov	r0, r3
 800635a:	3714      	adds	r7, #20
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a40      	ldr	r2, [pc, #256]	; (80064c8 <TIM_Base_SetConfig+0x114>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d013      	beq.n	80063f4 <TIM_Base_SetConfig+0x40>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d2:	d00f      	beq.n	80063f4 <TIM_Base_SetConfig+0x40>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a3d      	ldr	r2, [pc, #244]	; (80064cc <TIM_Base_SetConfig+0x118>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d00b      	beq.n	80063f4 <TIM_Base_SetConfig+0x40>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a3c      	ldr	r2, [pc, #240]	; (80064d0 <TIM_Base_SetConfig+0x11c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d007      	beq.n	80063f4 <TIM_Base_SetConfig+0x40>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a3b      	ldr	r2, [pc, #236]	; (80064d4 <TIM_Base_SetConfig+0x120>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d003      	beq.n	80063f4 <TIM_Base_SetConfig+0x40>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a3a      	ldr	r2, [pc, #232]	; (80064d8 <TIM_Base_SetConfig+0x124>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d108      	bne.n	8006406 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a2f      	ldr	r2, [pc, #188]	; (80064c8 <TIM_Base_SetConfig+0x114>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d01f      	beq.n	800644e <TIM_Base_SetConfig+0x9a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006414:	d01b      	beq.n	800644e <TIM_Base_SetConfig+0x9a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a2c      	ldr	r2, [pc, #176]	; (80064cc <TIM_Base_SetConfig+0x118>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d017      	beq.n	800644e <TIM_Base_SetConfig+0x9a>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a2b      	ldr	r2, [pc, #172]	; (80064d0 <TIM_Base_SetConfig+0x11c>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d013      	beq.n	800644e <TIM_Base_SetConfig+0x9a>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a2a      	ldr	r2, [pc, #168]	; (80064d4 <TIM_Base_SetConfig+0x120>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d00f      	beq.n	800644e <TIM_Base_SetConfig+0x9a>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a29      	ldr	r2, [pc, #164]	; (80064d8 <TIM_Base_SetConfig+0x124>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d00b      	beq.n	800644e <TIM_Base_SetConfig+0x9a>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a28      	ldr	r2, [pc, #160]	; (80064dc <TIM_Base_SetConfig+0x128>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d007      	beq.n	800644e <TIM_Base_SetConfig+0x9a>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a27      	ldr	r2, [pc, #156]	; (80064e0 <TIM_Base_SetConfig+0x12c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d003      	beq.n	800644e <TIM_Base_SetConfig+0x9a>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a26      	ldr	r2, [pc, #152]	; (80064e4 <TIM_Base_SetConfig+0x130>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d108      	bne.n	8006460 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	4313      	orrs	r3, r2
 800645e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	4313      	orrs	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a10      	ldr	r2, [pc, #64]	; (80064c8 <TIM_Base_SetConfig+0x114>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d00f      	beq.n	80064ac <TIM_Base_SetConfig+0xf8>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a12      	ldr	r2, [pc, #72]	; (80064d8 <TIM_Base_SetConfig+0x124>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d00b      	beq.n	80064ac <TIM_Base_SetConfig+0xf8>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a11      	ldr	r2, [pc, #68]	; (80064dc <TIM_Base_SetConfig+0x128>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d007      	beq.n	80064ac <TIM_Base_SetConfig+0xf8>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a10      	ldr	r2, [pc, #64]	; (80064e0 <TIM_Base_SetConfig+0x12c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d003      	beq.n	80064ac <TIM_Base_SetConfig+0xf8>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a0f      	ldr	r2, [pc, #60]	; (80064e4 <TIM_Base_SetConfig+0x130>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d103      	bne.n	80064b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	691a      	ldr	r2, [r3, #16]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	615a      	str	r2, [r3, #20]
}
 80064ba:	bf00      	nop
 80064bc:	3714      	adds	r7, #20
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	40012c00 	.word	0x40012c00
 80064cc:	40000400 	.word	0x40000400
 80064d0:	40000800 	.word	0x40000800
 80064d4:	40000c00 	.word	0x40000c00
 80064d8:	40013400 	.word	0x40013400
 80064dc:	40014000 	.word	0x40014000
 80064e0:	40014400 	.word	0x40014400
 80064e4:	40014800 	.word	0x40014800

080064e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b087      	sub	sp, #28
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	f023 0201 	bic.w	r2, r3, #1
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f023 0303 	bic.w	r3, r3, #3
 8006522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	4313      	orrs	r3, r2
 800652c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f023 0302 	bic.w	r3, r3, #2
 8006534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	4313      	orrs	r3, r2
 800653e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a2c      	ldr	r2, [pc, #176]	; (80065f4 <TIM_OC1_SetConfig+0x10c>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d00f      	beq.n	8006568 <TIM_OC1_SetConfig+0x80>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a2b      	ldr	r2, [pc, #172]	; (80065f8 <TIM_OC1_SetConfig+0x110>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d00b      	beq.n	8006568 <TIM_OC1_SetConfig+0x80>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a2a      	ldr	r2, [pc, #168]	; (80065fc <TIM_OC1_SetConfig+0x114>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d007      	beq.n	8006568 <TIM_OC1_SetConfig+0x80>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a29      	ldr	r2, [pc, #164]	; (8006600 <TIM_OC1_SetConfig+0x118>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d003      	beq.n	8006568 <TIM_OC1_SetConfig+0x80>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a28      	ldr	r2, [pc, #160]	; (8006604 <TIM_OC1_SetConfig+0x11c>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d10c      	bne.n	8006582 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f023 0308 	bic.w	r3, r3, #8
 800656e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	4313      	orrs	r3, r2
 8006578:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f023 0304 	bic.w	r3, r3, #4
 8006580:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a1b      	ldr	r2, [pc, #108]	; (80065f4 <TIM_OC1_SetConfig+0x10c>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d00f      	beq.n	80065aa <TIM_OC1_SetConfig+0xc2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a1a      	ldr	r2, [pc, #104]	; (80065f8 <TIM_OC1_SetConfig+0x110>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d00b      	beq.n	80065aa <TIM_OC1_SetConfig+0xc2>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a19      	ldr	r2, [pc, #100]	; (80065fc <TIM_OC1_SetConfig+0x114>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d007      	beq.n	80065aa <TIM_OC1_SetConfig+0xc2>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a18      	ldr	r2, [pc, #96]	; (8006600 <TIM_OC1_SetConfig+0x118>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d003      	beq.n	80065aa <TIM_OC1_SetConfig+0xc2>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a17      	ldr	r2, [pc, #92]	; (8006604 <TIM_OC1_SetConfig+0x11c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d111      	bne.n	80065ce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	621a      	str	r2, [r3, #32]
}
 80065e8:	bf00      	nop
 80065ea:	371c      	adds	r7, #28
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr
 80065f4:	40012c00 	.word	0x40012c00
 80065f8:	40013400 	.word	0x40013400
 80065fc:	40014000 	.word	0x40014000
 8006600:	40014400 	.word	0x40014400
 8006604:	40014800 	.word	0x40014800

08006608 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006608:	b480      	push	{r7}
 800660a:	b087      	sub	sp, #28
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	f023 0210 	bic.w	r2, r3, #16
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800663a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	021b      	lsls	r3, r3, #8
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	4313      	orrs	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f023 0320 	bic.w	r3, r3, #32
 8006656:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	011b      	lsls	r3, r3, #4
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	4313      	orrs	r3, r2
 8006662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a28      	ldr	r2, [pc, #160]	; (8006708 <TIM_OC2_SetConfig+0x100>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d003      	beq.n	8006674 <TIM_OC2_SetConfig+0x6c>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a27      	ldr	r2, [pc, #156]	; (800670c <TIM_OC2_SetConfig+0x104>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d10d      	bne.n	8006690 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800667a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	011b      	lsls	r3, r3, #4
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4313      	orrs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800668e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a1d      	ldr	r2, [pc, #116]	; (8006708 <TIM_OC2_SetConfig+0x100>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d00f      	beq.n	80066b8 <TIM_OC2_SetConfig+0xb0>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a1c      	ldr	r2, [pc, #112]	; (800670c <TIM_OC2_SetConfig+0x104>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d00b      	beq.n	80066b8 <TIM_OC2_SetConfig+0xb0>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a1b      	ldr	r2, [pc, #108]	; (8006710 <TIM_OC2_SetConfig+0x108>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d007      	beq.n	80066b8 <TIM_OC2_SetConfig+0xb0>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a1a      	ldr	r2, [pc, #104]	; (8006714 <TIM_OC2_SetConfig+0x10c>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d003      	beq.n	80066b8 <TIM_OC2_SetConfig+0xb0>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a19      	ldr	r2, [pc, #100]	; (8006718 <TIM_OC2_SetConfig+0x110>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d113      	bne.n	80066e0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	4313      	orrs	r3, r2
 80066de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685a      	ldr	r2, [r3, #4]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	621a      	str	r2, [r3, #32]
}
 80066fa:	bf00      	nop
 80066fc:	371c      	adds	r7, #28
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	40012c00 	.word	0x40012c00
 800670c:	40013400 	.word	0x40013400
 8006710:	40014000 	.word	0x40014000
 8006714:	40014400 	.word	0x40014400
 8006718:	40014800 	.word	0x40014800

0800671c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800674a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f023 0303 	bic.w	r3, r3, #3
 8006756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	4313      	orrs	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	021b      	lsls	r3, r3, #8
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	4313      	orrs	r3, r2
 8006774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a27      	ldr	r2, [pc, #156]	; (8006818 <TIM_OC3_SetConfig+0xfc>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d003      	beq.n	8006786 <TIM_OC3_SetConfig+0x6a>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a26      	ldr	r2, [pc, #152]	; (800681c <TIM_OC3_SetConfig+0x100>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d10d      	bne.n	80067a2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800678c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	021b      	lsls	r3, r3, #8
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a1c      	ldr	r2, [pc, #112]	; (8006818 <TIM_OC3_SetConfig+0xfc>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d00f      	beq.n	80067ca <TIM_OC3_SetConfig+0xae>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a1b      	ldr	r2, [pc, #108]	; (800681c <TIM_OC3_SetConfig+0x100>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d00b      	beq.n	80067ca <TIM_OC3_SetConfig+0xae>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a1a      	ldr	r2, [pc, #104]	; (8006820 <TIM_OC3_SetConfig+0x104>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d007      	beq.n	80067ca <TIM_OC3_SetConfig+0xae>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a19      	ldr	r2, [pc, #100]	; (8006824 <TIM_OC3_SetConfig+0x108>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d003      	beq.n	80067ca <TIM_OC3_SetConfig+0xae>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a18      	ldr	r2, [pc, #96]	; (8006828 <TIM_OC3_SetConfig+0x10c>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d113      	bne.n	80067f2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	011b      	lsls	r3, r3, #4
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	621a      	str	r2, [r3, #32]
}
 800680c:	bf00      	nop
 800680e:	371c      	adds	r7, #28
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	40012c00 	.word	0x40012c00
 800681c:	40013400 	.word	0x40013400
 8006820:	40014000 	.word	0x40014000
 8006824:	40014400 	.word	0x40014400
 8006828:	40014800 	.word	0x40014800

0800682c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800682c:	b480      	push	{r7}
 800682e:	b087      	sub	sp, #28
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800685a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800685e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	021b      	lsls	r3, r3, #8
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4313      	orrs	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800687a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	031b      	lsls	r3, r3, #12
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	4313      	orrs	r3, r2
 8006886:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a18      	ldr	r2, [pc, #96]	; (80068ec <TIM_OC4_SetConfig+0xc0>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00f      	beq.n	80068b0 <TIM_OC4_SetConfig+0x84>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a17      	ldr	r2, [pc, #92]	; (80068f0 <TIM_OC4_SetConfig+0xc4>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00b      	beq.n	80068b0 <TIM_OC4_SetConfig+0x84>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a16      	ldr	r2, [pc, #88]	; (80068f4 <TIM_OC4_SetConfig+0xc8>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d007      	beq.n	80068b0 <TIM_OC4_SetConfig+0x84>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a15      	ldr	r2, [pc, #84]	; (80068f8 <TIM_OC4_SetConfig+0xcc>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d003      	beq.n	80068b0 <TIM_OC4_SetConfig+0x84>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a14      	ldr	r2, [pc, #80]	; (80068fc <TIM_OC4_SetConfig+0xd0>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d109      	bne.n	80068c4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	019b      	lsls	r3, r3, #6
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	621a      	str	r2, [r3, #32]
}
 80068de:	bf00      	nop
 80068e0:	371c      	adds	r7, #28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	40012c00 	.word	0x40012c00
 80068f0:	40013400 	.word	0x40013400
 80068f4:	40014000 	.word	0x40014000
 80068f8:	40014400 	.word	0x40014400
 80068fc:	40014800 	.word	0x40014800

08006900 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800692e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006944:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	041b      	lsls	r3, r3, #16
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	4313      	orrs	r3, r2
 8006950:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a17      	ldr	r2, [pc, #92]	; (80069b4 <TIM_OC5_SetConfig+0xb4>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d00f      	beq.n	800697a <TIM_OC5_SetConfig+0x7a>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a16      	ldr	r2, [pc, #88]	; (80069b8 <TIM_OC5_SetConfig+0xb8>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00b      	beq.n	800697a <TIM_OC5_SetConfig+0x7a>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a15      	ldr	r2, [pc, #84]	; (80069bc <TIM_OC5_SetConfig+0xbc>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d007      	beq.n	800697a <TIM_OC5_SetConfig+0x7a>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a14      	ldr	r2, [pc, #80]	; (80069c0 <TIM_OC5_SetConfig+0xc0>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d003      	beq.n	800697a <TIM_OC5_SetConfig+0x7a>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a13      	ldr	r2, [pc, #76]	; (80069c4 <TIM_OC5_SetConfig+0xc4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d109      	bne.n	800698e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006980:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	021b      	lsls	r3, r3, #8
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	4313      	orrs	r3, r2
 800698c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	621a      	str	r2, [r3, #32]
}
 80069a8:	bf00      	nop
 80069aa:	371c      	adds	r7, #28
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	40012c00 	.word	0x40012c00
 80069b8:	40013400 	.word	0x40013400
 80069bc:	40014000 	.word	0x40014000
 80069c0:	40014400 	.word	0x40014400
 80069c4:	40014800 	.word	0x40014800

080069c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	021b      	lsls	r3, r3, #8
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	051b      	lsls	r3, r3, #20
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a18      	ldr	r2, [pc, #96]	; (8006a80 <TIM_OC6_SetConfig+0xb8>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d00f      	beq.n	8006a44 <TIM_OC6_SetConfig+0x7c>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a17      	ldr	r2, [pc, #92]	; (8006a84 <TIM_OC6_SetConfig+0xbc>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d00b      	beq.n	8006a44 <TIM_OC6_SetConfig+0x7c>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a16      	ldr	r2, [pc, #88]	; (8006a88 <TIM_OC6_SetConfig+0xc0>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d007      	beq.n	8006a44 <TIM_OC6_SetConfig+0x7c>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a15      	ldr	r2, [pc, #84]	; (8006a8c <TIM_OC6_SetConfig+0xc4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d003      	beq.n	8006a44 <TIM_OC6_SetConfig+0x7c>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a14      	ldr	r2, [pc, #80]	; (8006a90 <TIM_OC6_SetConfig+0xc8>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d109      	bne.n	8006a58 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	029b      	lsls	r3, r3, #10
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	621a      	str	r2, [r3, #32]
}
 8006a72:	bf00      	nop
 8006a74:	371c      	adds	r7, #28
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	40012c00 	.word	0x40012c00
 8006a84:	40013400 	.word	0x40013400
 8006a88:	40014000 	.word	0x40014000
 8006a8c:	40014400 	.word	0x40014400
 8006a90:	40014800 	.word	0x40014800

08006a94 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	f023 0201 	bic.w	r2, r3, #1
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6a1b      	ldr	r3, [r3, #32]
 8006ab8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	4a26      	ldr	r2, [pc, #152]	; (8006b58 <TIM_TI1_SetConfig+0xc4>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d017      	beq.n	8006af2 <TIM_TI1_SetConfig+0x5e>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac8:	d013      	beq.n	8006af2 <TIM_TI1_SetConfig+0x5e>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	4a23      	ldr	r2, [pc, #140]	; (8006b5c <TIM_TI1_SetConfig+0xc8>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d00f      	beq.n	8006af2 <TIM_TI1_SetConfig+0x5e>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	4a22      	ldr	r2, [pc, #136]	; (8006b60 <TIM_TI1_SetConfig+0xcc>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d00b      	beq.n	8006af2 <TIM_TI1_SetConfig+0x5e>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4a21      	ldr	r2, [pc, #132]	; (8006b64 <TIM_TI1_SetConfig+0xd0>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d007      	beq.n	8006af2 <TIM_TI1_SetConfig+0x5e>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4a20      	ldr	r2, [pc, #128]	; (8006b68 <TIM_TI1_SetConfig+0xd4>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d003      	beq.n	8006af2 <TIM_TI1_SetConfig+0x5e>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	4a1f      	ldr	r2, [pc, #124]	; (8006b6c <TIM_TI1_SetConfig+0xd8>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d101      	bne.n	8006af6 <TIM_TI1_SetConfig+0x62>
 8006af2:	2301      	movs	r3, #1
 8006af4:	e000      	b.n	8006af8 <TIM_TI1_SetConfig+0x64>
 8006af6:	2300      	movs	r3, #0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d008      	beq.n	8006b0e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f023 0303 	bic.w	r3, r3, #3
 8006b02:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]
 8006b0c:	e003      	b.n	8006b16 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f043 0301 	orr.w	r3, r3, #1
 8006b14:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	011b      	lsls	r3, r3, #4
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	f023 030a 	bic.w	r3, r3, #10
 8006b30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	f003 030a 	and.w	r3, r3, #10
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	621a      	str	r2, [r3, #32]
}
 8006b4a:	bf00      	nop
 8006b4c:	371c      	adds	r7, #28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	40012c00 	.word	0x40012c00
 8006b5c:	40000400 	.word	0x40000400
 8006b60:	40000800 	.word	0x40000800
 8006b64:	40000c00 	.word	0x40000c00
 8006b68:	40013400 	.word	0x40013400
 8006b6c:	40014000 	.word	0x40014000

08006b70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b087      	sub	sp, #28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	f023 0201 	bic.w	r2, r3, #1
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	011b      	lsls	r3, r3, #4
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f023 030a 	bic.w	r3, r3, #10
 8006bac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	621a      	str	r2, [r3, #32]
}
 8006bc2:	bf00      	nop
 8006bc4:	371c      	adds	r7, #28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b087      	sub	sp, #28
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	607a      	str	r2, [r7, #4]
 8006bda:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6a1b      	ldr	r3, [r3, #32]
 8006be0:	f023 0210 	bic.w	r2, r3, #16
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bfa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	021b      	lsls	r3, r3, #8
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	031b      	lsls	r3, r3, #12
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c20:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	011b      	lsls	r3, r3, #4
 8006c26:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	621a      	str	r2, [r3, #32]
}
 8006c3c:	bf00      	nop
 8006c3e:	371c      	adds	r7, #28
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	f023 0210 	bic.w	r2, r3, #16
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	031b      	lsls	r3, r3, #12
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	011b      	lsls	r3, r3, #4
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	621a      	str	r2, [r3, #32]
}
 8006c9c:	bf00      	nop
 8006c9e:	371c      	adds	r7, #28
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b087      	sub	sp, #28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
 8006cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f023 0303 	bic.w	r3, r3, #3
 8006cd4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ce4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	011b      	lsls	r3, r3, #4
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006cf8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	021b      	lsls	r3, r3, #8
 8006cfe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	621a      	str	r2, [r3, #32]
}
 8006d14:	bf00      	nop
 8006d16:	371c      	adds	r7, #28
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
 8006d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6a1b      	ldr	r3, [r3, #32]
 8006d44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	021b      	lsls	r3, r3, #8
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d5e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	031b      	lsls	r3, r3, #12
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006d72:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	031b      	lsls	r3, r3, #12
 8006d78:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	621a      	str	r2, [r3, #32]
}
 8006d8e:	bf00      	nop
 8006d90:	371c      	adds	r7, #28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	f043 0307 	orr.w	r3, r3, #7
 8006dbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	609a      	str	r2, [r3, #8]
}
 8006dc4:	bf00      	nop
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
 8006ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	021a      	lsls	r2, r3, #8
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	431a      	orrs	r2, r3
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	609a      	str	r2, [r3, #8]
}
 8006e04:	bf00      	nop
 8006e06:	371c      	adds	r7, #28
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b087      	sub	sp, #28
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	f003 031f 	and.w	r3, r3, #31
 8006e22:	2201      	movs	r2, #1
 8006e24:	fa02 f303 	lsl.w	r3, r2, r3
 8006e28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6a1a      	ldr	r2, [r3, #32]
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	43db      	mvns	r3, r3
 8006e32:	401a      	ands	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6a1a      	ldr	r2, [r3, #32]
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f003 031f 	and.w	r3, r3, #31
 8006e42:	6879      	ldr	r1, [r7, #4]
 8006e44:	fa01 f303 	lsl.w	r3, r1, r3
 8006e48:	431a      	orrs	r2, r3
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	621a      	str	r2, [r3, #32]
}
 8006e4e:	bf00      	nop
 8006e50:	371c      	adds	r7, #28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
	...

08006e5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d101      	bne.n	8006e74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e70:	2302      	movs	r3, #2
 8006e72:	e068      	b.n	8006f46 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2202      	movs	r2, #2
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a2e      	ldr	r2, [pc, #184]	; (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d004      	beq.n	8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a2d      	ldr	r2, [pc, #180]	; (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d108      	bne.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006eae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a1e      	ldr	r2, [pc, #120]	; (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d01d      	beq.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee6:	d018      	beq.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a1b      	ldr	r2, [pc, #108]	; (8006f5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d013      	beq.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a1a      	ldr	r2, [pc, #104]	; (8006f60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d00e      	beq.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a18      	ldr	r2, [pc, #96]	; (8006f64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d009      	beq.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a13      	ldr	r2, [pc, #76]	; (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d004      	beq.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a14      	ldr	r2, [pc, #80]	; (8006f68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d10c      	bne.n	8006f34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	40012c00 	.word	0x40012c00
 8006f58:	40013400 	.word	0x40013400
 8006f5c:	40000400 	.word	0x40000400
 8006f60:	40000800 	.word	0x40000800
 8006f64:	40000c00 	.word	0x40000c00
 8006f68:	40014000 	.word	0x40014000

08006f6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e040      	b.n	800703c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d106      	bne.n	8006fd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7fa fee8 	bl	8001da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2224      	movs	r2, #36	; 0x24
 8006fd4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f022 0201 	bic.w	r2, r2, #1
 8006fe4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f8c0 	bl	800716c <UART_SetConfig>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d101      	bne.n	8006ff6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e022      	b.n	800703c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d002      	beq.n	8007004 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fb6c 	bl	80076dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685a      	ldr	r2, [r3, #4]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007012:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689a      	ldr	r2, [r3, #8]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007022:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f042 0201 	orr.w	r2, r2, #1
 8007032:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fbf3 	bl	8007820 <UART_CheckIdleState>
 800703a:	4603      	mov	r3, r0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b08a      	sub	sp, #40	; 0x28
 8007048:	af02      	add	r7, sp, #8
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	603b      	str	r3, [r7, #0]
 8007050:	4613      	mov	r3, r2
 8007052:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007058:	2b20      	cmp	r3, #32
 800705a:	f040 8082 	bne.w	8007162 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d002      	beq.n	800706a <HAL_UART_Transmit+0x26>
 8007064:	88fb      	ldrh	r3, [r7, #6]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e07a      	b.n	8007164 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007074:	2b01      	cmp	r3, #1
 8007076:	d101      	bne.n	800707c <HAL_UART_Transmit+0x38>
 8007078:	2302      	movs	r3, #2
 800707a:	e073      	b.n	8007164 <HAL_UART_Transmit+0x120>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2221      	movs	r2, #33	; 0x21
 8007090:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007092:	f7fa ff73 	bl	8001f7c <HAL_GetTick>
 8007096:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	88fa      	ldrh	r2, [r7, #6]
 800709c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	88fa      	ldrh	r2, [r7, #6]
 80070a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070b0:	d108      	bne.n	80070c4 <HAL_UART_Transmit+0x80>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d104      	bne.n	80070c4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80070ba:	2300      	movs	r3, #0
 80070bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	61bb      	str	r3, [r7, #24]
 80070c2:	e003      	b.n	80070cc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070c8:	2300      	movs	r3, #0
 80070ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80070d4:	e02d      	b.n	8007132 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	2200      	movs	r2, #0
 80070de:	2180      	movs	r1, #128	; 0x80
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f000 fbe6 	bl	80078b2 <UART_WaitOnFlagUntilTimeout>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d001      	beq.n	80070f0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e039      	b.n	8007164 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10b      	bne.n	800710e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	881a      	ldrh	r2, [r3, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007102:	b292      	uxth	r2, r2
 8007104:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	3302      	adds	r3, #2
 800710a:	61bb      	str	r3, [r7, #24]
 800710c:	e008      	b.n	8007120 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	781a      	ldrb	r2, [r3, #0]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	b292      	uxth	r2, r2
 8007118:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	3301      	adds	r3, #1
 800711e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007126:	b29b      	uxth	r3, r3
 8007128:	3b01      	subs	r3, #1
 800712a:	b29a      	uxth	r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007138:	b29b      	uxth	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1cb      	bne.n	80070d6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2200      	movs	r2, #0
 8007146:	2140      	movs	r1, #64	; 0x40
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f000 fbb2 	bl	80078b2 <UART_WaitOnFlagUntilTimeout>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d001      	beq.n	8007158 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e005      	b.n	8007164 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2220      	movs	r2, #32
 800715c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	e000      	b.n	8007164 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007162:	2302      	movs	r3, #2
  }
}
 8007164:	4618      	mov	r0, r3
 8007166:	3720      	adds	r7, #32
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800716c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007170:	b08a      	sub	sp, #40	; 0x28
 8007172:	af00      	add	r7, sp, #0
 8007174:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	689a      	ldr	r2, [r3, #8]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	431a      	orrs	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	431a      	orrs	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	69db      	ldr	r3, [r3, #28]
 8007190:	4313      	orrs	r3, r2
 8007192:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	4ba4      	ldr	r3, [pc, #656]	; (800742c <UART_SetConfig+0x2c0>)
 800719c:	4013      	ands	r3, r2
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	6812      	ldr	r2, [r2, #0]
 80071a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071a4:	430b      	orrs	r3, r1
 80071a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	68da      	ldr	r2, [r3, #12]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	430a      	orrs	r2, r1
 80071bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a99      	ldr	r2, [pc, #612]	; (8007430 <UART_SetConfig+0x2c4>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d004      	beq.n	80071d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071d4:	4313      	orrs	r3, r2
 80071d6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071e8:	430a      	orrs	r2, r1
 80071ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a90      	ldr	r2, [pc, #576]	; (8007434 <UART_SetConfig+0x2c8>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d126      	bne.n	8007244 <UART_SetConfig+0xd8>
 80071f6:	4b90      	ldr	r3, [pc, #576]	; (8007438 <UART_SetConfig+0x2cc>)
 80071f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071fc:	f003 0303 	and.w	r3, r3, #3
 8007200:	2b03      	cmp	r3, #3
 8007202:	d81b      	bhi.n	800723c <UART_SetConfig+0xd0>
 8007204:	a201      	add	r2, pc, #4	; (adr r2, 800720c <UART_SetConfig+0xa0>)
 8007206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720a:	bf00      	nop
 800720c:	0800721d 	.word	0x0800721d
 8007210:	0800722d 	.word	0x0800722d
 8007214:	08007225 	.word	0x08007225
 8007218:	08007235 	.word	0x08007235
 800721c:	2301      	movs	r3, #1
 800721e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007222:	e116      	b.n	8007452 <UART_SetConfig+0x2e6>
 8007224:	2302      	movs	r3, #2
 8007226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800722a:	e112      	b.n	8007452 <UART_SetConfig+0x2e6>
 800722c:	2304      	movs	r3, #4
 800722e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007232:	e10e      	b.n	8007452 <UART_SetConfig+0x2e6>
 8007234:	2308      	movs	r3, #8
 8007236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800723a:	e10a      	b.n	8007452 <UART_SetConfig+0x2e6>
 800723c:	2310      	movs	r3, #16
 800723e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007242:	e106      	b.n	8007452 <UART_SetConfig+0x2e6>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a7c      	ldr	r2, [pc, #496]	; (800743c <UART_SetConfig+0x2d0>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d138      	bne.n	80072c0 <UART_SetConfig+0x154>
 800724e:	4b7a      	ldr	r3, [pc, #488]	; (8007438 <UART_SetConfig+0x2cc>)
 8007250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007254:	f003 030c 	and.w	r3, r3, #12
 8007258:	2b0c      	cmp	r3, #12
 800725a:	d82d      	bhi.n	80072b8 <UART_SetConfig+0x14c>
 800725c:	a201      	add	r2, pc, #4	; (adr r2, 8007264 <UART_SetConfig+0xf8>)
 800725e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007262:	bf00      	nop
 8007264:	08007299 	.word	0x08007299
 8007268:	080072b9 	.word	0x080072b9
 800726c:	080072b9 	.word	0x080072b9
 8007270:	080072b9 	.word	0x080072b9
 8007274:	080072a9 	.word	0x080072a9
 8007278:	080072b9 	.word	0x080072b9
 800727c:	080072b9 	.word	0x080072b9
 8007280:	080072b9 	.word	0x080072b9
 8007284:	080072a1 	.word	0x080072a1
 8007288:	080072b9 	.word	0x080072b9
 800728c:	080072b9 	.word	0x080072b9
 8007290:	080072b9 	.word	0x080072b9
 8007294:	080072b1 	.word	0x080072b1
 8007298:	2300      	movs	r3, #0
 800729a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800729e:	e0d8      	b.n	8007452 <UART_SetConfig+0x2e6>
 80072a0:	2302      	movs	r3, #2
 80072a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072a6:	e0d4      	b.n	8007452 <UART_SetConfig+0x2e6>
 80072a8:	2304      	movs	r3, #4
 80072aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072ae:	e0d0      	b.n	8007452 <UART_SetConfig+0x2e6>
 80072b0:	2308      	movs	r3, #8
 80072b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072b6:	e0cc      	b.n	8007452 <UART_SetConfig+0x2e6>
 80072b8:	2310      	movs	r3, #16
 80072ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072be:	e0c8      	b.n	8007452 <UART_SetConfig+0x2e6>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a5e      	ldr	r2, [pc, #376]	; (8007440 <UART_SetConfig+0x2d4>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d125      	bne.n	8007316 <UART_SetConfig+0x1aa>
 80072ca:	4b5b      	ldr	r3, [pc, #364]	; (8007438 <UART_SetConfig+0x2cc>)
 80072cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80072d4:	2b30      	cmp	r3, #48	; 0x30
 80072d6:	d016      	beq.n	8007306 <UART_SetConfig+0x19a>
 80072d8:	2b30      	cmp	r3, #48	; 0x30
 80072da:	d818      	bhi.n	800730e <UART_SetConfig+0x1a2>
 80072dc:	2b20      	cmp	r3, #32
 80072de:	d00a      	beq.n	80072f6 <UART_SetConfig+0x18a>
 80072e0:	2b20      	cmp	r3, #32
 80072e2:	d814      	bhi.n	800730e <UART_SetConfig+0x1a2>
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d002      	beq.n	80072ee <UART_SetConfig+0x182>
 80072e8:	2b10      	cmp	r3, #16
 80072ea:	d008      	beq.n	80072fe <UART_SetConfig+0x192>
 80072ec:	e00f      	b.n	800730e <UART_SetConfig+0x1a2>
 80072ee:	2300      	movs	r3, #0
 80072f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072f4:	e0ad      	b.n	8007452 <UART_SetConfig+0x2e6>
 80072f6:	2302      	movs	r3, #2
 80072f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072fc:	e0a9      	b.n	8007452 <UART_SetConfig+0x2e6>
 80072fe:	2304      	movs	r3, #4
 8007300:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007304:	e0a5      	b.n	8007452 <UART_SetConfig+0x2e6>
 8007306:	2308      	movs	r3, #8
 8007308:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800730c:	e0a1      	b.n	8007452 <UART_SetConfig+0x2e6>
 800730e:	2310      	movs	r3, #16
 8007310:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007314:	e09d      	b.n	8007452 <UART_SetConfig+0x2e6>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a4a      	ldr	r2, [pc, #296]	; (8007444 <UART_SetConfig+0x2d8>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d125      	bne.n	800736c <UART_SetConfig+0x200>
 8007320:	4b45      	ldr	r3, [pc, #276]	; (8007438 <UART_SetConfig+0x2cc>)
 8007322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007326:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800732a:	2bc0      	cmp	r3, #192	; 0xc0
 800732c:	d016      	beq.n	800735c <UART_SetConfig+0x1f0>
 800732e:	2bc0      	cmp	r3, #192	; 0xc0
 8007330:	d818      	bhi.n	8007364 <UART_SetConfig+0x1f8>
 8007332:	2b80      	cmp	r3, #128	; 0x80
 8007334:	d00a      	beq.n	800734c <UART_SetConfig+0x1e0>
 8007336:	2b80      	cmp	r3, #128	; 0x80
 8007338:	d814      	bhi.n	8007364 <UART_SetConfig+0x1f8>
 800733a:	2b00      	cmp	r3, #0
 800733c:	d002      	beq.n	8007344 <UART_SetConfig+0x1d8>
 800733e:	2b40      	cmp	r3, #64	; 0x40
 8007340:	d008      	beq.n	8007354 <UART_SetConfig+0x1e8>
 8007342:	e00f      	b.n	8007364 <UART_SetConfig+0x1f8>
 8007344:	2300      	movs	r3, #0
 8007346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800734a:	e082      	b.n	8007452 <UART_SetConfig+0x2e6>
 800734c:	2302      	movs	r3, #2
 800734e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007352:	e07e      	b.n	8007452 <UART_SetConfig+0x2e6>
 8007354:	2304      	movs	r3, #4
 8007356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800735a:	e07a      	b.n	8007452 <UART_SetConfig+0x2e6>
 800735c:	2308      	movs	r3, #8
 800735e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007362:	e076      	b.n	8007452 <UART_SetConfig+0x2e6>
 8007364:	2310      	movs	r3, #16
 8007366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800736a:	e072      	b.n	8007452 <UART_SetConfig+0x2e6>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a35      	ldr	r2, [pc, #212]	; (8007448 <UART_SetConfig+0x2dc>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d12a      	bne.n	80073cc <UART_SetConfig+0x260>
 8007376:	4b30      	ldr	r3, [pc, #192]	; (8007438 <UART_SetConfig+0x2cc>)
 8007378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800737c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007380:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007384:	d01a      	beq.n	80073bc <UART_SetConfig+0x250>
 8007386:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800738a:	d81b      	bhi.n	80073c4 <UART_SetConfig+0x258>
 800738c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007390:	d00c      	beq.n	80073ac <UART_SetConfig+0x240>
 8007392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007396:	d815      	bhi.n	80073c4 <UART_SetConfig+0x258>
 8007398:	2b00      	cmp	r3, #0
 800739a:	d003      	beq.n	80073a4 <UART_SetConfig+0x238>
 800739c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073a0:	d008      	beq.n	80073b4 <UART_SetConfig+0x248>
 80073a2:	e00f      	b.n	80073c4 <UART_SetConfig+0x258>
 80073a4:	2300      	movs	r3, #0
 80073a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073aa:	e052      	b.n	8007452 <UART_SetConfig+0x2e6>
 80073ac:	2302      	movs	r3, #2
 80073ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073b2:	e04e      	b.n	8007452 <UART_SetConfig+0x2e6>
 80073b4:	2304      	movs	r3, #4
 80073b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073ba:	e04a      	b.n	8007452 <UART_SetConfig+0x2e6>
 80073bc:	2308      	movs	r3, #8
 80073be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073c2:	e046      	b.n	8007452 <UART_SetConfig+0x2e6>
 80073c4:	2310      	movs	r3, #16
 80073c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073ca:	e042      	b.n	8007452 <UART_SetConfig+0x2e6>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a17      	ldr	r2, [pc, #92]	; (8007430 <UART_SetConfig+0x2c4>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d13a      	bne.n	800744c <UART_SetConfig+0x2e0>
 80073d6:	4b18      	ldr	r3, [pc, #96]	; (8007438 <UART_SetConfig+0x2cc>)
 80073d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80073e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073e4:	d01a      	beq.n	800741c <UART_SetConfig+0x2b0>
 80073e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073ea:	d81b      	bhi.n	8007424 <UART_SetConfig+0x2b8>
 80073ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073f0:	d00c      	beq.n	800740c <UART_SetConfig+0x2a0>
 80073f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073f6:	d815      	bhi.n	8007424 <UART_SetConfig+0x2b8>
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d003      	beq.n	8007404 <UART_SetConfig+0x298>
 80073fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007400:	d008      	beq.n	8007414 <UART_SetConfig+0x2a8>
 8007402:	e00f      	b.n	8007424 <UART_SetConfig+0x2b8>
 8007404:	2300      	movs	r3, #0
 8007406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800740a:	e022      	b.n	8007452 <UART_SetConfig+0x2e6>
 800740c:	2302      	movs	r3, #2
 800740e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007412:	e01e      	b.n	8007452 <UART_SetConfig+0x2e6>
 8007414:	2304      	movs	r3, #4
 8007416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800741a:	e01a      	b.n	8007452 <UART_SetConfig+0x2e6>
 800741c:	2308      	movs	r3, #8
 800741e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007422:	e016      	b.n	8007452 <UART_SetConfig+0x2e6>
 8007424:	2310      	movs	r3, #16
 8007426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800742a:	e012      	b.n	8007452 <UART_SetConfig+0x2e6>
 800742c:	efff69f3 	.word	0xefff69f3
 8007430:	40008000 	.word	0x40008000
 8007434:	40013800 	.word	0x40013800
 8007438:	40021000 	.word	0x40021000
 800743c:	40004400 	.word	0x40004400
 8007440:	40004800 	.word	0x40004800
 8007444:	40004c00 	.word	0x40004c00
 8007448:	40005000 	.word	0x40005000
 800744c:	2310      	movs	r3, #16
 800744e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a9f      	ldr	r2, [pc, #636]	; (80076d4 <UART_SetConfig+0x568>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d17a      	bne.n	8007552 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800745c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007460:	2b08      	cmp	r3, #8
 8007462:	d824      	bhi.n	80074ae <UART_SetConfig+0x342>
 8007464:	a201      	add	r2, pc, #4	; (adr r2, 800746c <UART_SetConfig+0x300>)
 8007466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746a:	bf00      	nop
 800746c:	08007491 	.word	0x08007491
 8007470:	080074af 	.word	0x080074af
 8007474:	08007499 	.word	0x08007499
 8007478:	080074af 	.word	0x080074af
 800747c:	0800749f 	.word	0x0800749f
 8007480:	080074af 	.word	0x080074af
 8007484:	080074af 	.word	0x080074af
 8007488:	080074af 	.word	0x080074af
 800748c:	080074a7 	.word	0x080074a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007490:	f7fd fab4 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 8007494:	61f8      	str	r0, [r7, #28]
        break;
 8007496:	e010      	b.n	80074ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007498:	4b8f      	ldr	r3, [pc, #572]	; (80076d8 <UART_SetConfig+0x56c>)
 800749a:	61fb      	str	r3, [r7, #28]
        break;
 800749c:	e00d      	b.n	80074ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800749e:	f7fd fa15 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 80074a2:	61f8      	str	r0, [r7, #28]
        break;
 80074a4:	e009      	b.n	80074ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074aa:	61fb      	str	r3, [r7, #28]
        break;
 80074ac:	e005      	b.n	80074ba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80074ae:	2300      	movs	r3, #0
 80074b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80074b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f000 80fb 	beq.w	80076b8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	4613      	mov	r3, r2
 80074c8:	005b      	lsls	r3, r3, #1
 80074ca:	4413      	add	r3, r2
 80074cc:	69fa      	ldr	r2, [r7, #28]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d305      	bcc.n	80074de <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80074d8:	69fa      	ldr	r2, [r7, #28]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d903      	bls.n	80074e6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80074e4:	e0e8      	b.n	80076b8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	2200      	movs	r2, #0
 80074ea:	461c      	mov	r4, r3
 80074ec:	4615      	mov	r5, r2
 80074ee:	f04f 0200 	mov.w	r2, #0
 80074f2:	f04f 0300 	mov.w	r3, #0
 80074f6:	022b      	lsls	r3, r5, #8
 80074f8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80074fc:	0222      	lsls	r2, r4, #8
 80074fe:	68f9      	ldr	r1, [r7, #12]
 8007500:	6849      	ldr	r1, [r1, #4]
 8007502:	0849      	lsrs	r1, r1, #1
 8007504:	2000      	movs	r0, #0
 8007506:	4688      	mov	r8, r1
 8007508:	4681      	mov	r9, r0
 800750a:	eb12 0a08 	adds.w	sl, r2, r8
 800750e:	eb43 0b09 	adc.w	fp, r3, r9
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	603b      	str	r3, [r7, #0]
 800751a:	607a      	str	r2, [r7, #4]
 800751c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007520:	4650      	mov	r0, sl
 8007522:	4659      	mov	r1, fp
 8007524:	f7f9 fbb0 	bl	8000c88 <__aeabi_uldivmod>
 8007528:	4602      	mov	r2, r0
 800752a:	460b      	mov	r3, r1
 800752c:	4613      	mov	r3, r2
 800752e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007536:	d308      	bcc.n	800754a <UART_SetConfig+0x3de>
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800753e:	d204      	bcs.n	800754a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	69ba      	ldr	r2, [r7, #24]
 8007546:	60da      	str	r2, [r3, #12]
 8007548:	e0b6      	b.n	80076b8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007550:	e0b2      	b.n	80076b8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800755a:	d15e      	bne.n	800761a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800755c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007560:	2b08      	cmp	r3, #8
 8007562:	d828      	bhi.n	80075b6 <UART_SetConfig+0x44a>
 8007564:	a201      	add	r2, pc, #4	; (adr r2, 800756c <UART_SetConfig+0x400>)
 8007566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756a:	bf00      	nop
 800756c:	08007591 	.word	0x08007591
 8007570:	08007599 	.word	0x08007599
 8007574:	080075a1 	.word	0x080075a1
 8007578:	080075b7 	.word	0x080075b7
 800757c:	080075a7 	.word	0x080075a7
 8007580:	080075b7 	.word	0x080075b7
 8007584:	080075b7 	.word	0x080075b7
 8007588:	080075b7 	.word	0x080075b7
 800758c:	080075af 	.word	0x080075af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007590:	f7fd fa34 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 8007594:	61f8      	str	r0, [r7, #28]
        break;
 8007596:	e014      	b.n	80075c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007598:	f7fd fa46 	bl	8004a28 <HAL_RCC_GetPCLK2Freq>
 800759c:	61f8      	str	r0, [r7, #28]
        break;
 800759e:	e010      	b.n	80075c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075a0:	4b4d      	ldr	r3, [pc, #308]	; (80076d8 <UART_SetConfig+0x56c>)
 80075a2:	61fb      	str	r3, [r7, #28]
        break;
 80075a4:	e00d      	b.n	80075c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075a6:	f7fd f991 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 80075aa:	61f8      	str	r0, [r7, #28]
        break;
 80075ac:	e009      	b.n	80075c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075b2:	61fb      	str	r3, [r7, #28]
        break;
 80075b4:	e005      	b.n	80075c2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80075c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d077      	beq.n	80076b8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	005a      	lsls	r2, r3, #1
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	085b      	lsrs	r3, r3, #1
 80075d2:	441a      	add	r2, r3
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075dc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	2b0f      	cmp	r3, #15
 80075e2:	d916      	bls.n	8007612 <UART_SetConfig+0x4a6>
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ea:	d212      	bcs.n	8007612 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	f023 030f 	bic.w	r3, r3, #15
 80075f4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	085b      	lsrs	r3, r3, #1
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	f003 0307 	and.w	r3, r3, #7
 8007600:	b29a      	uxth	r2, r3
 8007602:	8afb      	ldrh	r3, [r7, #22]
 8007604:	4313      	orrs	r3, r2
 8007606:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	8afa      	ldrh	r2, [r7, #22]
 800760e:	60da      	str	r2, [r3, #12]
 8007610:	e052      	b.n	80076b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007618:	e04e      	b.n	80076b8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800761a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800761e:	2b08      	cmp	r3, #8
 8007620:	d827      	bhi.n	8007672 <UART_SetConfig+0x506>
 8007622:	a201      	add	r2, pc, #4	; (adr r2, 8007628 <UART_SetConfig+0x4bc>)
 8007624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007628:	0800764d 	.word	0x0800764d
 800762c:	08007655 	.word	0x08007655
 8007630:	0800765d 	.word	0x0800765d
 8007634:	08007673 	.word	0x08007673
 8007638:	08007663 	.word	0x08007663
 800763c:	08007673 	.word	0x08007673
 8007640:	08007673 	.word	0x08007673
 8007644:	08007673 	.word	0x08007673
 8007648:	0800766b 	.word	0x0800766b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800764c:	f7fd f9d6 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 8007650:	61f8      	str	r0, [r7, #28]
        break;
 8007652:	e014      	b.n	800767e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007654:	f7fd f9e8 	bl	8004a28 <HAL_RCC_GetPCLK2Freq>
 8007658:	61f8      	str	r0, [r7, #28]
        break;
 800765a:	e010      	b.n	800767e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800765c:	4b1e      	ldr	r3, [pc, #120]	; (80076d8 <UART_SetConfig+0x56c>)
 800765e:	61fb      	str	r3, [r7, #28]
        break;
 8007660:	e00d      	b.n	800767e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007662:	f7fd f933 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 8007666:	61f8      	str	r0, [r7, #28]
        break;
 8007668:	e009      	b.n	800767e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800766a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800766e:	61fb      	str	r3, [r7, #28]
        break;
 8007670:	e005      	b.n	800767e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007672:	2300      	movs	r3, #0
 8007674:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800767c:	bf00      	nop
    }

    if (pclk != 0U)
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d019      	beq.n	80076b8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	085a      	lsrs	r2, r3, #1
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	441a      	add	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	fbb2 f3f3 	udiv	r3, r2, r3
 8007696:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	2b0f      	cmp	r3, #15
 800769c:	d909      	bls.n	80076b2 <UART_SetConfig+0x546>
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076a4:	d205      	bcs.n	80076b2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	60da      	str	r2, [r3, #12]
 80076b0:	e002      	b.n	80076b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80076c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3728      	adds	r7, #40	; 0x28
 80076cc:	46bd      	mov	sp, r7
 80076ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076d2:	bf00      	nop
 80076d4:	40008000 	.word	0x40008000
 80076d8:	00f42400 	.word	0x00f42400

080076dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e8:	f003 0301 	and.w	r3, r3, #1
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00a      	beq.n	8007706 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	430a      	orrs	r2, r1
 8007704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770a:	f003 0302 	and.w	r3, r3, #2
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00a      	beq.n	8007728 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	430a      	orrs	r2, r1
 8007726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772c:	f003 0304 	and.w	r3, r3, #4
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00a      	beq.n	800774a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774e:	f003 0308 	and.w	r3, r3, #8
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00a      	beq.n	800776c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	430a      	orrs	r2, r1
 800776a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007770:	f003 0310 	and.w	r3, r3, #16
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00a      	beq.n	800778e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	430a      	orrs	r2, r1
 800778c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007792:	f003 0320 	and.w	r3, r3, #32
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00a      	beq.n	80077b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d01a      	beq.n	80077f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077da:	d10a      	bne.n	80077f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	430a      	orrs	r2, r1
 80077f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00a      	beq.n	8007814 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	430a      	orrs	r2, r1
 8007812:	605a      	str	r2, [r3, #4]
  }
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af02      	add	r7, sp, #8
 8007826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007830:	f7fa fba4 	bl	8001f7c <HAL_GetTick>
 8007834:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0308 	and.w	r3, r3, #8
 8007840:	2b08      	cmp	r3, #8
 8007842:	d10e      	bne.n	8007862 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007844:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f82d 	bl	80078b2 <UART_WaitOnFlagUntilTimeout>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e023      	b.n	80078aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 0304 	and.w	r3, r3, #4
 800786c:	2b04      	cmp	r3, #4
 800786e:	d10e      	bne.n	800788e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007870:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007874:	9300      	str	r3, [sp, #0]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f817 	bl	80078b2 <UART_WaitOnFlagUntilTimeout>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d001      	beq.n	800788e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800788a:	2303      	movs	r3, #3
 800788c:	e00d      	b.n	80078aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2220      	movs	r2, #32
 8007892:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2220      	movs	r2, #32
 8007898:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b09c      	sub	sp, #112	; 0x70
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	60f8      	str	r0, [r7, #12]
 80078ba:	60b9      	str	r1, [r7, #8]
 80078bc:	603b      	str	r3, [r7, #0]
 80078be:	4613      	mov	r3, r2
 80078c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078c2:	e0a5      	b.n	8007a10 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ca:	f000 80a1 	beq.w	8007a10 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078ce:	f7fa fb55 	bl	8001f7c <HAL_GetTick>
 80078d2:	4602      	mov	r2, r0
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80078da:	429a      	cmp	r2, r3
 80078dc:	d302      	bcc.n	80078e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80078de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d13e      	bne.n	8007962 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078ec:	e853 3f00 	ldrex	r3, [r3]
 80078f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80078f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078f8:	667b      	str	r3, [r7, #100]	; 0x64
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	461a      	mov	r2, r3
 8007900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007902:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007904:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007906:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007908:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800790a:	e841 2300 	strex	r3, r2, [r1]
 800790e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1e6      	bne.n	80078e4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3308      	adds	r3, #8
 800791c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007920:	e853 3f00 	ldrex	r3, [r3]
 8007924:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007928:	f023 0301 	bic.w	r3, r3, #1
 800792c:	663b      	str	r3, [r7, #96]	; 0x60
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	3308      	adds	r3, #8
 8007934:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007936:	64ba      	str	r2, [r7, #72]	; 0x48
 8007938:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800793c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800793e:	e841 2300 	strex	r3, r2, [r1]
 8007942:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1e5      	bne.n	8007916 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2220      	movs	r2, #32
 800794e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2220      	movs	r2, #32
 8007954:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800795e:	2303      	movs	r3, #3
 8007960:	e067      	b.n	8007a32 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0304 	and.w	r3, r3, #4
 800796c:	2b00      	cmp	r3, #0
 800796e:	d04f      	beq.n	8007a10 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	69db      	ldr	r3, [r3, #28]
 8007976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800797a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800797e:	d147      	bne.n	8007a10 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007988:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007992:	e853 3f00 	ldrex	r3, [r3]
 8007996:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800799e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	461a      	mov	r2, r3
 80079a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079a8:	637b      	str	r3, [r7, #52]	; 0x34
 80079aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80079ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079b0:	e841 2300 	strex	r3, r2, [r1]
 80079b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80079b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1e6      	bne.n	800798a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3308      	adds	r3, #8
 80079c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	e853 3f00 	ldrex	r3, [r3]
 80079ca:	613b      	str	r3, [r7, #16]
   return(result);
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	f023 0301 	bic.w	r3, r3, #1
 80079d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	3308      	adds	r3, #8
 80079da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80079dc:	623a      	str	r2, [r7, #32]
 80079de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e0:	69f9      	ldr	r1, [r7, #28]
 80079e2:	6a3a      	ldr	r2, [r7, #32]
 80079e4:	e841 2300 	strex	r3, r2, [r1]
 80079e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1e5      	bne.n	80079bc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2220      	movs	r2, #32
 80079f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2220      	movs	r2, #32
 80079fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2220      	movs	r2, #32
 8007a00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e010      	b.n	8007a32 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	69da      	ldr	r2, [r3, #28]
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	4013      	ands	r3, r2
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	bf0c      	ite	eq
 8007a20:	2301      	moveq	r3, #1
 8007a22:	2300      	movne	r3, #0
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	461a      	mov	r2, r3
 8007a28:	79fb      	ldrb	r3, [r7, #7]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	f43f af4a 	beq.w	80078c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3770      	adds	r7, #112	; 0x70
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
	...

08007a3c <__errno>:
 8007a3c:	4b01      	ldr	r3, [pc, #4]	; (8007a44 <__errno+0x8>)
 8007a3e:	6818      	ldr	r0, [r3, #0]
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	2000000c 	.word	0x2000000c

08007a48 <__libc_init_array>:
 8007a48:	b570      	push	{r4, r5, r6, lr}
 8007a4a:	4d0d      	ldr	r5, [pc, #52]	; (8007a80 <__libc_init_array+0x38>)
 8007a4c:	4c0d      	ldr	r4, [pc, #52]	; (8007a84 <__libc_init_array+0x3c>)
 8007a4e:	1b64      	subs	r4, r4, r5
 8007a50:	10a4      	asrs	r4, r4, #2
 8007a52:	2600      	movs	r6, #0
 8007a54:	42a6      	cmp	r6, r4
 8007a56:	d109      	bne.n	8007a6c <__libc_init_array+0x24>
 8007a58:	4d0b      	ldr	r5, [pc, #44]	; (8007a88 <__libc_init_array+0x40>)
 8007a5a:	4c0c      	ldr	r4, [pc, #48]	; (8007a8c <__libc_init_array+0x44>)
 8007a5c:	f002 fd38 	bl	800a4d0 <_init>
 8007a60:	1b64      	subs	r4, r4, r5
 8007a62:	10a4      	asrs	r4, r4, #2
 8007a64:	2600      	movs	r6, #0
 8007a66:	42a6      	cmp	r6, r4
 8007a68:	d105      	bne.n	8007a76 <__libc_init_array+0x2e>
 8007a6a:	bd70      	pop	{r4, r5, r6, pc}
 8007a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a70:	4798      	blx	r3
 8007a72:	3601      	adds	r6, #1
 8007a74:	e7ee      	b.n	8007a54 <__libc_init_array+0xc>
 8007a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a7a:	4798      	blx	r3
 8007a7c:	3601      	adds	r6, #1
 8007a7e:	e7f2      	b.n	8007a66 <__libc_init_array+0x1e>
 8007a80:	0800a91c 	.word	0x0800a91c
 8007a84:	0800a91c 	.word	0x0800a91c
 8007a88:	0800a91c 	.word	0x0800a91c
 8007a8c:	0800a920 	.word	0x0800a920

08007a90 <memset>:
 8007a90:	4402      	add	r2, r0
 8007a92:	4603      	mov	r3, r0
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d100      	bne.n	8007a9a <memset+0xa>
 8007a98:	4770      	bx	lr
 8007a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a9e:	e7f9      	b.n	8007a94 <memset+0x4>

08007aa0 <__cvt>:
 8007aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa4:	ec55 4b10 	vmov	r4, r5, d0
 8007aa8:	2d00      	cmp	r5, #0
 8007aaa:	460e      	mov	r6, r1
 8007aac:	4619      	mov	r1, r3
 8007aae:	462b      	mov	r3, r5
 8007ab0:	bfbb      	ittet	lt
 8007ab2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007ab6:	461d      	movlt	r5, r3
 8007ab8:	2300      	movge	r3, #0
 8007aba:	232d      	movlt	r3, #45	; 0x2d
 8007abc:	700b      	strb	r3, [r1, #0]
 8007abe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ac0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007ac4:	4691      	mov	r9, r2
 8007ac6:	f023 0820 	bic.w	r8, r3, #32
 8007aca:	bfbc      	itt	lt
 8007acc:	4622      	movlt	r2, r4
 8007ace:	4614      	movlt	r4, r2
 8007ad0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ad4:	d005      	beq.n	8007ae2 <__cvt+0x42>
 8007ad6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007ada:	d100      	bne.n	8007ade <__cvt+0x3e>
 8007adc:	3601      	adds	r6, #1
 8007ade:	2102      	movs	r1, #2
 8007ae0:	e000      	b.n	8007ae4 <__cvt+0x44>
 8007ae2:	2103      	movs	r1, #3
 8007ae4:	ab03      	add	r3, sp, #12
 8007ae6:	9301      	str	r3, [sp, #4]
 8007ae8:	ab02      	add	r3, sp, #8
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	ec45 4b10 	vmov	d0, r4, r5
 8007af0:	4653      	mov	r3, sl
 8007af2:	4632      	mov	r2, r6
 8007af4:	f000 fccc 	bl	8008490 <_dtoa_r>
 8007af8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007afc:	4607      	mov	r7, r0
 8007afe:	d102      	bne.n	8007b06 <__cvt+0x66>
 8007b00:	f019 0f01 	tst.w	r9, #1
 8007b04:	d022      	beq.n	8007b4c <__cvt+0xac>
 8007b06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b0a:	eb07 0906 	add.w	r9, r7, r6
 8007b0e:	d110      	bne.n	8007b32 <__cvt+0x92>
 8007b10:	783b      	ldrb	r3, [r7, #0]
 8007b12:	2b30      	cmp	r3, #48	; 0x30
 8007b14:	d10a      	bne.n	8007b2c <__cvt+0x8c>
 8007b16:	2200      	movs	r2, #0
 8007b18:	2300      	movs	r3, #0
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	f7f8 ffd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b22:	b918      	cbnz	r0, 8007b2c <__cvt+0x8c>
 8007b24:	f1c6 0601 	rsb	r6, r6, #1
 8007b28:	f8ca 6000 	str.w	r6, [sl]
 8007b2c:	f8da 3000 	ldr.w	r3, [sl]
 8007b30:	4499      	add	r9, r3
 8007b32:	2200      	movs	r2, #0
 8007b34:	2300      	movs	r3, #0
 8007b36:	4620      	mov	r0, r4
 8007b38:	4629      	mov	r1, r5
 8007b3a:	f7f8 ffc5 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b3e:	b108      	cbz	r0, 8007b44 <__cvt+0xa4>
 8007b40:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b44:	2230      	movs	r2, #48	; 0x30
 8007b46:	9b03      	ldr	r3, [sp, #12]
 8007b48:	454b      	cmp	r3, r9
 8007b4a:	d307      	bcc.n	8007b5c <__cvt+0xbc>
 8007b4c:	9b03      	ldr	r3, [sp, #12]
 8007b4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b50:	1bdb      	subs	r3, r3, r7
 8007b52:	4638      	mov	r0, r7
 8007b54:	6013      	str	r3, [r2, #0]
 8007b56:	b004      	add	sp, #16
 8007b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b5c:	1c59      	adds	r1, r3, #1
 8007b5e:	9103      	str	r1, [sp, #12]
 8007b60:	701a      	strb	r2, [r3, #0]
 8007b62:	e7f0      	b.n	8007b46 <__cvt+0xa6>

08007b64 <__exponent>:
 8007b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b66:	4603      	mov	r3, r0
 8007b68:	2900      	cmp	r1, #0
 8007b6a:	bfb8      	it	lt
 8007b6c:	4249      	neglt	r1, r1
 8007b6e:	f803 2b02 	strb.w	r2, [r3], #2
 8007b72:	bfb4      	ite	lt
 8007b74:	222d      	movlt	r2, #45	; 0x2d
 8007b76:	222b      	movge	r2, #43	; 0x2b
 8007b78:	2909      	cmp	r1, #9
 8007b7a:	7042      	strb	r2, [r0, #1]
 8007b7c:	dd2a      	ble.n	8007bd4 <__exponent+0x70>
 8007b7e:	f10d 0407 	add.w	r4, sp, #7
 8007b82:	46a4      	mov	ip, r4
 8007b84:	270a      	movs	r7, #10
 8007b86:	46a6      	mov	lr, r4
 8007b88:	460a      	mov	r2, r1
 8007b8a:	fb91 f6f7 	sdiv	r6, r1, r7
 8007b8e:	fb07 1516 	mls	r5, r7, r6, r1
 8007b92:	3530      	adds	r5, #48	; 0x30
 8007b94:	2a63      	cmp	r2, #99	; 0x63
 8007b96:	f104 34ff 	add.w	r4, r4, #4294967295
 8007b9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007b9e:	4631      	mov	r1, r6
 8007ba0:	dcf1      	bgt.n	8007b86 <__exponent+0x22>
 8007ba2:	3130      	adds	r1, #48	; 0x30
 8007ba4:	f1ae 0502 	sub.w	r5, lr, #2
 8007ba8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007bac:	1c44      	adds	r4, r0, #1
 8007bae:	4629      	mov	r1, r5
 8007bb0:	4561      	cmp	r1, ip
 8007bb2:	d30a      	bcc.n	8007bca <__exponent+0x66>
 8007bb4:	f10d 0209 	add.w	r2, sp, #9
 8007bb8:	eba2 020e 	sub.w	r2, r2, lr
 8007bbc:	4565      	cmp	r5, ip
 8007bbe:	bf88      	it	hi
 8007bc0:	2200      	movhi	r2, #0
 8007bc2:	4413      	add	r3, r2
 8007bc4:	1a18      	subs	r0, r3, r0
 8007bc6:	b003      	add	sp, #12
 8007bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bce:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007bd2:	e7ed      	b.n	8007bb0 <__exponent+0x4c>
 8007bd4:	2330      	movs	r3, #48	; 0x30
 8007bd6:	3130      	adds	r1, #48	; 0x30
 8007bd8:	7083      	strb	r3, [r0, #2]
 8007bda:	70c1      	strb	r1, [r0, #3]
 8007bdc:	1d03      	adds	r3, r0, #4
 8007bde:	e7f1      	b.n	8007bc4 <__exponent+0x60>

08007be0 <_printf_float>:
 8007be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be4:	ed2d 8b02 	vpush	{d8}
 8007be8:	b08d      	sub	sp, #52	; 0x34
 8007bea:	460c      	mov	r4, r1
 8007bec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007bf0:	4616      	mov	r6, r2
 8007bf2:	461f      	mov	r7, r3
 8007bf4:	4605      	mov	r5, r0
 8007bf6:	f001 fa39 	bl	800906c <_localeconv_r>
 8007bfa:	f8d0 a000 	ldr.w	sl, [r0]
 8007bfe:	4650      	mov	r0, sl
 8007c00:	f7f8 fae6 	bl	80001d0 <strlen>
 8007c04:	2300      	movs	r3, #0
 8007c06:	930a      	str	r3, [sp, #40]	; 0x28
 8007c08:	6823      	ldr	r3, [r4, #0]
 8007c0a:	9305      	str	r3, [sp, #20]
 8007c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8007c10:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007c14:	3307      	adds	r3, #7
 8007c16:	f023 0307 	bic.w	r3, r3, #7
 8007c1a:	f103 0208 	add.w	r2, r3, #8
 8007c1e:	f8c8 2000 	str.w	r2, [r8]
 8007c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c26:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007c2a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007c2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c32:	9307      	str	r3, [sp, #28]
 8007c34:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c38:	ee08 0a10 	vmov	s16, r0
 8007c3c:	4b9f      	ldr	r3, [pc, #636]	; (8007ebc <_printf_float+0x2dc>)
 8007c3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c42:	f04f 32ff 	mov.w	r2, #4294967295
 8007c46:	f7f8 ff71 	bl	8000b2c <__aeabi_dcmpun>
 8007c4a:	bb88      	cbnz	r0, 8007cb0 <_printf_float+0xd0>
 8007c4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c50:	4b9a      	ldr	r3, [pc, #616]	; (8007ebc <_printf_float+0x2dc>)
 8007c52:	f04f 32ff 	mov.w	r2, #4294967295
 8007c56:	f7f8 ff4b 	bl	8000af0 <__aeabi_dcmple>
 8007c5a:	bb48      	cbnz	r0, 8007cb0 <_printf_float+0xd0>
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	2300      	movs	r3, #0
 8007c60:	4640      	mov	r0, r8
 8007c62:	4649      	mov	r1, r9
 8007c64:	f7f8 ff3a 	bl	8000adc <__aeabi_dcmplt>
 8007c68:	b110      	cbz	r0, 8007c70 <_printf_float+0x90>
 8007c6a:	232d      	movs	r3, #45	; 0x2d
 8007c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c70:	4b93      	ldr	r3, [pc, #588]	; (8007ec0 <_printf_float+0x2e0>)
 8007c72:	4894      	ldr	r0, [pc, #592]	; (8007ec4 <_printf_float+0x2e4>)
 8007c74:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007c78:	bf94      	ite	ls
 8007c7a:	4698      	movls	r8, r3
 8007c7c:	4680      	movhi	r8, r0
 8007c7e:	2303      	movs	r3, #3
 8007c80:	6123      	str	r3, [r4, #16]
 8007c82:	9b05      	ldr	r3, [sp, #20]
 8007c84:	f023 0204 	bic.w	r2, r3, #4
 8007c88:	6022      	str	r2, [r4, #0]
 8007c8a:	f04f 0900 	mov.w	r9, #0
 8007c8e:	9700      	str	r7, [sp, #0]
 8007c90:	4633      	mov	r3, r6
 8007c92:	aa0b      	add	r2, sp, #44	; 0x2c
 8007c94:	4621      	mov	r1, r4
 8007c96:	4628      	mov	r0, r5
 8007c98:	f000 f9d8 	bl	800804c <_printf_common>
 8007c9c:	3001      	adds	r0, #1
 8007c9e:	f040 8090 	bne.w	8007dc2 <_printf_float+0x1e2>
 8007ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca6:	b00d      	add	sp, #52	; 0x34
 8007ca8:	ecbd 8b02 	vpop	{d8}
 8007cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb0:	4642      	mov	r2, r8
 8007cb2:	464b      	mov	r3, r9
 8007cb4:	4640      	mov	r0, r8
 8007cb6:	4649      	mov	r1, r9
 8007cb8:	f7f8 ff38 	bl	8000b2c <__aeabi_dcmpun>
 8007cbc:	b140      	cbz	r0, 8007cd0 <_printf_float+0xf0>
 8007cbe:	464b      	mov	r3, r9
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	bfbc      	itt	lt
 8007cc4:	232d      	movlt	r3, #45	; 0x2d
 8007cc6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007cca:	487f      	ldr	r0, [pc, #508]	; (8007ec8 <_printf_float+0x2e8>)
 8007ccc:	4b7f      	ldr	r3, [pc, #508]	; (8007ecc <_printf_float+0x2ec>)
 8007cce:	e7d1      	b.n	8007c74 <_printf_float+0x94>
 8007cd0:	6863      	ldr	r3, [r4, #4]
 8007cd2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007cd6:	9206      	str	r2, [sp, #24]
 8007cd8:	1c5a      	adds	r2, r3, #1
 8007cda:	d13f      	bne.n	8007d5c <_printf_float+0x17c>
 8007cdc:	2306      	movs	r3, #6
 8007cde:	6063      	str	r3, [r4, #4]
 8007ce0:	9b05      	ldr	r3, [sp, #20]
 8007ce2:	6861      	ldr	r1, [r4, #4]
 8007ce4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007ce8:	2300      	movs	r3, #0
 8007cea:	9303      	str	r3, [sp, #12]
 8007cec:	ab0a      	add	r3, sp, #40	; 0x28
 8007cee:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007cf2:	ab09      	add	r3, sp, #36	; 0x24
 8007cf4:	ec49 8b10 	vmov	d0, r8, r9
 8007cf8:	9300      	str	r3, [sp, #0]
 8007cfa:	6022      	str	r2, [r4, #0]
 8007cfc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007d00:	4628      	mov	r0, r5
 8007d02:	f7ff fecd 	bl	8007aa0 <__cvt>
 8007d06:	9b06      	ldr	r3, [sp, #24]
 8007d08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d0a:	2b47      	cmp	r3, #71	; 0x47
 8007d0c:	4680      	mov	r8, r0
 8007d0e:	d108      	bne.n	8007d22 <_printf_float+0x142>
 8007d10:	1cc8      	adds	r0, r1, #3
 8007d12:	db02      	blt.n	8007d1a <_printf_float+0x13a>
 8007d14:	6863      	ldr	r3, [r4, #4]
 8007d16:	4299      	cmp	r1, r3
 8007d18:	dd41      	ble.n	8007d9e <_printf_float+0x1be>
 8007d1a:	f1ab 0b02 	sub.w	fp, fp, #2
 8007d1e:	fa5f fb8b 	uxtb.w	fp, fp
 8007d22:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d26:	d820      	bhi.n	8007d6a <_printf_float+0x18a>
 8007d28:	3901      	subs	r1, #1
 8007d2a:	465a      	mov	r2, fp
 8007d2c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007d30:	9109      	str	r1, [sp, #36]	; 0x24
 8007d32:	f7ff ff17 	bl	8007b64 <__exponent>
 8007d36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d38:	1813      	adds	r3, r2, r0
 8007d3a:	2a01      	cmp	r2, #1
 8007d3c:	4681      	mov	r9, r0
 8007d3e:	6123      	str	r3, [r4, #16]
 8007d40:	dc02      	bgt.n	8007d48 <_printf_float+0x168>
 8007d42:	6822      	ldr	r2, [r4, #0]
 8007d44:	07d2      	lsls	r2, r2, #31
 8007d46:	d501      	bpl.n	8007d4c <_printf_float+0x16c>
 8007d48:	3301      	adds	r3, #1
 8007d4a:	6123      	str	r3, [r4, #16]
 8007d4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d09c      	beq.n	8007c8e <_printf_float+0xae>
 8007d54:	232d      	movs	r3, #45	; 0x2d
 8007d56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d5a:	e798      	b.n	8007c8e <_printf_float+0xae>
 8007d5c:	9a06      	ldr	r2, [sp, #24]
 8007d5e:	2a47      	cmp	r2, #71	; 0x47
 8007d60:	d1be      	bne.n	8007ce0 <_printf_float+0x100>
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1bc      	bne.n	8007ce0 <_printf_float+0x100>
 8007d66:	2301      	movs	r3, #1
 8007d68:	e7b9      	b.n	8007cde <_printf_float+0xfe>
 8007d6a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007d6e:	d118      	bne.n	8007da2 <_printf_float+0x1c2>
 8007d70:	2900      	cmp	r1, #0
 8007d72:	6863      	ldr	r3, [r4, #4]
 8007d74:	dd0b      	ble.n	8007d8e <_printf_float+0x1ae>
 8007d76:	6121      	str	r1, [r4, #16]
 8007d78:	b913      	cbnz	r3, 8007d80 <_printf_float+0x1a0>
 8007d7a:	6822      	ldr	r2, [r4, #0]
 8007d7c:	07d0      	lsls	r0, r2, #31
 8007d7e:	d502      	bpl.n	8007d86 <_printf_float+0x1a6>
 8007d80:	3301      	adds	r3, #1
 8007d82:	440b      	add	r3, r1
 8007d84:	6123      	str	r3, [r4, #16]
 8007d86:	65a1      	str	r1, [r4, #88]	; 0x58
 8007d88:	f04f 0900 	mov.w	r9, #0
 8007d8c:	e7de      	b.n	8007d4c <_printf_float+0x16c>
 8007d8e:	b913      	cbnz	r3, 8007d96 <_printf_float+0x1b6>
 8007d90:	6822      	ldr	r2, [r4, #0]
 8007d92:	07d2      	lsls	r2, r2, #31
 8007d94:	d501      	bpl.n	8007d9a <_printf_float+0x1ba>
 8007d96:	3302      	adds	r3, #2
 8007d98:	e7f4      	b.n	8007d84 <_printf_float+0x1a4>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e7f2      	b.n	8007d84 <_printf_float+0x1a4>
 8007d9e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007da4:	4299      	cmp	r1, r3
 8007da6:	db05      	blt.n	8007db4 <_printf_float+0x1d4>
 8007da8:	6823      	ldr	r3, [r4, #0]
 8007daa:	6121      	str	r1, [r4, #16]
 8007dac:	07d8      	lsls	r0, r3, #31
 8007dae:	d5ea      	bpl.n	8007d86 <_printf_float+0x1a6>
 8007db0:	1c4b      	adds	r3, r1, #1
 8007db2:	e7e7      	b.n	8007d84 <_printf_float+0x1a4>
 8007db4:	2900      	cmp	r1, #0
 8007db6:	bfd4      	ite	le
 8007db8:	f1c1 0202 	rsble	r2, r1, #2
 8007dbc:	2201      	movgt	r2, #1
 8007dbe:	4413      	add	r3, r2
 8007dc0:	e7e0      	b.n	8007d84 <_printf_float+0x1a4>
 8007dc2:	6823      	ldr	r3, [r4, #0]
 8007dc4:	055a      	lsls	r2, r3, #21
 8007dc6:	d407      	bmi.n	8007dd8 <_printf_float+0x1f8>
 8007dc8:	6923      	ldr	r3, [r4, #16]
 8007dca:	4642      	mov	r2, r8
 8007dcc:	4631      	mov	r1, r6
 8007dce:	4628      	mov	r0, r5
 8007dd0:	47b8      	blx	r7
 8007dd2:	3001      	adds	r0, #1
 8007dd4:	d12c      	bne.n	8007e30 <_printf_float+0x250>
 8007dd6:	e764      	b.n	8007ca2 <_printf_float+0xc2>
 8007dd8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ddc:	f240 80e0 	bls.w	8007fa0 <_printf_float+0x3c0>
 8007de0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007de4:	2200      	movs	r2, #0
 8007de6:	2300      	movs	r3, #0
 8007de8:	f7f8 fe6e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dec:	2800      	cmp	r0, #0
 8007dee:	d034      	beq.n	8007e5a <_printf_float+0x27a>
 8007df0:	4a37      	ldr	r2, [pc, #220]	; (8007ed0 <_printf_float+0x2f0>)
 8007df2:	2301      	movs	r3, #1
 8007df4:	4631      	mov	r1, r6
 8007df6:	4628      	mov	r0, r5
 8007df8:	47b8      	blx	r7
 8007dfa:	3001      	adds	r0, #1
 8007dfc:	f43f af51 	beq.w	8007ca2 <_printf_float+0xc2>
 8007e00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e04:	429a      	cmp	r2, r3
 8007e06:	db02      	blt.n	8007e0e <_printf_float+0x22e>
 8007e08:	6823      	ldr	r3, [r4, #0]
 8007e0a:	07d8      	lsls	r0, r3, #31
 8007e0c:	d510      	bpl.n	8007e30 <_printf_float+0x250>
 8007e0e:	ee18 3a10 	vmov	r3, s16
 8007e12:	4652      	mov	r2, sl
 8007e14:	4631      	mov	r1, r6
 8007e16:	4628      	mov	r0, r5
 8007e18:	47b8      	blx	r7
 8007e1a:	3001      	adds	r0, #1
 8007e1c:	f43f af41 	beq.w	8007ca2 <_printf_float+0xc2>
 8007e20:	f04f 0800 	mov.w	r8, #0
 8007e24:	f104 091a 	add.w	r9, r4, #26
 8007e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	4543      	cmp	r3, r8
 8007e2e:	dc09      	bgt.n	8007e44 <_printf_float+0x264>
 8007e30:	6823      	ldr	r3, [r4, #0]
 8007e32:	079b      	lsls	r3, r3, #30
 8007e34:	f100 8105 	bmi.w	8008042 <_printf_float+0x462>
 8007e38:	68e0      	ldr	r0, [r4, #12]
 8007e3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e3c:	4298      	cmp	r0, r3
 8007e3e:	bfb8      	it	lt
 8007e40:	4618      	movlt	r0, r3
 8007e42:	e730      	b.n	8007ca6 <_printf_float+0xc6>
 8007e44:	2301      	movs	r3, #1
 8007e46:	464a      	mov	r2, r9
 8007e48:	4631      	mov	r1, r6
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	47b8      	blx	r7
 8007e4e:	3001      	adds	r0, #1
 8007e50:	f43f af27 	beq.w	8007ca2 <_printf_float+0xc2>
 8007e54:	f108 0801 	add.w	r8, r8, #1
 8007e58:	e7e6      	b.n	8007e28 <_printf_float+0x248>
 8007e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	dc39      	bgt.n	8007ed4 <_printf_float+0x2f4>
 8007e60:	4a1b      	ldr	r2, [pc, #108]	; (8007ed0 <_printf_float+0x2f0>)
 8007e62:	2301      	movs	r3, #1
 8007e64:	4631      	mov	r1, r6
 8007e66:	4628      	mov	r0, r5
 8007e68:	47b8      	blx	r7
 8007e6a:	3001      	adds	r0, #1
 8007e6c:	f43f af19 	beq.w	8007ca2 <_printf_float+0xc2>
 8007e70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e74:	4313      	orrs	r3, r2
 8007e76:	d102      	bne.n	8007e7e <_printf_float+0x29e>
 8007e78:	6823      	ldr	r3, [r4, #0]
 8007e7a:	07d9      	lsls	r1, r3, #31
 8007e7c:	d5d8      	bpl.n	8007e30 <_printf_float+0x250>
 8007e7e:	ee18 3a10 	vmov	r3, s16
 8007e82:	4652      	mov	r2, sl
 8007e84:	4631      	mov	r1, r6
 8007e86:	4628      	mov	r0, r5
 8007e88:	47b8      	blx	r7
 8007e8a:	3001      	adds	r0, #1
 8007e8c:	f43f af09 	beq.w	8007ca2 <_printf_float+0xc2>
 8007e90:	f04f 0900 	mov.w	r9, #0
 8007e94:	f104 0a1a 	add.w	sl, r4, #26
 8007e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e9a:	425b      	negs	r3, r3
 8007e9c:	454b      	cmp	r3, r9
 8007e9e:	dc01      	bgt.n	8007ea4 <_printf_float+0x2c4>
 8007ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ea2:	e792      	b.n	8007dca <_printf_float+0x1ea>
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	4652      	mov	r2, sl
 8007ea8:	4631      	mov	r1, r6
 8007eaa:	4628      	mov	r0, r5
 8007eac:	47b8      	blx	r7
 8007eae:	3001      	adds	r0, #1
 8007eb0:	f43f aef7 	beq.w	8007ca2 <_printf_float+0xc2>
 8007eb4:	f109 0901 	add.w	r9, r9, #1
 8007eb8:	e7ee      	b.n	8007e98 <_printf_float+0x2b8>
 8007eba:	bf00      	nop
 8007ebc:	7fefffff 	.word	0x7fefffff
 8007ec0:	0800a540 	.word	0x0800a540
 8007ec4:	0800a544 	.word	0x0800a544
 8007ec8:	0800a54c 	.word	0x0800a54c
 8007ecc:	0800a548 	.word	0x0800a548
 8007ed0:	0800a550 	.word	0x0800a550
 8007ed4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ed6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	bfa8      	it	ge
 8007edc:	461a      	movge	r2, r3
 8007ede:	2a00      	cmp	r2, #0
 8007ee0:	4691      	mov	r9, r2
 8007ee2:	dc37      	bgt.n	8007f54 <_printf_float+0x374>
 8007ee4:	f04f 0b00 	mov.w	fp, #0
 8007ee8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007eec:	f104 021a 	add.w	r2, r4, #26
 8007ef0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ef2:	9305      	str	r3, [sp, #20]
 8007ef4:	eba3 0309 	sub.w	r3, r3, r9
 8007ef8:	455b      	cmp	r3, fp
 8007efa:	dc33      	bgt.n	8007f64 <_printf_float+0x384>
 8007efc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f00:	429a      	cmp	r2, r3
 8007f02:	db3b      	blt.n	8007f7c <_printf_float+0x39c>
 8007f04:	6823      	ldr	r3, [r4, #0]
 8007f06:	07da      	lsls	r2, r3, #31
 8007f08:	d438      	bmi.n	8007f7c <_printf_float+0x39c>
 8007f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f0c:	9a05      	ldr	r2, [sp, #20]
 8007f0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f10:	1a9a      	subs	r2, r3, r2
 8007f12:	eba3 0901 	sub.w	r9, r3, r1
 8007f16:	4591      	cmp	r9, r2
 8007f18:	bfa8      	it	ge
 8007f1a:	4691      	movge	r9, r2
 8007f1c:	f1b9 0f00 	cmp.w	r9, #0
 8007f20:	dc35      	bgt.n	8007f8e <_printf_float+0x3ae>
 8007f22:	f04f 0800 	mov.w	r8, #0
 8007f26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f2a:	f104 0a1a 	add.w	sl, r4, #26
 8007f2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f32:	1a9b      	subs	r3, r3, r2
 8007f34:	eba3 0309 	sub.w	r3, r3, r9
 8007f38:	4543      	cmp	r3, r8
 8007f3a:	f77f af79 	ble.w	8007e30 <_printf_float+0x250>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	4652      	mov	r2, sl
 8007f42:	4631      	mov	r1, r6
 8007f44:	4628      	mov	r0, r5
 8007f46:	47b8      	blx	r7
 8007f48:	3001      	adds	r0, #1
 8007f4a:	f43f aeaa 	beq.w	8007ca2 <_printf_float+0xc2>
 8007f4e:	f108 0801 	add.w	r8, r8, #1
 8007f52:	e7ec      	b.n	8007f2e <_printf_float+0x34e>
 8007f54:	4613      	mov	r3, r2
 8007f56:	4631      	mov	r1, r6
 8007f58:	4642      	mov	r2, r8
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	47b8      	blx	r7
 8007f5e:	3001      	adds	r0, #1
 8007f60:	d1c0      	bne.n	8007ee4 <_printf_float+0x304>
 8007f62:	e69e      	b.n	8007ca2 <_printf_float+0xc2>
 8007f64:	2301      	movs	r3, #1
 8007f66:	4631      	mov	r1, r6
 8007f68:	4628      	mov	r0, r5
 8007f6a:	9205      	str	r2, [sp, #20]
 8007f6c:	47b8      	blx	r7
 8007f6e:	3001      	adds	r0, #1
 8007f70:	f43f ae97 	beq.w	8007ca2 <_printf_float+0xc2>
 8007f74:	9a05      	ldr	r2, [sp, #20]
 8007f76:	f10b 0b01 	add.w	fp, fp, #1
 8007f7a:	e7b9      	b.n	8007ef0 <_printf_float+0x310>
 8007f7c:	ee18 3a10 	vmov	r3, s16
 8007f80:	4652      	mov	r2, sl
 8007f82:	4631      	mov	r1, r6
 8007f84:	4628      	mov	r0, r5
 8007f86:	47b8      	blx	r7
 8007f88:	3001      	adds	r0, #1
 8007f8a:	d1be      	bne.n	8007f0a <_printf_float+0x32a>
 8007f8c:	e689      	b.n	8007ca2 <_printf_float+0xc2>
 8007f8e:	9a05      	ldr	r2, [sp, #20]
 8007f90:	464b      	mov	r3, r9
 8007f92:	4442      	add	r2, r8
 8007f94:	4631      	mov	r1, r6
 8007f96:	4628      	mov	r0, r5
 8007f98:	47b8      	blx	r7
 8007f9a:	3001      	adds	r0, #1
 8007f9c:	d1c1      	bne.n	8007f22 <_printf_float+0x342>
 8007f9e:	e680      	b.n	8007ca2 <_printf_float+0xc2>
 8007fa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fa2:	2a01      	cmp	r2, #1
 8007fa4:	dc01      	bgt.n	8007faa <_printf_float+0x3ca>
 8007fa6:	07db      	lsls	r3, r3, #31
 8007fa8:	d538      	bpl.n	800801c <_printf_float+0x43c>
 8007faa:	2301      	movs	r3, #1
 8007fac:	4642      	mov	r2, r8
 8007fae:	4631      	mov	r1, r6
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	47b8      	blx	r7
 8007fb4:	3001      	adds	r0, #1
 8007fb6:	f43f ae74 	beq.w	8007ca2 <_printf_float+0xc2>
 8007fba:	ee18 3a10 	vmov	r3, s16
 8007fbe:	4652      	mov	r2, sl
 8007fc0:	4631      	mov	r1, r6
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	47b8      	blx	r7
 8007fc6:	3001      	adds	r0, #1
 8007fc8:	f43f ae6b 	beq.w	8007ca2 <_printf_float+0xc2>
 8007fcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	f7f8 fd78 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fd8:	b9d8      	cbnz	r0, 8008012 <_printf_float+0x432>
 8007fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fdc:	f108 0201 	add.w	r2, r8, #1
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	4631      	mov	r1, r6
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	47b8      	blx	r7
 8007fe8:	3001      	adds	r0, #1
 8007fea:	d10e      	bne.n	800800a <_printf_float+0x42a>
 8007fec:	e659      	b.n	8007ca2 <_printf_float+0xc2>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	4652      	mov	r2, sl
 8007ff2:	4631      	mov	r1, r6
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	47b8      	blx	r7
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	f43f ae52 	beq.w	8007ca2 <_printf_float+0xc2>
 8007ffe:	f108 0801 	add.w	r8, r8, #1
 8008002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008004:	3b01      	subs	r3, #1
 8008006:	4543      	cmp	r3, r8
 8008008:	dcf1      	bgt.n	8007fee <_printf_float+0x40e>
 800800a:	464b      	mov	r3, r9
 800800c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008010:	e6dc      	b.n	8007dcc <_printf_float+0x1ec>
 8008012:	f04f 0800 	mov.w	r8, #0
 8008016:	f104 0a1a 	add.w	sl, r4, #26
 800801a:	e7f2      	b.n	8008002 <_printf_float+0x422>
 800801c:	2301      	movs	r3, #1
 800801e:	4642      	mov	r2, r8
 8008020:	e7df      	b.n	8007fe2 <_printf_float+0x402>
 8008022:	2301      	movs	r3, #1
 8008024:	464a      	mov	r2, r9
 8008026:	4631      	mov	r1, r6
 8008028:	4628      	mov	r0, r5
 800802a:	47b8      	blx	r7
 800802c:	3001      	adds	r0, #1
 800802e:	f43f ae38 	beq.w	8007ca2 <_printf_float+0xc2>
 8008032:	f108 0801 	add.w	r8, r8, #1
 8008036:	68e3      	ldr	r3, [r4, #12]
 8008038:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800803a:	1a5b      	subs	r3, r3, r1
 800803c:	4543      	cmp	r3, r8
 800803e:	dcf0      	bgt.n	8008022 <_printf_float+0x442>
 8008040:	e6fa      	b.n	8007e38 <_printf_float+0x258>
 8008042:	f04f 0800 	mov.w	r8, #0
 8008046:	f104 0919 	add.w	r9, r4, #25
 800804a:	e7f4      	b.n	8008036 <_printf_float+0x456>

0800804c <_printf_common>:
 800804c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008050:	4616      	mov	r6, r2
 8008052:	4699      	mov	r9, r3
 8008054:	688a      	ldr	r2, [r1, #8]
 8008056:	690b      	ldr	r3, [r1, #16]
 8008058:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800805c:	4293      	cmp	r3, r2
 800805e:	bfb8      	it	lt
 8008060:	4613      	movlt	r3, r2
 8008062:	6033      	str	r3, [r6, #0]
 8008064:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008068:	4607      	mov	r7, r0
 800806a:	460c      	mov	r4, r1
 800806c:	b10a      	cbz	r2, 8008072 <_printf_common+0x26>
 800806e:	3301      	adds	r3, #1
 8008070:	6033      	str	r3, [r6, #0]
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	0699      	lsls	r1, r3, #26
 8008076:	bf42      	ittt	mi
 8008078:	6833      	ldrmi	r3, [r6, #0]
 800807a:	3302      	addmi	r3, #2
 800807c:	6033      	strmi	r3, [r6, #0]
 800807e:	6825      	ldr	r5, [r4, #0]
 8008080:	f015 0506 	ands.w	r5, r5, #6
 8008084:	d106      	bne.n	8008094 <_printf_common+0x48>
 8008086:	f104 0a19 	add.w	sl, r4, #25
 800808a:	68e3      	ldr	r3, [r4, #12]
 800808c:	6832      	ldr	r2, [r6, #0]
 800808e:	1a9b      	subs	r3, r3, r2
 8008090:	42ab      	cmp	r3, r5
 8008092:	dc26      	bgt.n	80080e2 <_printf_common+0x96>
 8008094:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008098:	1e13      	subs	r3, r2, #0
 800809a:	6822      	ldr	r2, [r4, #0]
 800809c:	bf18      	it	ne
 800809e:	2301      	movne	r3, #1
 80080a0:	0692      	lsls	r2, r2, #26
 80080a2:	d42b      	bmi.n	80080fc <_printf_common+0xb0>
 80080a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080a8:	4649      	mov	r1, r9
 80080aa:	4638      	mov	r0, r7
 80080ac:	47c0      	blx	r8
 80080ae:	3001      	adds	r0, #1
 80080b0:	d01e      	beq.n	80080f0 <_printf_common+0xa4>
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	68e5      	ldr	r5, [r4, #12]
 80080b6:	6832      	ldr	r2, [r6, #0]
 80080b8:	f003 0306 	and.w	r3, r3, #6
 80080bc:	2b04      	cmp	r3, #4
 80080be:	bf08      	it	eq
 80080c0:	1aad      	subeq	r5, r5, r2
 80080c2:	68a3      	ldr	r3, [r4, #8]
 80080c4:	6922      	ldr	r2, [r4, #16]
 80080c6:	bf0c      	ite	eq
 80080c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080cc:	2500      	movne	r5, #0
 80080ce:	4293      	cmp	r3, r2
 80080d0:	bfc4      	itt	gt
 80080d2:	1a9b      	subgt	r3, r3, r2
 80080d4:	18ed      	addgt	r5, r5, r3
 80080d6:	2600      	movs	r6, #0
 80080d8:	341a      	adds	r4, #26
 80080da:	42b5      	cmp	r5, r6
 80080dc:	d11a      	bne.n	8008114 <_printf_common+0xc8>
 80080de:	2000      	movs	r0, #0
 80080e0:	e008      	b.n	80080f4 <_printf_common+0xa8>
 80080e2:	2301      	movs	r3, #1
 80080e4:	4652      	mov	r2, sl
 80080e6:	4649      	mov	r1, r9
 80080e8:	4638      	mov	r0, r7
 80080ea:	47c0      	blx	r8
 80080ec:	3001      	adds	r0, #1
 80080ee:	d103      	bne.n	80080f8 <_printf_common+0xac>
 80080f0:	f04f 30ff 	mov.w	r0, #4294967295
 80080f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080f8:	3501      	adds	r5, #1
 80080fa:	e7c6      	b.n	800808a <_printf_common+0x3e>
 80080fc:	18e1      	adds	r1, r4, r3
 80080fe:	1c5a      	adds	r2, r3, #1
 8008100:	2030      	movs	r0, #48	; 0x30
 8008102:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008106:	4422      	add	r2, r4
 8008108:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800810c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008110:	3302      	adds	r3, #2
 8008112:	e7c7      	b.n	80080a4 <_printf_common+0x58>
 8008114:	2301      	movs	r3, #1
 8008116:	4622      	mov	r2, r4
 8008118:	4649      	mov	r1, r9
 800811a:	4638      	mov	r0, r7
 800811c:	47c0      	blx	r8
 800811e:	3001      	adds	r0, #1
 8008120:	d0e6      	beq.n	80080f0 <_printf_common+0xa4>
 8008122:	3601      	adds	r6, #1
 8008124:	e7d9      	b.n	80080da <_printf_common+0x8e>
	...

08008128 <_printf_i>:
 8008128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800812c:	7e0f      	ldrb	r7, [r1, #24]
 800812e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008130:	2f78      	cmp	r7, #120	; 0x78
 8008132:	4691      	mov	r9, r2
 8008134:	4680      	mov	r8, r0
 8008136:	460c      	mov	r4, r1
 8008138:	469a      	mov	sl, r3
 800813a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800813e:	d807      	bhi.n	8008150 <_printf_i+0x28>
 8008140:	2f62      	cmp	r7, #98	; 0x62
 8008142:	d80a      	bhi.n	800815a <_printf_i+0x32>
 8008144:	2f00      	cmp	r7, #0
 8008146:	f000 80d8 	beq.w	80082fa <_printf_i+0x1d2>
 800814a:	2f58      	cmp	r7, #88	; 0x58
 800814c:	f000 80a3 	beq.w	8008296 <_printf_i+0x16e>
 8008150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008154:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008158:	e03a      	b.n	80081d0 <_printf_i+0xa8>
 800815a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800815e:	2b15      	cmp	r3, #21
 8008160:	d8f6      	bhi.n	8008150 <_printf_i+0x28>
 8008162:	a101      	add	r1, pc, #4	; (adr r1, 8008168 <_printf_i+0x40>)
 8008164:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008168:	080081c1 	.word	0x080081c1
 800816c:	080081d5 	.word	0x080081d5
 8008170:	08008151 	.word	0x08008151
 8008174:	08008151 	.word	0x08008151
 8008178:	08008151 	.word	0x08008151
 800817c:	08008151 	.word	0x08008151
 8008180:	080081d5 	.word	0x080081d5
 8008184:	08008151 	.word	0x08008151
 8008188:	08008151 	.word	0x08008151
 800818c:	08008151 	.word	0x08008151
 8008190:	08008151 	.word	0x08008151
 8008194:	080082e1 	.word	0x080082e1
 8008198:	08008205 	.word	0x08008205
 800819c:	080082c3 	.word	0x080082c3
 80081a0:	08008151 	.word	0x08008151
 80081a4:	08008151 	.word	0x08008151
 80081a8:	08008303 	.word	0x08008303
 80081ac:	08008151 	.word	0x08008151
 80081b0:	08008205 	.word	0x08008205
 80081b4:	08008151 	.word	0x08008151
 80081b8:	08008151 	.word	0x08008151
 80081bc:	080082cb 	.word	0x080082cb
 80081c0:	682b      	ldr	r3, [r5, #0]
 80081c2:	1d1a      	adds	r2, r3, #4
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	602a      	str	r2, [r5, #0]
 80081c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081d0:	2301      	movs	r3, #1
 80081d2:	e0a3      	b.n	800831c <_printf_i+0x1f4>
 80081d4:	6820      	ldr	r0, [r4, #0]
 80081d6:	6829      	ldr	r1, [r5, #0]
 80081d8:	0606      	lsls	r6, r0, #24
 80081da:	f101 0304 	add.w	r3, r1, #4
 80081de:	d50a      	bpl.n	80081f6 <_printf_i+0xce>
 80081e0:	680e      	ldr	r6, [r1, #0]
 80081e2:	602b      	str	r3, [r5, #0]
 80081e4:	2e00      	cmp	r6, #0
 80081e6:	da03      	bge.n	80081f0 <_printf_i+0xc8>
 80081e8:	232d      	movs	r3, #45	; 0x2d
 80081ea:	4276      	negs	r6, r6
 80081ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081f0:	485e      	ldr	r0, [pc, #376]	; (800836c <_printf_i+0x244>)
 80081f2:	230a      	movs	r3, #10
 80081f4:	e019      	b.n	800822a <_printf_i+0x102>
 80081f6:	680e      	ldr	r6, [r1, #0]
 80081f8:	602b      	str	r3, [r5, #0]
 80081fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80081fe:	bf18      	it	ne
 8008200:	b236      	sxthne	r6, r6
 8008202:	e7ef      	b.n	80081e4 <_printf_i+0xbc>
 8008204:	682b      	ldr	r3, [r5, #0]
 8008206:	6820      	ldr	r0, [r4, #0]
 8008208:	1d19      	adds	r1, r3, #4
 800820a:	6029      	str	r1, [r5, #0]
 800820c:	0601      	lsls	r1, r0, #24
 800820e:	d501      	bpl.n	8008214 <_printf_i+0xec>
 8008210:	681e      	ldr	r6, [r3, #0]
 8008212:	e002      	b.n	800821a <_printf_i+0xf2>
 8008214:	0646      	lsls	r6, r0, #25
 8008216:	d5fb      	bpl.n	8008210 <_printf_i+0xe8>
 8008218:	881e      	ldrh	r6, [r3, #0]
 800821a:	4854      	ldr	r0, [pc, #336]	; (800836c <_printf_i+0x244>)
 800821c:	2f6f      	cmp	r7, #111	; 0x6f
 800821e:	bf0c      	ite	eq
 8008220:	2308      	moveq	r3, #8
 8008222:	230a      	movne	r3, #10
 8008224:	2100      	movs	r1, #0
 8008226:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800822a:	6865      	ldr	r5, [r4, #4]
 800822c:	60a5      	str	r5, [r4, #8]
 800822e:	2d00      	cmp	r5, #0
 8008230:	bfa2      	ittt	ge
 8008232:	6821      	ldrge	r1, [r4, #0]
 8008234:	f021 0104 	bicge.w	r1, r1, #4
 8008238:	6021      	strge	r1, [r4, #0]
 800823a:	b90e      	cbnz	r6, 8008240 <_printf_i+0x118>
 800823c:	2d00      	cmp	r5, #0
 800823e:	d04d      	beq.n	80082dc <_printf_i+0x1b4>
 8008240:	4615      	mov	r5, r2
 8008242:	fbb6 f1f3 	udiv	r1, r6, r3
 8008246:	fb03 6711 	mls	r7, r3, r1, r6
 800824a:	5dc7      	ldrb	r7, [r0, r7]
 800824c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008250:	4637      	mov	r7, r6
 8008252:	42bb      	cmp	r3, r7
 8008254:	460e      	mov	r6, r1
 8008256:	d9f4      	bls.n	8008242 <_printf_i+0x11a>
 8008258:	2b08      	cmp	r3, #8
 800825a:	d10b      	bne.n	8008274 <_printf_i+0x14c>
 800825c:	6823      	ldr	r3, [r4, #0]
 800825e:	07de      	lsls	r6, r3, #31
 8008260:	d508      	bpl.n	8008274 <_printf_i+0x14c>
 8008262:	6923      	ldr	r3, [r4, #16]
 8008264:	6861      	ldr	r1, [r4, #4]
 8008266:	4299      	cmp	r1, r3
 8008268:	bfde      	ittt	le
 800826a:	2330      	movle	r3, #48	; 0x30
 800826c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008270:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008274:	1b52      	subs	r2, r2, r5
 8008276:	6122      	str	r2, [r4, #16]
 8008278:	f8cd a000 	str.w	sl, [sp]
 800827c:	464b      	mov	r3, r9
 800827e:	aa03      	add	r2, sp, #12
 8008280:	4621      	mov	r1, r4
 8008282:	4640      	mov	r0, r8
 8008284:	f7ff fee2 	bl	800804c <_printf_common>
 8008288:	3001      	adds	r0, #1
 800828a:	d14c      	bne.n	8008326 <_printf_i+0x1fe>
 800828c:	f04f 30ff 	mov.w	r0, #4294967295
 8008290:	b004      	add	sp, #16
 8008292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008296:	4835      	ldr	r0, [pc, #212]	; (800836c <_printf_i+0x244>)
 8008298:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800829c:	6829      	ldr	r1, [r5, #0]
 800829e:	6823      	ldr	r3, [r4, #0]
 80082a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80082a4:	6029      	str	r1, [r5, #0]
 80082a6:	061d      	lsls	r5, r3, #24
 80082a8:	d514      	bpl.n	80082d4 <_printf_i+0x1ac>
 80082aa:	07df      	lsls	r7, r3, #31
 80082ac:	bf44      	itt	mi
 80082ae:	f043 0320 	orrmi.w	r3, r3, #32
 80082b2:	6023      	strmi	r3, [r4, #0]
 80082b4:	b91e      	cbnz	r6, 80082be <_printf_i+0x196>
 80082b6:	6823      	ldr	r3, [r4, #0]
 80082b8:	f023 0320 	bic.w	r3, r3, #32
 80082bc:	6023      	str	r3, [r4, #0]
 80082be:	2310      	movs	r3, #16
 80082c0:	e7b0      	b.n	8008224 <_printf_i+0xfc>
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	f043 0320 	orr.w	r3, r3, #32
 80082c8:	6023      	str	r3, [r4, #0]
 80082ca:	2378      	movs	r3, #120	; 0x78
 80082cc:	4828      	ldr	r0, [pc, #160]	; (8008370 <_printf_i+0x248>)
 80082ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082d2:	e7e3      	b.n	800829c <_printf_i+0x174>
 80082d4:	0659      	lsls	r1, r3, #25
 80082d6:	bf48      	it	mi
 80082d8:	b2b6      	uxthmi	r6, r6
 80082da:	e7e6      	b.n	80082aa <_printf_i+0x182>
 80082dc:	4615      	mov	r5, r2
 80082de:	e7bb      	b.n	8008258 <_printf_i+0x130>
 80082e0:	682b      	ldr	r3, [r5, #0]
 80082e2:	6826      	ldr	r6, [r4, #0]
 80082e4:	6961      	ldr	r1, [r4, #20]
 80082e6:	1d18      	adds	r0, r3, #4
 80082e8:	6028      	str	r0, [r5, #0]
 80082ea:	0635      	lsls	r5, r6, #24
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	d501      	bpl.n	80082f4 <_printf_i+0x1cc>
 80082f0:	6019      	str	r1, [r3, #0]
 80082f2:	e002      	b.n	80082fa <_printf_i+0x1d2>
 80082f4:	0670      	lsls	r0, r6, #25
 80082f6:	d5fb      	bpl.n	80082f0 <_printf_i+0x1c8>
 80082f8:	8019      	strh	r1, [r3, #0]
 80082fa:	2300      	movs	r3, #0
 80082fc:	6123      	str	r3, [r4, #16]
 80082fe:	4615      	mov	r5, r2
 8008300:	e7ba      	b.n	8008278 <_printf_i+0x150>
 8008302:	682b      	ldr	r3, [r5, #0]
 8008304:	1d1a      	adds	r2, r3, #4
 8008306:	602a      	str	r2, [r5, #0]
 8008308:	681d      	ldr	r5, [r3, #0]
 800830a:	6862      	ldr	r2, [r4, #4]
 800830c:	2100      	movs	r1, #0
 800830e:	4628      	mov	r0, r5
 8008310:	f7f7 ff66 	bl	80001e0 <memchr>
 8008314:	b108      	cbz	r0, 800831a <_printf_i+0x1f2>
 8008316:	1b40      	subs	r0, r0, r5
 8008318:	6060      	str	r0, [r4, #4]
 800831a:	6863      	ldr	r3, [r4, #4]
 800831c:	6123      	str	r3, [r4, #16]
 800831e:	2300      	movs	r3, #0
 8008320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008324:	e7a8      	b.n	8008278 <_printf_i+0x150>
 8008326:	6923      	ldr	r3, [r4, #16]
 8008328:	462a      	mov	r2, r5
 800832a:	4649      	mov	r1, r9
 800832c:	4640      	mov	r0, r8
 800832e:	47d0      	blx	sl
 8008330:	3001      	adds	r0, #1
 8008332:	d0ab      	beq.n	800828c <_printf_i+0x164>
 8008334:	6823      	ldr	r3, [r4, #0]
 8008336:	079b      	lsls	r3, r3, #30
 8008338:	d413      	bmi.n	8008362 <_printf_i+0x23a>
 800833a:	68e0      	ldr	r0, [r4, #12]
 800833c:	9b03      	ldr	r3, [sp, #12]
 800833e:	4298      	cmp	r0, r3
 8008340:	bfb8      	it	lt
 8008342:	4618      	movlt	r0, r3
 8008344:	e7a4      	b.n	8008290 <_printf_i+0x168>
 8008346:	2301      	movs	r3, #1
 8008348:	4632      	mov	r2, r6
 800834a:	4649      	mov	r1, r9
 800834c:	4640      	mov	r0, r8
 800834e:	47d0      	blx	sl
 8008350:	3001      	adds	r0, #1
 8008352:	d09b      	beq.n	800828c <_printf_i+0x164>
 8008354:	3501      	adds	r5, #1
 8008356:	68e3      	ldr	r3, [r4, #12]
 8008358:	9903      	ldr	r1, [sp, #12]
 800835a:	1a5b      	subs	r3, r3, r1
 800835c:	42ab      	cmp	r3, r5
 800835e:	dcf2      	bgt.n	8008346 <_printf_i+0x21e>
 8008360:	e7eb      	b.n	800833a <_printf_i+0x212>
 8008362:	2500      	movs	r5, #0
 8008364:	f104 0619 	add.w	r6, r4, #25
 8008368:	e7f5      	b.n	8008356 <_printf_i+0x22e>
 800836a:	bf00      	nop
 800836c:	0800a552 	.word	0x0800a552
 8008370:	0800a563 	.word	0x0800a563

08008374 <quorem>:
 8008374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008378:	6903      	ldr	r3, [r0, #16]
 800837a:	690c      	ldr	r4, [r1, #16]
 800837c:	42a3      	cmp	r3, r4
 800837e:	4607      	mov	r7, r0
 8008380:	f2c0 8081 	blt.w	8008486 <quorem+0x112>
 8008384:	3c01      	subs	r4, #1
 8008386:	f101 0814 	add.w	r8, r1, #20
 800838a:	f100 0514 	add.w	r5, r0, #20
 800838e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008392:	9301      	str	r3, [sp, #4]
 8008394:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008398:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800839c:	3301      	adds	r3, #1
 800839e:	429a      	cmp	r2, r3
 80083a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80083a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80083a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80083ac:	d331      	bcc.n	8008412 <quorem+0x9e>
 80083ae:	f04f 0e00 	mov.w	lr, #0
 80083b2:	4640      	mov	r0, r8
 80083b4:	46ac      	mov	ip, r5
 80083b6:	46f2      	mov	sl, lr
 80083b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80083bc:	b293      	uxth	r3, r2
 80083be:	fb06 e303 	mla	r3, r6, r3, lr
 80083c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	ebaa 0303 	sub.w	r3, sl, r3
 80083cc:	f8dc a000 	ldr.w	sl, [ip]
 80083d0:	0c12      	lsrs	r2, r2, #16
 80083d2:	fa13 f38a 	uxtah	r3, r3, sl
 80083d6:	fb06 e202 	mla	r2, r6, r2, lr
 80083da:	9300      	str	r3, [sp, #0]
 80083dc:	9b00      	ldr	r3, [sp, #0]
 80083de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80083e2:	b292      	uxth	r2, r2
 80083e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80083e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80083ec:	f8bd 3000 	ldrh.w	r3, [sp]
 80083f0:	4581      	cmp	r9, r0
 80083f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083f6:	f84c 3b04 	str.w	r3, [ip], #4
 80083fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80083fe:	d2db      	bcs.n	80083b8 <quorem+0x44>
 8008400:	f855 300b 	ldr.w	r3, [r5, fp]
 8008404:	b92b      	cbnz	r3, 8008412 <quorem+0x9e>
 8008406:	9b01      	ldr	r3, [sp, #4]
 8008408:	3b04      	subs	r3, #4
 800840a:	429d      	cmp	r5, r3
 800840c:	461a      	mov	r2, r3
 800840e:	d32e      	bcc.n	800846e <quorem+0xfa>
 8008410:	613c      	str	r4, [r7, #16]
 8008412:	4638      	mov	r0, r7
 8008414:	f001 f8c6 	bl	80095a4 <__mcmp>
 8008418:	2800      	cmp	r0, #0
 800841a:	db24      	blt.n	8008466 <quorem+0xf2>
 800841c:	3601      	adds	r6, #1
 800841e:	4628      	mov	r0, r5
 8008420:	f04f 0c00 	mov.w	ip, #0
 8008424:	f858 2b04 	ldr.w	r2, [r8], #4
 8008428:	f8d0 e000 	ldr.w	lr, [r0]
 800842c:	b293      	uxth	r3, r2
 800842e:	ebac 0303 	sub.w	r3, ip, r3
 8008432:	0c12      	lsrs	r2, r2, #16
 8008434:	fa13 f38e 	uxtah	r3, r3, lr
 8008438:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800843c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008440:	b29b      	uxth	r3, r3
 8008442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008446:	45c1      	cmp	r9, r8
 8008448:	f840 3b04 	str.w	r3, [r0], #4
 800844c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008450:	d2e8      	bcs.n	8008424 <quorem+0xb0>
 8008452:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008456:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800845a:	b922      	cbnz	r2, 8008466 <quorem+0xf2>
 800845c:	3b04      	subs	r3, #4
 800845e:	429d      	cmp	r5, r3
 8008460:	461a      	mov	r2, r3
 8008462:	d30a      	bcc.n	800847a <quorem+0x106>
 8008464:	613c      	str	r4, [r7, #16]
 8008466:	4630      	mov	r0, r6
 8008468:	b003      	add	sp, #12
 800846a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800846e:	6812      	ldr	r2, [r2, #0]
 8008470:	3b04      	subs	r3, #4
 8008472:	2a00      	cmp	r2, #0
 8008474:	d1cc      	bne.n	8008410 <quorem+0x9c>
 8008476:	3c01      	subs	r4, #1
 8008478:	e7c7      	b.n	800840a <quorem+0x96>
 800847a:	6812      	ldr	r2, [r2, #0]
 800847c:	3b04      	subs	r3, #4
 800847e:	2a00      	cmp	r2, #0
 8008480:	d1f0      	bne.n	8008464 <quorem+0xf0>
 8008482:	3c01      	subs	r4, #1
 8008484:	e7eb      	b.n	800845e <quorem+0xea>
 8008486:	2000      	movs	r0, #0
 8008488:	e7ee      	b.n	8008468 <quorem+0xf4>
 800848a:	0000      	movs	r0, r0
 800848c:	0000      	movs	r0, r0
	...

08008490 <_dtoa_r>:
 8008490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008494:	ed2d 8b04 	vpush	{d8-d9}
 8008498:	ec57 6b10 	vmov	r6, r7, d0
 800849c:	b093      	sub	sp, #76	; 0x4c
 800849e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80084a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80084a4:	9106      	str	r1, [sp, #24]
 80084a6:	ee10 aa10 	vmov	sl, s0
 80084aa:	4604      	mov	r4, r0
 80084ac:	9209      	str	r2, [sp, #36]	; 0x24
 80084ae:	930c      	str	r3, [sp, #48]	; 0x30
 80084b0:	46bb      	mov	fp, r7
 80084b2:	b975      	cbnz	r5, 80084d2 <_dtoa_r+0x42>
 80084b4:	2010      	movs	r0, #16
 80084b6:	f000 fddd 	bl	8009074 <malloc>
 80084ba:	4602      	mov	r2, r0
 80084bc:	6260      	str	r0, [r4, #36]	; 0x24
 80084be:	b920      	cbnz	r0, 80084ca <_dtoa_r+0x3a>
 80084c0:	4ba7      	ldr	r3, [pc, #668]	; (8008760 <_dtoa_r+0x2d0>)
 80084c2:	21ea      	movs	r1, #234	; 0xea
 80084c4:	48a7      	ldr	r0, [pc, #668]	; (8008764 <_dtoa_r+0x2d4>)
 80084c6:	f001 fa75 	bl	80099b4 <__assert_func>
 80084ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80084ce:	6005      	str	r5, [r0, #0]
 80084d0:	60c5      	str	r5, [r0, #12]
 80084d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084d4:	6819      	ldr	r1, [r3, #0]
 80084d6:	b151      	cbz	r1, 80084ee <_dtoa_r+0x5e>
 80084d8:	685a      	ldr	r2, [r3, #4]
 80084da:	604a      	str	r2, [r1, #4]
 80084dc:	2301      	movs	r3, #1
 80084de:	4093      	lsls	r3, r2
 80084e0:	608b      	str	r3, [r1, #8]
 80084e2:	4620      	mov	r0, r4
 80084e4:	f000 fe1c 	bl	8009120 <_Bfree>
 80084e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084ea:	2200      	movs	r2, #0
 80084ec:	601a      	str	r2, [r3, #0]
 80084ee:	1e3b      	subs	r3, r7, #0
 80084f0:	bfaa      	itet	ge
 80084f2:	2300      	movge	r3, #0
 80084f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80084f8:	f8c8 3000 	strge.w	r3, [r8]
 80084fc:	4b9a      	ldr	r3, [pc, #616]	; (8008768 <_dtoa_r+0x2d8>)
 80084fe:	bfbc      	itt	lt
 8008500:	2201      	movlt	r2, #1
 8008502:	f8c8 2000 	strlt.w	r2, [r8]
 8008506:	ea33 030b 	bics.w	r3, r3, fp
 800850a:	d11b      	bne.n	8008544 <_dtoa_r+0xb4>
 800850c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800850e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008512:	6013      	str	r3, [r2, #0]
 8008514:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008518:	4333      	orrs	r3, r6
 800851a:	f000 8592 	beq.w	8009042 <_dtoa_r+0xbb2>
 800851e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008520:	b963      	cbnz	r3, 800853c <_dtoa_r+0xac>
 8008522:	4b92      	ldr	r3, [pc, #584]	; (800876c <_dtoa_r+0x2dc>)
 8008524:	e022      	b.n	800856c <_dtoa_r+0xdc>
 8008526:	4b92      	ldr	r3, [pc, #584]	; (8008770 <_dtoa_r+0x2e0>)
 8008528:	9301      	str	r3, [sp, #4]
 800852a:	3308      	adds	r3, #8
 800852c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800852e:	6013      	str	r3, [r2, #0]
 8008530:	9801      	ldr	r0, [sp, #4]
 8008532:	b013      	add	sp, #76	; 0x4c
 8008534:	ecbd 8b04 	vpop	{d8-d9}
 8008538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800853c:	4b8b      	ldr	r3, [pc, #556]	; (800876c <_dtoa_r+0x2dc>)
 800853e:	9301      	str	r3, [sp, #4]
 8008540:	3303      	adds	r3, #3
 8008542:	e7f3      	b.n	800852c <_dtoa_r+0x9c>
 8008544:	2200      	movs	r2, #0
 8008546:	2300      	movs	r3, #0
 8008548:	4650      	mov	r0, sl
 800854a:	4659      	mov	r1, fp
 800854c:	f7f8 fabc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008550:	ec4b ab19 	vmov	d9, sl, fp
 8008554:	4680      	mov	r8, r0
 8008556:	b158      	cbz	r0, 8008570 <_dtoa_r+0xe0>
 8008558:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800855a:	2301      	movs	r3, #1
 800855c:	6013      	str	r3, [r2, #0]
 800855e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008560:	2b00      	cmp	r3, #0
 8008562:	f000 856b 	beq.w	800903c <_dtoa_r+0xbac>
 8008566:	4883      	ldr	r0, [pc, #524]	; (8008774 <_dtoa_r+0x2e4>)
 8008568:	6018      	str	r0, [r3, #0]
 800856a:	1e43      	subs	r3, r0, #1
 800856c:	9301      	str	r3, [sp, #4]
 800856e:	e7df      	b.n	8008530 <_dtoa_r+0xa0>
 8008570:	ec4b ab10 	vmov	d0, sl, fp
 8008574:	aa10      	add	r2, sp, #64	; 0x40
 8008576:	a911      	add	r1, sp, #68	; 0x44
 8008578:	4620      	mov	r0, r4
 800857a:	f001 f8b9 	bl	80096f0 <__d2b>
 800857e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008582:	ee08 0a10 	vmov	s16, r0
 8008586:	2d00      	cmp	r5, #0
 8008588:	f000 8084 	beq.w	8008694 <_dtoa_r+0x204>
 800858c:	ee19 3a90 	vmov	r3, s19
 8008590:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008594:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008598:	4656      	mov	r6, sl
 800859a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800859e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80085a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80085a6:	4b74      	ldr	r3, [pc, #464]	; (8008778 <_dtoa_r+0x2e8>)
 80085a8:	2200      	movs	r2, #0
 80085aa:	4630      	mov	r0, r6
 80085ac:	4639      	mov	r1, r7
 80085ae:	f7f7 fe6b 	bl	8000288 <__aeabi_dsub>
 80085b2:	a365      	add	r3, pc, #404	; (adr r3, 8008748 <_dtoa_r+0x2b8>)
 80085b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b8:	f7f8 f81e 	bl	80005f8 <__aeabi_dmul>
 80085bc:	a364      	add	r3, pc, #400	; (adr r3, 8008750 <_dtoa_r+0x2c0>)
 80085be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c2:	f7f7 fe63 	bl	800028c <__adddf3>
 80085c6:	4606      	mov	r6, r0
 80085c8:	4628      	mov	r0, r5
 80085ca:	460f      	mov	r7, r1
 80085cc:	f7f7 ffaa 	bl	8000524 <__aeabi_i2d>
 80085d0:	a361      	add	r3, pc, #388	; (adr r3, 8008758 <_dtoa_r+0x2c8>)
 80085d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d6:	f7f8 f80f 	bl	80005f8 <__aeabi_dmul>
 80085da:	4602      	mov	r2, r0
 80085dc:	460b      	mov	r3, r1
 80085de:	4630      	mov	r0, r6
 80085e0:	4639      	mov	r1, r7
 80085e2:	f7f7 fe53 	bl	800028c <__adddf3>
 80085e6:	4606      	mov	r6, r0
 80085e8:	460f      	mov	r7, r1
 80085ea:	f7f8 fab5 	bl	8000b58 <__aeabi_d2iz>
 80085ee:	2200      	movs	r2, #0
 80085f0:	9000      	str	r0, [sp, #0]
 80085f2:	2300      	movs	r3, #0
 80085f4:	4630      	mov	r0, r6
 80085f6:	4639      	mov	r1, r7
 80085f8:	f7f8 fa70 	bl	8000adc <__aeabi_dcmplt>
 80085fc:	b150      	cbz	r0, 8008614 <_dtoa_r+0x184>
 80085fe:	9800      	ldr	r0, [sp, #0]
 8008600:	f7f7 ff90 	bl	8000524 <__aeabi_i2d>
 8008604:	4632      	mov	r2, r6
 8008606:	463b      	mov	r3, r7
 8008608:	f7f8 fa5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800860c:	b910      	cbnz	r0, 8008614 <_dtoa_r+0x184>
 800860e:	9b00      	ldr	r3, [sp, #0]
 8008610:	3b01      	subs	r3, #1
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	9b00      	ldr	r3, [sp, #0]
 8008616:	2b16      	cmp	r3, #22
 8008618:	d85a      	bhi.n	80086d0 <_dtoa_r+0x240>
 800861a:	9a00      	ldr	r2, [sp, #0]
 800861c:	4b57      	ldr	r3, [pc, #348]	; (800877c <_dtoa_r+0x2ec>)
 800861e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008626:	ec51 0b19 	vmov	r0, r1, d9
 800862a:	f7f8 fa57 	bl	8000adc <__aeabi_dcmplt>
 800862e:	2800      	cmp	r0, #0
 8008630:	d050      	beq.n	80086d4 <_dtoa_r+0x244>
 8008632:	9b00      	ldr	r3, [sp, #0]
 8008634:	3b01      	subs	r3, #1
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	2300      	movs	r3, #0
 800863a:	930b      	str	r3, [sp, #44]	; 0x2c
 800863c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800863e:	1b5d      	subs	r5, r3, r5
 8008640:	1e6b      	subs	r3, r5, #1
 8008642:	9305      	str	r3, [sp, #20]
 8008644:	bf45      	ittet	mi
 8008646:	f1c5 0301 	rsbmi	r3, r5, #1
 800864a:	9304      	strmi	r3, [sp, #16]
 800864c:	2300      	movpl	r3, #0
 800864e:	2300      	movmi	r3, #0
 8008650:	bf4c      	ite	mi
 8008652:	9305      	strmi	r3, [sp, #20]
 8008654:	9304      	strpl	r3, [sp, #16]
 8008656:	9b00      	ldr	r3, [sp, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	db3d      	blt.n	80086d8 <_dtoa_r+0x248>
 800865c:	9b05      	ldr	r3, [sp, #20]
 800865e:	9a00      	ldr	r2, [sp, #0]
 8008660:	920a      	str	r2, [sp, #40]	; 0x28
 8008662:	4413      	add	r3, r2
 8008664:	9305      	str	r3, [sp, #20]
 8008666:	2300      	movs	r3, #0
 8008668:	9307      	str	r3, [sp, #28]
 800866a:	9b06      	ldr	r3, [sp, #24]
 800866c:	2b09      	cmp	r3, #9
 800866e:	f200 8089 	bhi.w	8008784 <_dtoa_r+0x2f4>
 8008672:	2b05      	cmp	r3, #5
 8008674:	bfc4      	itt	gt
 8008676:	3b04      	subgt	r3, #4
 8008678:	9306      	strgt	r3, [sp, #24]
 800867a:	9b06      	ldr	r3, [sp, #24]
 800867c:	f1a3 0302 	sub.w	r3, r3, #2
 8008680:	bfcc      	ite	gt
 8008682:	2500      	movgt	r5, #0
 8008684:	2501      	movle	r5, #1
 8008686:	2b03      	cmp	r3, #3
 8008688:	f200 8087 	bhi.w	800879a <_dtoa_r+0x30a>
 800868c:	e8df f003 	tbb	[pc, r3]
 8008690:	59383a2d 	.word	0x59383a2d
 8008694:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008698:	441d      	add	r5, r3
 800869a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800869e:	2b20      	cmp	r3, #32
 80086a0:	bfc1      	itttt	gt
 80086a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80086a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80086aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80086ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80086b2:	bfda      	itte	le
 80086b4:	f1c3 0320 	rsble	r3, r3, #32
 80086b8:	fa06 f003 	lslle.w	r0, r6, r3
 80086bc:	4318      	orrgt	r0, r3
 80086be:	f7f7 ff21 	bl	8000504 <__aeabi_ui2d>
 80086c2:	2301      	movs	r3, #1
 80086c4:	4606      	mov	r6, r0
 80086c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80086ca:	3d01      	subs	r5, #1
 80086cc:	930e      	str	r3, [sp, #56]	; 0x38
 80086ce:	e76a      	b.n	80085a6 <_dtoa_r+0x116>
 80086d0:	2301      	movs	r3, #1
 80086d2:	e7b2      	b.n	800863a <_dtoa_r+0x1aa>
 80086d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80086d6:	e7b1      	b.n	800863c <_dtoa_r+0x1ac>
 80086d8:	9b04      	ldr	r3, [sp, #16]
 80086da:	9a00      	ldr	r2, [sp, #0]
 80086dc:	1a9b      	subs	r3, r3, r2
 80086de:	9304      	str	r3, [sp, #16]
 80086e0:	4253      	negs	r3, r2
 80086e2:	9307      	str	r3, [sp, #28]
 80086e4:	2300      	movs	r3, #0
 80086e6:	930a      	str	r3, [sp, #40]	; 0x28
 80086e8:	e7bf      	b.n	800866a <_dtoa_r+0x1da>
 80086ea:	2300      	movs	r3, #0
 80086ec:	9308      	str	r3, [sp, #32]
 80086ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	dc55      	bgt.n	80087a0 <_dtoa_r+0x310>
 80086f4:	2301      	movs	r3, #1
 80086f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80086fa:	461a      	mov	r2, r3
 80086fc:	9209      	str	r2, [sp, #36]	; 0x24
 80086fe:	e00c      	b.n	800871a <_dtoa_r+0x28a>
 8008700:	2301      	movs	r3, #1
 8008702:	e7f3      	b.n	80086ec <_dtoa_r+0x25c>
 8008704:	2300      	movs	r3, #0
 8008706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008708:	9308      	str	r3, [sp, #32]
 800870a:	9b00      	ldr	r3, [sp, #0]
 800870c:	4413      	add	r3, r2
 800870e:	9302      	str	r3, [sp, #8]
 8008710:	3301      	adds	r3, #1
 8008712:	2b01      	cmp	r3, #1
 8008714:	9303      	str	r3, [sp, #12]
 8008716:	bfb8      	it	lt
 8008718:	2301      	movlt	r3, #1
 800871a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800871c:	2200      	movs	r2, #0
 800871e:	6042      	str	r2, [r0, #4]
 8008720:	2204      	movs	r2, #4
 8008722:	f102 0614 	add.w	r6, r2, #20
 8008726:	429e      	cmp	r6, r3
 8008728:	6841      	ldr	r1, [r0, #4]
 800872a:	d93d      	bls.n	80087a8 <_dtoa_r+0x318>
 800872c:	4620      	mov	r0, r4
 800872e:	f000 fcb7 	bl	80090a0 <_Balloc>
 8008732:	9001      	str	r0, [sp, #4]
 8008734:	2800      	cmp	r0, #0
 8008736:	d13b      	bne.n	80087b0 <_dtoa_r+0x320>
 8008738:	4b11      	ldr	r3, [pc, #68]	; (8008780 <_dtoa_r+0x2f0>)
 800873a:	4602      	mov	r2, r0
 800873c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008740:	e6c0      	b.n	80084c4 <_dtoa_r+0x34>
 8008742:	2301      	movs	r3, #1
 8008744:	e7df      	b.n	8008706 <_dtoa_r+0x276>
 8008746:	bf00      	nop
 8008748:	636f4361 	.word	0x636f4361
 800874c:	3fd287a7 	.word	0x3fd287a7
 8008750:	8b60c8b3 	.word	0x8b60c8b3
 8008754:	3fc68a28 	.word	0x3fc68a28
 8008758:	509f79fb 	.word	0x509f79fb
 800875c:	3fd34413 	.word	0x3fd34413
 8008760:	0800a581 	.word	0x0800a581
 8008764:	0800a598 	.word	0x0800a598
 8008768:	7ff00000 	.word	0x7ff00000
 800876c:	0800a57d 	.word	0x0800a57d
 8008770:	0800a574 	.word	0x0800a574
 8008774:	0800a551 	.word	0x0800a551
 8008778:	3ff80000 	.word	0x3ff80000
 800877c:	0800a688 	.word	0x0800a688
 8008780:	0800a5f3 	.word	0x0800a5f3
 8008784:	2501      	movs	r5, #1
 8008786:	2300      	movs	r3, #0
 8008788:	9306      	str	r3, [sp, #24]
 800878a:	9508      	str	r5, [sp, #32]
 800878c:	f04f 33ff 	mov.w	r3, #4294967295
 8008790:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008794:	2200      	movs	r2, #0
 8008796:	2312      	movs	r3, #18
 8008798:	e7b0      	b.n	80086fc <_dtoa_r+0x26c>
 800879a:	2301      	movs	r3, #1
 800879c:	9308      	str	r3, [sp, #32]
 800879e:	e7f5      	b.n	800878c <_dtoa_r+0x2fc>
 80087a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80087a6:	e7b8      	b.n	800871a <_dtoa_r+0x28a>
 80087a8:	3101      	adds	r1, #1
 80087aa:	6041      	str	r1, [r0, #4]
 80087ac:	0052      	lsls	r2, r2, #1
 80087ae:	e7b8      	b.n	8008722 <_dtoa_r+0x292>
 80087b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087b2:	9a01      	ldr	r2, [sp, #4]
 80087b4:	601a      	str	r2, [r3, #0]
 80087b6:	9b03      	ldr	r3, [sp, #12]
 80087b8:	2b0e      	cmp	r3, #14
 80087ba:	f200 809d 	bhi.w	80088f8 <_dtoa_r+0x468>
 80087be:	2d00      	cmp	r5, #0
 80087c0:	f000 809a 	beq.w	80088f8 <_dtoa_r+0x468>
 80087c4:	9b00      	ldr	r3, [sp, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	dd32      	ble.n	8008830 <_dtoa_r+0x3a0>
 80087ca:	4ab7      	ldr	r2, [pc, #732]	; (8008aa8 <_dtoa_r+0x618>)
 80087cc:	f003 030f 	and.w	r3, r3, #15
 80087d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80087d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80087d8:	9b00      	ldr	r3, [sp, #0]
 80087da:	05d8      	lsls	r0, r3, #23
 80087dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80087e0:	d516      	bpl.n	8008810 <_dtoa_r+0x380>
 80087e2:	4bb2      	ldr	r3, [pc, #712]	; (8008aac <_dtoa_r+0x61c>)
 80087e4:	ec51 0b19 	vmov	r0, r1, d9
 80087e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80087ec:	f7f8 f82e 	bl	800084c <__aeabi_ddiv>
 80087f0:	f007 070f 	and.w	r7, r7, #15
 80087f4:	4682      	mov	sl, r0
 80087f6:	468b      	mov	fp, r1
 80087f8:	2503      	movs	r5, #3
 80087fa:	4eac      	ldr	r6, [pc, #688]	; (8008aac <_dtoa_r+0x61c>)
 80087fc:	b957      	cbnz	r7, 8008814 <_dtoa_r+0x384>
 80087fe:	4642      	mov	r2, r8
 8008800:	464b      	mov	r3, r9
 8008802:	4650      	mov	r0, sl
 8008804:	4659      	mov	r1, fp
 8008806:	f7f8 f821 	bl	800084c <__aeabi_ddiv>
 800880a:	4682      	mov	sl, r0
 800880c:	468b      	mov	fp, r1
 800880e:	e028      	b.n	8008862 <_dtoa_r+0x3d2>
 8008810:	2502      	movs	r5, #2
 8008812:	e7f2      	b.n	80087fa <_dtoa_r+0x36a>
 8008814:	07f9      	lsls	r1, r7, #31
 8008816:	d508      	bpl.n	800882a <_dtoa_r+0x39a>
 8008818:	4640      	mov	r0, r8
 800881a:	4649      	mov	r1, r9
 800881c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008820:	f7f7 feea 	bl	80005f8 <__aeabi_dmul>
 8008824:	3501      	adds	r5, #1
 8008826:	4680      	mov	r8, r0
 8008828:	4689      	mov	r9, r1
 800882a:	107f      	asrs	r7, r7, #1
 800882c:	3608      	adds	r6, #8
 800882e:	e7e5      	b.n	80087fc <_dtoa_r+0x36c>
 8008830:	f000 809b 	beq.w	800896a <_dtoa_r+0x4da>
 8008834:	9b00      	ldr	r3, [sp, #0]
 8008836:	4f9d      	ldr	r7, [pc, #628]	; (8008aac <_dtoa_r+0x61c>)
 8008838:	425e      	negs	r6, r3
 800883a:	4b9b      	ldr	r3, [pc, #620]	; (8008aa8 <_dtoa_r+0x618>)
 800883c:	f006 020f 	and.w	r2, r6, #15
 8008840:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008848:	ec51 0b19 	vmov	r0, r1, d9
 800884c:	f7f7 fed4 	bl	80005f8 <__aeabi_dmul>
 8008850:	1136      	asrs	r6, r6, #4
 8008852:	4682      	mov	sl, r0
 8008854:	468b      	mov	fp, r1
 8008856:	2300      	movs	r3, #0
 8008858:	2502      	movs	r5, #2
 800885a:	2e00      	cmp	r6, #0
 800885c:	d17a      	bne.n	8008954 <_dtoa_r+0x4c4>
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1d3      	bne.n	800880a <_dtoa_r+0x37a>
 8008862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008864:	2b00      	cmp	r3, #0
 8008866:	f000 8082 	beq.w	800896e <_dtoa_r+0x4de>
 800886a:	4b91      	ldr	r3, [pc, #580]	; (8008ab0 <_dtoa_r+0x620>)
 800886c:	2200      	movs	r2, #0
 800886e:	4650      	mov	r0, sl
 8008870:	4659      	mov	r1, fp
 8008872:	f7f8 f933 	bl	8000adc <__aeabi_dcmplt>
 8008876:	2800      	cmp	r0, #0
 8008878:	d079      	beq.n	800896e <_dtoa_r+0x4de>
 800887a:	9b03      	ldr	r3, [sp, #12]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d076      	beq.n	800896e <_dtoa_r+0x4de>
 8008880:	9b02      	ldr	r3, [sp, #8]
 8008882:	2b00      	cmp	r3, #0
 8008884:	dd36      	ble.n	80088f4 <_dtoa_r+0x464>
 8008886:	9b00      	ldr	r3, [sp, #0]
 8008888:	4650      	mov	r0, sl
 800888a:	4659      	mov	r1, fp
 800888c:	1e5f      	subs	r7, r3, #1
 800888e:	2200      	movs	r2, #0
 8008890:	4b88      	ldr	r3, [pc, #544]	; (8008ab4 <_dtoa_r+0x624>)
 8008892:	f7f7 feb1 	bl	80005f8 <__aeabi_dmul>
 8008896:	9e02      	ldr	r6, [sp, #8]
 8008898:	4682      	mov	sl, r0
 800889a:	468b      	mov	fp, r1
 800889c:	3501      	adds	r5, #1
 800889e:	4628      	mov	r0, r5
 80088a0:	f7f7 fe40 	bl	8000524 <__aeabi_i2d>
 80088a4:	4652      	mov	r2, sl
 80088a6:	465b      	mov	r3, fp
 80088a8:	f7f7 fea6 	bl	80005f8 <__aeabi_dmul>
 80088ac:	4b82      	ldr	r3, [pc, #520]	; (8008ab8 <_dtoa_r+0x628>)
 80088ae:	2200      	movs	r2, #0
 80088b0:	f7f7 fcec 	bl	800028c <__adddf3>
 80088b4:	46d0      	mov	r8, sl
 80088b6:	46d9      	mov	r9, fp
 80088b8:	4682      	mov	sl, r0
 80088ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80088be:	2e00      	cmp	r6, #0
 80088c0:	d158      	bne.n	8008974 <_dtoa_r+0x4e4>
 80088c2:	4b7e      	ldr	r3, [pc, #504]	; (8008abc <_dtoa_r+0x62c>)
 80088c4:	2200      	movs	r2, #0
 80088c6:	4640      	mov	r0, r8
 80088c8:	4649      	mov	r1, r9
 80088ca:	f7f7 fcdd 	bl	8000288 <__aeabi_dsub>
 80088ce:	4652      	mov	r2, sl
 80088d0:	465b      	mov	r3, fp
 80088d2:	4680      	mov	r8, r0
 80088d4:	4689      	mov	r9, r1
 80088d6:	f7f8 f91f 	bl	8000b18 <__aeabi_dcmpgt>
 80088da:	2800      	cmp	r0, #0
 80088dc:	f040 8295 	bne.w	8008e0a <_dtoa_r+0x97a>
 80088e0:	4652      	mov	r2, sl
 80088e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80088e6:	4640      	mov	r0, r8
 80088e8:	4649      	mov	r1, r9
 80088ea:	f7f8 f8f7 	bl	8000adc <__aeabi_dcmplt>
 80088ee:	2800      	cmp	r0, #0
 80088f0:	f040 8289 	bne.w	8008e06 <_dtoa_r+0x976>
 80088f4:	ec5b ab19 	vmov	sl, fp, d9
 80088f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f2c0 8148 	blt.w	8008b90 <_dtoa_r+0x700>
 8008900:	9a00      	ldr	r2, [sp, #0]
 8008902:	2a0e      	cmp	r2, #14
 8008904:	f300 8144 	bgt.w	8008b90 <_dtoa_r+0x700>
 8008908:	4b67      	ldr	r3, [pc, #412]	; (8008aa8 <_dtoa_r+0x618>)
 800890a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800890e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008914:	2b00      	cmp	r3, #0
 8008916:	f280 80d5 	bge.w	8008ac4 <_dtoa_r+0x634>
 800891a:	9b03      	ldr	r3, [sp, #12]
 800891c:	2b00      	cmp	r3, #0
 800891e:	f300 80d1 	bgt.w	8008ac4 <_dtoa_r+0x634>
 8008922:	f040 826f 	bne.w	8008e04 <_dtoa_r+0x974>
 8008926:	4b65      	ldr	r3, [pc, #404]	; (8008abc <_dtoa_r+0x62c>)
 8008928:	2200      	movs	r2, #0
 800892a:	4640      	mov	r0, r8
 800892c:	4649      	mov	r1, r9
 800892e:	f7f7 fe63 	bl	80005f8 <__aeabi_dmul>
 8008932:	4652      	mov	r2, sl
 8008934:	465b      	mov	r3, fp
 8008936:	f7f8 f8e5 	bl	8000b04 <__aeabi_dcmpge>
 800893a:	9e03      	ldr	r6, [sp, #12]
 800893c:	4637      	mov	r7, r6
 800893e:	2800      	cmp	r0, #0
 8008940:	f040 8245 	bne.w	8008dce <_dtoa_r+0x93e>
 8008944:	9d01      	ldr	r5, [sp, #4]
 8008946:	2331      	movs	r3, #49	; 0x31
 8008948:	f805 3b01 	strb.w	r3, [r5], #1
 800894c:	9b00      	ldr	r3, [sp, #0]
 800894e:	3301      	adds	r3, #1
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	e240      	b.n	8008dd6 <_dtoa_r+0x946>
 8008954:	07f2      	lsls	r2, r6, #31
 8008956:	d505      	bpl.n	8008964 <_dtoa_r+0x4d4>
 8008958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800895c:	f7f7 fe4c 	bl	80005f8 <__aeabi_dmul>
 8008960:	3501      	adds	r5, #1
 8008962:	2301      	movs	r3, #1
 8008964:	1076      	asrs	r6, r6, #1
 8008966:	3708      	adds	r7, #8
 8008968:	e777      	b.n	800885a <_dtoa_r+0x3ca>
 800896a:	2502      	movs	r5, #2
 800896c:	e779      	b.n	8008862 <_dtoa_r+0x3d2>
 800896e:	9f00      	ldr	r7, [sp, #0]
 8008970:	9e03      	ldr	r6, [sp, #12]
 8008972:	e794      	b.n	800889e <_dtoa_r+0x40e>
 8008974:	9901      	ldr	r1, [sp, #4]
 8008976:	4b4c      	ldr	r3, [pc, #304]	; (8008aa8 <_dtoa_r+0x618>)
 8008978:	4431      	add	r1, r6
 800897a:	910d      	str	r1, [sp, #52]	; 0x34
 800897c:	9908      	ldr	r1, [sp, #32]
 800897e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008982:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008986:	2900      	cmp	r1, #0
 8008988:	d043      	beq.n	8008a12 <_dtoa_r+0x582>
 800898a:	494d      	ldr	r1, [pc, #308]	; (8008ac0 <_dtoa_r+0x630>)
 800898c:	2000      	movs	r0, #0
 800898e:	f7f7 ff5d 	bl	800084c <__aeabi_ddiv>
 8008992:	4652      	mov	r2, sl
 8008994:	465b      	mov	r3, fp
 8008996:	f7f7 fc77 	bl	8000288 <__aeabi_dsub>
 800899a:	9d01      	ldr	r5, [sp, #4]
 800899c:	4682      	mov	sl, r0
 800899e:	468b      	mov	fp, r1
 80089a0:	4649      	mov	r1, r9
 80089a2:	4640      	mov	r0, r8
 80089a4:	f7f8 f8d8 	bl	8000b58 <__aeabi_d2iz>
 80089a8:	4606      	mov	r6, r0
 80089aa:	f7f7 fdbb 	bl	8000524 <__aeabi_i2d>
 80089ae:	4602      	mov	r2, r0
 80089b0:	460b      	mov	r3, r1
 80089b2:	4640      	mov	r0, r8
 80089b4:	4649      	mov	r1, r9
 80089b6:	f7f7 fc67 	bl	8000288 <__aeabi_dsub>
 80089ba:	3630      	adds	r6, #48	; 0x30
 80089bc:	f805 6b01 	strb.w	r6, [r5], #1
 80089c0:	4652      	mov	r2, sl
 80089c2:	465b      	mov	r3, fp
 80089c4:	4680      	mov	r8, r0
 80089c6:	4689      	mov	r9, r1
 80089c8:	f7f8 f888 	bl	8000adc <__aeabi_dcmplt>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	d163      	bne.n	8008a98 <_dtoa_r+0x608>
 80089d0:	4642      	mov	r2, r8
 80089d2:	464b      	mov	r3, r9
 80089d4:	4936      	ldr	r1, [pc, #216]	; (8008ab0 <_dtoa_r+0x620>)
 80089d6:	2000      	movs	r0, #0
 80089d8:	f7f7 fc56 	bl	8000288 <__aeabi_dsub>
 80089dc:	4652      	mov	r2, sl
 80089de:	465b      	mov	r3, fp
 80089e0:	f7f8 f87c 	bl	8000adc <__aeabi_dcmplt>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	f040 80b5 	bne.w	8008b54 <_dtoa_r+0x6c4>
 80089ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089ec:	429d      	cmp	r5, r3
 80089ee:	d081      	beq.n	80088f4 <_dtoa_r+0x464>
 80089f0:	4b30      	ldr	r3, [pc, #192]	; (8008ab4 <_dtoa_r+0x624>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	4650      	mov	r0, sl
 80089f6:	4659      	mov	r1, fp
 80089f8:	f7f7 fdfe 	bl	80005f8 <__aeabi_dmul>
 80089fc:	4b2d      	ldr	r3, [pc, #180]	; (8008ab4 <_dtoa_r+0x624>)
 80089fe:	4682      	mov	sl, r0
 8008a00:	468b      	mov	fp, r1
 8008a02:	4640      	mov	r0, r8
 8008a04:	4649      	mov	r1, r9
 8008a06:	2200      	movs	r2, #0
 8008a08:	f7f7 fdf6 	bl	80005f8 <__aeabi_dmul>
 8008a0c:	4680      	mov	r8, r0
 8008a0e:	4689      	mov	r9, r1
 8008a10:	e7c6      	b.n	80089a0 <_dtoa_r+0x510>
 8008a12:	4650      	mov	r0, sl
 8008a14:	4659      	mov	r1, fp
 8008a16:	f7f7 fdef 	bl	80005f8 <__aeabi_dmul>
 8008a1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a1c:	9d01      	ldr	r5, [sp, #4]
 8008a1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a20:	4682      	mov	sl, r0
 8008a22:	468b      	mov	fp, r1
 8008a24:	4649      	mov	r1, r9
 8008a26:	4640      	mov	r0, r8
 8008a28:	f7f8 f896 	bl	8000b58 <__aeabi_d2iz>
 8008a2c:	4606      	mov	r6, r0
 8008a2e:	f7f7 fd79 	bl	8000524 <__aeabi_i2d>
 8008a32:	3630      	adds	r6, #48	; 0x30
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	4640      	mov	r0, r8
 8008a3a:	4649      	mov	r1, r9
 8008a3c:	f7f7 fc24 	bl	8000288 <__aeabi_dsub>
 8008a40:	f805 6b01 	strb.w	r6, [r5], #1
 8008a44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a46:	429d      	cmp	r5, r3
 8008a48:	4680      	mov	r8, r0
 8008a4a:	4689      	mov	r9, r1
 8008a4c:	f04f 0200 	mov.w	r2, #0
 8008a50:	d124      	bne.n	8008a9c <_dtoa_r+0x60c>
 8008a52:	4b1b      	ldr	r3, [pc, #108]	; (8008ac0 <_dtoa_r+0x630>)
 8008a54:	4650      	mov	r0, sl
 8008a56:	4659      	mov	r1, fp
 8008a58:	f7f7 fc18 	bl	800028c <__adddf3>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4640      	mov	r0, r8
 8008a62:	4649      	mov	r1, r9
 8008a64:	f7f8 f858 	bl	8000b18 <__aeabi_dcmpgt>
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	d173      	bne.n	8008b54 <_dtoa_r+0x6c4>
 8008a6c:	4652      	mov	r2, sl
 8008a6e:	465b      	mov	r3, fp
 8008a70:	4913      	ldr	r1, [pc, #76]	; (8008ac0 <_dtoa_r+0x630>)
 8008a72:	2000      	movs	r0, #0
 8008a74:	f7f7 fc08 	bl	8000288 <__aeabi_dsub>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	4640      	mov	r0, r8
 8008a7e:	4649      	mov	r1, r9
 8008a80:	f7f8 f82c 	bl	8000adc <__aeabi_dcmplt>
 8008a84:	2800      	cmp	r0, #0
 8008a86:	f43f af35 	beq.w	80088f4 <_dtoa_r+0x464>
 8008a8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008a8c:	1e6b      	subs	r3, r5, #1
 8008a8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a94:	2b30      	cmp	r3, #48	; 0x30
 8008a96:	d0f8      	beq.n	8008a8a <_dtoa_r+0x5fa>
 8008a98:	9700      	str	r7, [sp, #0]
 8008a9a:	e049      	b.n	8008b30 <_dtoa_r+0x6a0>
 8008a9c:	4b05      	ldr	r3, [pc, #20]	; (8008ab4 <_dtoa_r+0x624>)
 8008a9e:	f7f7 fdab 	bl	80005f8 <__aeabi_dmul>
 8008aa2:	4680      	mov	r8, r0
 8008aa4:	4689      	mov	r9, r1
 8008aa6:	e7bd      	b.n	8008a24 <_dtoa_r+0x594>
 8008aa8:	0800a688 	.word	0x0800a688
 8008aac:	0800a660 	.word	0x0800a660
 8008ab0:	3ff00000 	.word	0x3ff00000
 8008ab4:	40240000 	.word	0x40240000
 8008ab8:	401c0000 	.word	0x401c0000
 8008abc:	40140000 	.word	0x40140000
 8008ac0:	3fe00000 	.word	0x3fe00000
 8008ac4:	9d01      	ldr	r5, [sp, #4]
 8008ac6:	4656      	mov	r6, sl
 8008ac8:	465f      	mov	r7, fp
 8008aca:	4642      	mov	r2, r8
 8008acc:	464b      	mov	r3, r9
 8008ace:	4630      	mov	r0, r6
 8008ad0:	4639      	mov	r1, r7
 8008ad2:	f7f7 febb 	bl	800084c <__aeabi_ddiv>
 8008ad6:	f7f8 f83f 	bl	8000b58 <__aeabi_d2iz>
 8008ada:	4682      	mov	sl, r0
 8008adc:	f7f7 fd22 	bl	8000524 <__aeabi_i2d>
 8008ae0:	4642      	mov	r2, r8
 8008ae2:	464b      	mov	r3, r9
 8008ae4:	f7f7 fd88 	bl	80005f8 <__aeabi_dmul>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	460b      	mov	r3, r1
 8008aec:	4630      	mov	r0, r6
 8008aee:	4639      	mov	r1, r7
 8008af0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008af4:	f7f7 fbc8 	bl	8000288 <__aeabi_dsub>
 8008af8:	f805 6b01 	strb.w	r6, [r5], #1
 8008afc:	9e01      	ldr	r6, [sp, #4]
 8008afe:	9f03      	ldr	r7, [sp, #12]
 8008b00:	1bae      	subs	r6, r5, r6
 8008b02:	42b7      	cmp	r7, r6
 8008b04:	4602      	mov	r2, r0
 8008b06:	460b      	mov	r3, r1
 8008b08:	d135      	bne.n	8008b76 <_dtoa_r+0x6e6>
 8008b0a:	f7f7 fbbf 	bl	800028c <__adddf3>
 8008b0e:	4642      	mov	r2, r8
 8008b10:	464b      	mov	r3, r9
 8008b12:	4606      	mov	r6, r0
 8008b14:	460f      	mov	r7, r1
 8008b16:	f7f7 ffff 	bl	8000b18 <__aeabi_dcmpgt>
 8008b1a:	b9d0      	cbnz	r0, 8008b52 <_dtoa_r+0x6c2>
 8008b1c:	4642      	mov	r2, r8
 8008b1e:	464b      	mov	r3, r9
 8008b20:	4630      	mov	r0, r6
 8008b22:	4639      	mov	r1, r7
 8008b24:	f7f7 ffd0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b28:	b110      	cbz	r0, 8008b30 <_dtoa_r+0x6a0>
 8008b2a:	f01a 0f01 	tst.w	sl, #1
 8008b2e:	d110      	bne.n	8008b52 <_dtoa_r+0x6c2>
 8008b30:	4620      	mov	r0, r4
 8008b32:	ee18 1a10 	vmov	r1, s16
 8008b36:	f000 faf3 	bl	8009120 <_Bfree>
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	9800      	ldr	r0, [sp, #0]
 8008b3e:	702b      	strb	r3, [r5, #0]
 8008b40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b42:	3001      	adds	r0, #1
 8008b44:	6018      	str	r0, [r3, #0]
 8008b46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f43f acf1 	beq.w	8008530 <_dtoa_r+0xa0>
 8008b4e:	601d      	str	r5, [r3, #0]
 8008b50:	e4ee      	b.n	8008530 <_dtoa_r+0xa0>
 8008b52:	9f00      	ldr	r7, [sp, #0]
 8008b54:	462b      	mov	r3, r5
 8008b56:	461d      	mov	r5, r3
 8008b58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b5c:	2a39      	cmp	r2, #57	; 0x39
 8008b5e:	d106      	bne.n	8008b6e <_dtoa_r+0x6de>
 8008b60:	9a01      	ldr	r2, [sp, #4]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d1f7      	bne.n	8008b56 <_dtoa_r+0x6c6>
 8008b66:	9901      	ldr	r1, [sp, #4]
 8008b68:	2230      	movs	r2, #48	; 0x30
 8008b6a:	3701      	adds	r7, #1
 8008b6c:	700a      	strb	r2, [r1, #0]
 8008b6e:	781a      	ldrb	r2, [r3, #0]
 8008b70:	3201      	adds	r2, #1
 8008b72:	701a      	strb	r2, [r3, #0]
 8008b74:	e790      	b.n	8008a98 <_dtoa_r+0x608>
 8008b76:	4ba6      	ldr	r3, [pc, #664]	; (8008e10 <_dtoa_r+0x980>)
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f7f7 fd3d 	bl	80005f8 <__aeabi_dmul>
 8008b7e:	2200      	movs	r2, #0
 8008b80:	2300      	movs	r3, #0
 8008b82:	4606      	mov	r6, r0
 8008b84:	460f      	mov	r7, r1
 8008b86:	f7f7 ff9f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	d09d      	beq.n	8008aca <_dtoa_r+0x63a>
 8008b8e:	e7cf      	b.n	8008b30 <_dtoa_r+0x6a0>
 8008b90:	9a08      	ldr	r2, [sp, #32]
 8008b92:	2a00      	cmp	r2, #0
 8008b94:	f000 80d7 	beq.w	8008d46 <_dtoa_r+0x8b6>
 8008b98:	9a06      	ldr	r2, [sp, #24]
 8008b9a:	2a01      	cmp	r2, #1
 8008b9c:	f300 80ba 	bgt.w	8008d14 <_dtoa_r+0x884>
 8008ba0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ba2:	2a00      	cmp	r2, #0
 8008ba4:	f000 80b2 	beq.w	8008d0c <_dtoa_r+0x87c>
 8008ba8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008bac:	9e07      	ldr	r6, [sp, #28]
 8008bae:	9d04      	ldr	r5, [sp, #16]
 8008bb0:	9a04      	ldr	r2, [sp, #16]
 8008bb2:	441a      	add	r2, r3
 8008bb4:	9204      	str	r2, [sp, #16]
 8008bb6:	9a05      	ldr	r2, [sp, #20]
 8008bb8:	2101      	movs	r1, #1
 8008bba:	441a      	add	r2, r3
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	9205      	str	r2, [sp, #20]
 8008bc0:	f000 fb66 	bl	8009290 <__i2b>
 8008bc4:	4607      	mov	r7, r0
 8008bc6:	2d00      	cmp	r5, #0
 8008bc8:	dd0c      	ble.n	8008be4 <_dtoa_r+0x754>
 8008bca:	9b05      	ldr	r3, [sp, #20]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	dd09      	ble.n	8008be4 <_dtoa_r+0x754>
 8008bd0:	42ab      	cmp	r3, r5
 8008bd2:	9a04      	ldr	r2, [sp, #16]
 8008bd4:	bfa8      	it	ge
 8008bd6:	462b      	movge	r3, r5
 8008bd8:	1ad2      	subs	r2, r2, r3
 8008bda:	9204      	str	r2, [sp, #16]
 8008bdc:	9a05      	ldr	r2, [sp, #20]
 8008bde:	1aed      	subs	r5, r5, r3
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	9305      	str	r3, [sp, #20]
 8008be4:	9b07      	ldr	r3, [sp, #28]
 8008be6:	b31b      	cbz	r3, 8008c30 <_dtoa_r+0x7a0>
 8008be8:	9b08      	ldr	r3, [sp, #32]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f000 80af 	beq.w	8008d4e <_dtoa_r+0x8be>
 8008bf0:	2e00      	cmp	r6, #0
 8008bf2:	dd13      	ble.n	8008c1c <_dtoa_r+0x78c>
 8008bf4:	4639      	mov	r1, r7
 8008bf6:	4632      	mov	r2, r6
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	f000 fc09 	bl	8009410 <__pow5mult>
 8008bfe:	ee18 2a10 	vmov	r2, s16
 8008c02:	4601      	mov	r1, r0
 8008c04:	4607      	mov	r7, r0
 8008c06:	4620      	mov	r0, r4
 8008c08:	f000 fb58 	bl	80092bc <__multiply>
 8008c0c:	ee18 1a10 	vmov	r1, s16
 8008c10:	4680      	mov	r8, r0
 8008c12:	4620      	mov	r0, r4
 8008c14:	f000 fa84 	bl	8009120 <_Bfree>
 8008c18:	ee08 8a10 	vmov	s16, r8
 8008c1c:	9b07      	ldr	r3, [sp, #28]
 8008c1e:	1b9a      	subs	r2, r3, r6
 8008c20:	d006      	beq.n	8008c30 <_dtoa_r+0x7a0>
 8008c22:	ee18 1a10 	vmov	r1, s16
 8008c26:	4620      	mov	r0, r4
 8008c28:	f000 fbf2 	bl	8009410 <__pow5mult>
 8008c2c:	ee08 0a10 	vmov	s16, r0
 8008c30:	2101      	movs	r1, #1
 8008c32:	4620      	mov	r0, r4
 8008c34:	f000 fb2c 	bl	8009290 <__i2b>
 8008c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	4606      	mov	r6, r0
 8008c3e:	f340 8088 	ble.w	8008d52 <_dtoa_r+0x8c2>
 8008c42:	461a      	mov	r2, r3
 8008c44:	4601      	mov	r1, r0
 8008c46:	4620      	mov	r0, r4
 8008c48:	f000 fbe2 	bl	8009410 <__pow5mult>
 8008c4c:	9b06      	ldr	r3, [sp, #24]
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	4606      	mov	r6, r0
 8008c52:	f340 8081 	ble.w	8008d58 <_dtoa_r+0x8c8>
 8008c56:	f04f 0800 	mov.w	r8, #0
 8008c5a:	6933      	ldr	r3, [r6, #16]
 8008c5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008c60:	6918      	ldr	r0, [r3, #16]
 8008c62:	f000 fac5 	bl	80091f0 <__hi0bits>
 8008c66:	f1c0 0020 	rsb	r0, r0, #32
 8008c6a:	9b05      	ldr	r3, [sp, #20]
 8008c6c:	4418      	add	r0, r3
 8008c6e:	f010 001f 	ands.w	r0, r0, #31
 8008c72:	f000 8092 	beq.w	8008d9a <_dtoa_r+0x90a>
 8008c76:	f1c0 0320 	rsb	r3, r0, #32
 8008c7a:	2b04      	cmp	r3, #4
 8008c7c:	f340 808a 	ble.w	8008d94 <_dtoa_r+0x904>
 8008c80:	f1c0 001c 	rsb	r0, r0, #28
 8008c84:	9b04      	ldr	r3, [sp, #16]
 8008c86:	4403      	add	r3, r0
 8008c88:	9304      	str	r3, [sp, #16]
 8008c8a:	9b05      	ldr	r3, [sp, #20]
 8008c8c:	4403      	add	r3, r0
 8008c8e:	4405      	add	r5, r0
 8008c90:	9305      	str	r3, [sp, #20]
 8008c92:	9b04      	ldr	r3, [sp, #16]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	dd07      	ble.n	8008ca8 <_dtoa_r+0x818>
 8008c98:	ee18 1a10 	vmov	r1, s16
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	f000 fc10 	bl	80094c4 <__lshift>
 8008ca4:	ee08 0a10 	vmov	s16, r0
 8008ca8:	9b05      	ldr	r3, [sp, #20]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	dd05      	ble.n	8008cba <_dtoa_r+0x82a>
 8008cae:	4631      	mov	r1, r6
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f000 fc06 	bl	80094c4 <__lshift>
 8008cb8:	4606      	mov	r6, r0
 8008cba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d06e      	beq.n	8008d9e <_dtoa_r+0x90e>
 8008cc0:	ee18 0a10 	vmov	r0, s16
 8008cc4:	4631      	mov	r1, r6
 8008cc6:	f000 fc6d 	bl	80095a4 <__mcmp>
 8008cca:	2800      	cmp	r0, #0
 8008ccc:	da67      	bge.n	8008d9e <_dtoa_r+0x90e>
 8008cce:	9b00      	ldr	r3, [sp, #0]
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	ee18 1a10 	vmov	r1, s16
 8008cd6:	9300      	str	r3, [sp, #0]
 8008cd8:	220a      	movs	r2, #10
 8008cda:	2300      	movs	r3, #0
 8008cdc:	4620      	mov	r0, r4
 8008cde:	f000 fa41 	bl	8009164 <__multadd>
 8008ce2:	9b08      	ldr	r3, [sp, #32]
 8008ce4:	ee08 0a10 	vmov	s16, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	f000 81b1 	beq.w	8009050 <_dtoa_r+0xbc0>
 8008cee:	2300      	movs	r3, #0
 8008cf0:	4639      	mov	r1, r7
 8008cf2:	220a      	movs	r2, #10
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	f000 fa35 	bl	8009164 <__multadd>
 8008cfa:	9b02      	ldr	r3, [sp, #8]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	4607      	mov	r7, r0
 8008d00:	f300 808e 	bgt.w	8008e20 <_dtoa_r+0x990>
 8008d04:	9b06      	ldr	r3, [sp, #24]
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	dc51      	bgt.n	8008dae <_dtoa_r+0x91e>
 8008d0a:	e089      	b.n	8008e20 <_dtoa_r+0x990>
 8008d0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008d12:	e74b      	b.n	8008bac <_dtoa_r+0x71c>
 8008d14:	9b03      	ldr	r3, [sp, #12]
 8008d16:	1e5e      	subs	r6, r3, #1
 8008d18:	9b07      	ldr	r3, [sp, #28]
 8008d1a:	42b3      	cmp	r3, r6
 8008d1c:	bfbf      	itttt	lt
 8008d1e:	9b07      	ldrlt	r3, [sp, #28]
 8008d20:	9607      	strlt	r6, [sp, #28]
 8008d22:	1af2      	sublt	r2, r6, r3
 8008d24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008d26:	bfb6      	itet	lt
 8008d28:	189b      	addlt	r3, r3, r2
 8008d2a:	1b9e      	subge	r6, r3, r6
 8008d2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008d2e:	9b03      	ldr	r3, [sp, #12]
 8008d30:	bfb8      	it	lt
 8008d32:	2600      	movlt	r6, #0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	bfb7      	itett	lt
 8008d38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008d3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008d40:	1a9d      	sublt	r5, r3, r2
 8008d42:	2300      	movlt	r3, #0
 8008d44:	e734      	b.n	8008bb0 <_dtoa_r+0x720>
 8008d46:	9e07      	ldr	r6, [sp, #28]
 8008d48:	9d04      	ldr	r5, [sp, #16]
 8008d4a:	9f08      	ldr	r7, [sp, #32]
 8008d4c:	e73b      	b.n	8008bc6 <_dtoa_r+0x736>
 8008d4e:	9a07      	ldr	r2, [sp, #28]
 8008d50:	e767      	b.n	8008c22 <_dtoa_r+0x792>
 8008d52:	9b06      	ldr	r3, [sp, #24]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	dc18      	bgt.n	8008d8a <_dtoa_r+0x8fa>
 8008d58:	f1ba 0f00 	cmp.w	sl, #0
 8008d5c:	d115      	bne.n	8008d8a <_dtoa_r+0x8fa>
 8008d5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d62:	b993      	cbnz	r3, 8008d8a <_dtoa_r+0x8fa>
 8008d64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008d68:	0d1b      	lsrs	r3, r3, #20
 8008d6a:	051b      	lsls	r3, r3, #20
 8008d6c:	b183      	cbz	r3, 8008d90 <_dtoa_r+0x900>
 8008d6e:	9b04      	ldr	r3, [sp, #16]
 8008d70:	3301      	adds	r3, #1
 8008d72:	9304      	str	r3, [sp, #16]
 8008d74:	9b05      	ldr	r3, [sp, #20]
 8008d76:	3301      	adds	r3, #1
 8008d78:	9305      	str	r3, [sp, #20]
 8008d7a:	f04f 0801 	mov.w	r8, #1
 8008d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	f47f af6a 	bne.w	8008c5a <_dtoa_r+0x7ca>
 8008d86:	2001      	movs	r0, #1
 8008d88:	e76f      	b.n	8008c6a <_dtoa_r+0x7da>
 8008d8a:	f04f 0800 	mov.w	r8, #0
 8008d8e:	e7f6      	b.n	8008d7e <_dtoa_r+0x8ee>
 8008d90:	4698      	mov	r8, r3
 8008d92:	e7f4      	b.n	8008d7e <_dtoa_r+0x8ee>
 8008d94:	f43f af7d 	beq.w	8008c92 <_dtoa_r+0x802>
 8008d98:	4618      	mov	r0, r3
 8008d9a:	301c      	adds	r0, #28
 8008d9c:	e772      	b.n	8008c84 <_dtoa_r+0x7f4>
 8008d9e:	9b03      	ldr	r3, [sp, #12]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	dc37      	bgt.n	8008e14 <_dtoa_r+0x984>
 8008da4:	9b06      	ldr	r3, [sp, #24]
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	dd34      	ble.n	8008e14 <_dtoa_r+0x984>
 8008daa:	9b03      	ldr	r3, [sp, #12]
 8008dac:	9302      	str	r3, [sp, #8]
 8008dae:	9b02      	ldr	r3, [sp, #8]
 8008db0:	b96b      	cbnz	r3, 8008dce <_dtoa_r+0x93e>
 8008db2:	4631      	mov	r1, r6
 8008db4:	2205      	movs	r2, #5
 8008db6:	4620      	mov	r0, r4
 8008db8:	f000 f9d4 	bl	8009164 <__multadd>
 8008dbc:	4601      	mov	r1, r0
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	ee18 0a10 	vmov	r0, s16
 8008dc4:	f000 fbee 	bl	80095a4 <__mcmp>
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	f73f adbb 	bgt.w	8008944 <_dtoa_r+0x4b4>
 8008dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dd0:	9d01      	ldr	r5, [sp, #4]
 8008dd2:	43db      	mvns	r3, r3
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	f04f 0800 	mov.w	r8, #0
 8008dda:	4631      	mov	r1, r6
 8008ddc:	4620      	mov	r0, r4
 8008dde:	f000 f99f 	bl	8009120 <_Bfree>
 8008de2:	2f00      	cmp	r7, #0
 8008de4:	f43f aea4 	beq.w	8008b30 <_dtoa_r+0x6a0>
 8008de8:	f1b8 0f00 	cmp.w	r8, #0
 8008dec:	d005      	beq.n	8008dfa <_dtoa_r+0x96a>
 8008dee:	45b8      	cmp	r8, r7
 8008df0:	d003      	beq.n	8008dfa <_dtoa_r+0x96a>
 8008df2:	4641      	mov	r1, r8
 8008df4:	4620      	mov	r0, r4
 8008df6:	f000 f993 	bl	8009120 <_Bfree>
 8008dfa:	4639      	mov	r1, r7
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	f000 f98f 	bl	8009120 <_Bfree>
 8008e02:	e695      	b.n	8008b30 <_dtoa_r+0x6a0>
 8008e04:	2600      	movs	r6, #0
 8008e06:	4637      	mov	r7, r6
 8008e08:	e7e1      	b.n	8008dce <_dtoa_r+0x93e>
 8008e0a:	9700      	str	r7, [sp, #0]
 8008e0c:	4637      	mov	r7, r6
 8008e0e:	e599      	b.n	8008944 <_dtoa_r+0x4b4>
 8008e10:	40240000 	.word	0x40240000
 8008e14:	9b08      	ldr	r3, [sp, #32]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f000 80ca 	beq.w	8008fb0 <_dtoa_r+0xb20>
 8008e1c:	9b03      	ldr	r3, [sp, #12]
 8008e1e:	9302      	str	r3, [sp, #8]
 8008e20:	2d00      	cmp	r5, #0
 8008e22:	dd05      	ble.n	8008e30 <_dtoa_r+0x9a0>
 8008e24:	4639      	mov	r1, r7
 8008e26:	462a      	mov	r2, r5
 8008e28:	4620      	mov	r0, r4
 8008e2a:	f000 fb4b 	bl	80094c4 <__lshift>
 8008e2e:	4607      	mov	r7, r0
 8008e30:	f1b8 0f00 	cmp.w	r8, #0
 8008e34:	d05b      	beq.n	8008eee <_dtoa_r+0xa5e>
 8008e36:	6879      	ldr	r1, [r7, #4]
 8008e38:	4620      	mov	r0, r4
 8008e3a:	f000 f931 	bl	80090a0 <_Balloc>
 8008e3e:	4605      	mov	r5, r0
 8008e40:	b928      	cbnz	r0, 8008e4e <_dtoa_r+0x9be>
 8008e42:	4b87      	ldr	r3, [pc, #540]	; (8009060 <_dtoa_r+0xbd0>)
 8008e44:	4602      	mov	r2, r0
 8008e46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008e4a:	f7ff bb3b 	b.w	80084c4 <_dtoa_r+0x34>
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	3202      	adds	r2, #2
 8008e52:	0092      	lsls	r2, r2, #2
 8008e54:	f107 010c 	add.w	r1, r7, #12
 8008e58:	300c      	adds	r0, #12
 8008e5a:	f000 f913 	bl	8009084 <memcpy>
 8008e5e:	2201      	movs	r2, #1
 8008e60:	4629      	mov	r1, r5
 8008e62:	4620      	mov	r0, r4
 8008e64:	f000 fb2e 	bl	80094c4 <__lshift>
 8008e68:	9b01      	ldr	r3, [sp, #4]
 8008e6a:	f103 0901 	add.w	r9, r3, #1
 8008e6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008e72:	4413      	add	r3, r2
 8008e74:	9305      	str	r3, [sp, #20]
 8008e76:	f00a 0301 	and.w	r3, sl, #1
 8008e7a:	46b8      	mov	r8, r7
 8008e7c:	9304      	str	r3, [sp, #16]
 8008e7e:	4607      	mov	r7, r0
 8008e80:	4631      	mov	r1, r6
 8008e82:	ee18 0a10 	vmov	r0, s16
 8008e86:	f7ff fa75 	bl	8008374 <quorem>
 8008e8a:	4641      	mov	r1, r8
 8008e8c:	9002      	str	r0, [sp, #8]
 8008e8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008e92:	ee18 0a10 	vmov	r0, s16
 8008e96:	f000 fb85 	bl	80095a4 <__mcmp>
 8008e9a:	463a      	mov	r2, r7
 8008e9c:	9003      	str	r0, [sp, #12]
 8008e9e:	4631      	mov	r1, r6
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f000 fb9b 	bl	80095dc <__mdiff>
 8008ea6:	68c2      	ldr	r2, [r0, #12]
 8008ea8:	f109 3bff 	add.w	fp, r9, #4294967295
 8008eac:	4605      	mov	r5, r0
 8008eae:	bb02      	cbnz	r2, 8008ef2 <_dtoa_r+0xa62>
 8008eb0:	4601      	mov	r1, r0
 8008eb2:	ee18 0a10 	vmov	r0, s16
 8008eb6:	f000 fb75 	bl	80095a4 <__mcmp>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	4629      	mov	r1, r5
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	9207      	str	r2, [sp, #28]
 8008ec2:	f000 f92d 	bl	8009120 <_Bfree>
 8008ec6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008eca:	ea43 0102 	orr.w	r1, r3, r2
 8008ece:	9b04      	ldr	r3, [sp, #16]
 8008ed0:	430b      	orrs	r3, r1
 8008ed2:	464d      	mov	r5, r9
 8008ed4:	d10f      	bne.n	8008ef6 <_dtoa_r+0xa66>
 8008ed6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008eda:	d02a      	beq.n	8008f32 <_dtoa_r+0xaa2>
 8008edc:	9b03      	ldr	r3, [sp, #12]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	dd02      	ble.n	8008ee8 <_dtoa_r+0xa58>
 8008ee2:	9b02      	ldr	r3, [sp, #8]
 8008ee4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008ee8:	f88b a000 	strb.w	sl, [fp]
 8008eec:	e775      	b.n	8008dda <_dtoa_r+0x94a>
 8008eee:	4638      	mov	r0, r7
 8008ef0:	e7ba      	b.n	8008e68 <_dtoa_r+0x9d8>
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	e7e2      	b.n	8008ebc <_dtoa_r+0xa2c>
 8008ef6:	9b03      	ldr	r3, [sp, #12]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	db04      	blt.n	8008f06 <_dtoa_r+0xa76>
 8008efc:	9906      	ldr	r1, [sp, #24]
 8008efe:	430b      	orrs	r3, r1
 8008f00:	9904      	ldr	r1, [sp, #16]
 8008f02:	430b      	orrs	r3, r1
 8008f04:	d122      	bne.n	8008f4c <_dtoa_r+0xabc>
 8008f06:	2a00      	cmp	r2, #0
 8008f08:	ddee      	ble.n	8008ee8 <_dtoa_r+0xa58>
 8008f0a:	ee18 1a10 	vmov	r1, s16
 8008f0e:	2201      	movs	r2, #1
 8008f10:	4620      	mov	r0, r4
 8008f12:	f000 fad7 	bl	80094c4 <__lshift>
 8008f16:	4631      	mov	r1, r6
 8008f18:	ee08 0a10 	vmov	s16, r0
 8008f1c:	f000 fb42 	bl	80095a4 <__mcmp>
 8008f20:	2800      	cmp	r0, #0
 8008f22:	dc03      	bgt.n	8008f2c <_dtoa_r+0xa9c>
 8008f24:	d1e0      	bne.n	8008ee8 <_dtoa_r+0xa58>
 8008f26:	f01a 0f01 	tst.w	sl, #1
 8008f2a:	d0dd      	beq.n	8008ee8 <_dtoa_r+0xa58>
 8008f2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008f30:	d1d7      	bne.n	8008ee2 <_dtoa_r+0xa52>
 8008f32:	2339      	movs	r3, #57	; 0x39
 8008f34:	f88b 3000 	strb.w	r3, [fp]
 8008f38:	462b      	mov	r3, r5
 8008f3a:	461d      	mov	r5, r3
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008f42:	2a39      	cmp	r2, #57	; 0x39
 8008f44:	d071      	beq.n	800902a <_dtoa_r+0xb9a>
 8008f46:	3201      	adds	r2, #1
 8008f48:	701a      	strb	r2, [r3, #0]
 8008f4a:	e746      	b.n	8008dda <_dtoa_r+0x94a>
 8008f4c:	2a00      	cmp	r2, #0
 8008f4e:	dd07      	ble.n	8008f60 <_dtoa_r+0xad0>
 8008f50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008f54:	d0ed      	beq.n	8008f32 <_dtoa_r+0xaa2>
 8008f56:	f10a 0301 	add.w	r3, sl, #1
 8008f5a:	f88b 3000 	strb.w	r3, [fp]
 8008f5e:	e73c      	b.n	8008dda <_dtoa_r+0x94a>
 8008f60:	9b05      	ldr	r3, [sp, #20]
 8008f62:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008f66:	4599      	cmp	r9, r3
 8008f68:	d047      	beq.n	8008ffa <_dtoa_r+0xb6a>
 8008f6a:	ee18 1a10 	vmov	r1, s16
 8008f6e:	2300      	movs	r3, #0
 8008f70:	220a      	movs	r2, #10
 8008f72:	4620      	mov	r0, r4
 8008f74:	f000 f8f6 	bl	8009164 <__multadd>
 8008f78:	45b8      	cmp	r8, r7
 8008f7a:	ee08 0a10 	vmov	s16, r0
 8008f7e:	f04f 0300 	mov.w	r3, #0
 8008f82:	f04f 020a 	mov.w	r2, #10
 8008f86:	4641      	mov	r1, r8
 8008f88:	4620      	mov	r0, r4
 8008f8a:	d106      	bne.n	8008f9a <_dtoa_r+0xb0a>
 8008f8c:	f000 f8ea 	bl	8009164 <__multadd>
 8008f90:	4680      	mov	r8, r0
 8008f92:	4607      	mov	r7, r0
 8008f94:	f109 0901 	add.w	r9, r9, #1
 8008f98:	e772      	b.n	8008e80 <_dtoa_r+0x9f0>
 8008f9a:	f000 f8e3 	bl	8009164 <__multadd>
 8008f9e:	4639      	mov	r1, r7
 8008fa0:	4680      	mov	r8, r0
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	220a      	movs	r2, #10
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	f000 f8dc 	bl	8009164 <__multadd>
 8008fac:	4607      	mov	r7, r0
 8008fae:	e7f1      	b.n	8008f94 <_dtoa_r+0xb04>
 8008fb0:	9b03      	ldr	r3, [sp, #12]
 8008fb2:	9302      	str	r3, [sp, #8]
 8008fb4:	9d01      	ldr	r5, [sp, #4]
 8008fb6:	ee18 0a10 	vmov	r0, s16
 8008fba:	4631      	mov	r1, r6
 8008fbc:	f7ff f9da 	bl	8008374 <quorem>
 8008fc0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008fc4:	9b01      	ldr	r3, [sp, #4]
 8008fc6:	f805 ab01 	strb.w	sl, [r5], #1
 8008fca:	1aea      	subs	r2, r5, r3
 8008fcc:	9b02      	ldr	r3, [sp, #8]
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	dd09      	ble.n	8008fe6 <_dtoa_r+0xb56>
 8008fd2:	ee18 1a10 	vmov	r1, s16
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	220a      	movs	r2, #10
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f000 f8c2 	bl	8009164 <__multadd>
 8008fe0:	ee08 0a10 	vmov	s16, r0
 8008fe4:	e7e7      	b.n	8008fb6 <_dtoa_r+0xb26>
 8008fe6:	9b02      	ldr	r3, [sp, #8]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	bfc8      	it	gt
 8008fec:	461d      	movgt	r5, r3
 8008fee:	9b01      	ldr	r3, [sp, #4]
 8008ff0:	bfd8      	it	le
 8008ff2:	2501      	movle	r5, #1
 8008ff4:	441d      	add	r5, r3
 8008ff6:	f04f 0800 	mov.w	r8, #0
 8008ffa:	ee18 1a10 	vmov	r1, s16
 8008ffe:	2201      	movs	r2, #1
 8009000:	4620      	mov	r0, r4
 8009002:	f000 fa5f 	bl	80094c4 <__lshift>
 8009006:	4631      	mov	r1, r6
 8009008:	ee08 0a10 	vmov	s16, r0
 800900c:	f000 faca 	bl	80095a4 <__mcmp>
 8009010:	2800      	cmp	r0, #0
 8009012:	dc91      	bgt.n	8008f38 <_dtoa_r+0xaa8>
 8009014:	d102      	bne.n	800901c <_dtoa_r+0xb8c>
 8009016:	f01a 0f01 	tst.w	sl, #1
 800901a:	d18d      	bne.n	8008f38 <_dtoa_r+0xaa8>
 800901c:	462b      	mov	r3, r5
 800901e:	461d      	mov	r5, r3
 8009020:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009024:	2a30      	cmp	r2, #48	; 0x30
 8009026:	d0fa      	beq.n	800901e <_dtoa_r+0xb8e>
 8009028:	e6d7      	b.n	8008dda <_dtoa_r+0x94a>
 800902a:	9a01      	ldr	r2, [sp, #4]
 800902c:	429a      	cmp	r2, r3
 800902e:	d184      	bne.n	8008f3a <_dtoa_r+0xaaa>
 8009030:	9b00      	ldr	r3, [sp, #0]
 8009032:	3301      	adds	r3, #1
 8009034:	9300      	str	r3, [sp, #0]
 8009036:	2331      	movs	r3, #49	; 0x31
 8009038:	7013      	strb	r3, [r2, #0]
 800903a:	e6ce      	b.n	8008dda <_dtoa_r+0x94a>
 800903c:	4b09      	ldr	r3, [pc, #36]	; (8009064 <_dtoa_r+0xbd4>)
 800903e:	f7ff ba95 	b.w	800856c <_dtoa_r+0xdc>
 8009042:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009044:	2b00      	cmp	r3, #0
 8009046:	f47f aa6e 	bne.w	8008526 <_dtoa_r+0x96>
 800904a:	4b07      	ldr	r3, [pc, #28]	; (8009068 <_dtoa_r+0xbd8>)
 800904c:	f7ff ba8e 	b.w	800856c <_dtoa_r+0xdc>
 8009050:	9b02      	ldr	r3, [sp, #8]
 8009052:	2b00      	cmp	r3, #0
 8009054:	dcae      	bgt.n	8008fb4 <_dtoa_r+0xb24>
 8009056:	9b06      	ldr	r3, [sp, #24]
 8009058:	2b02      	cmp	r3, #2
 800905a:	f73f aea8 	bgt.w	8008dae <_dtoa_r+0x91e>
 800905e:	e7a9      	b.n	8008fb4 <_dtoa_r+0xb24>
 8009060:	0800a5f3 	.word	0x0800a5f3
 8009064:	0800a550 	.word	0x0800a550
 8009068:	0800a574 	.word	0x0800a574

0800906c <_localeconv_r>:
 800906c:	4800      	ldr	r0, [pc, #0]	; (8009070 <_localeconv_r+0x4>)
 800906e:	4770      	bx	lr
 8009070:	20000160 	.word	0x20000160

08009074 <malloc>:
 8009074:	4b02      	ldr	r3, [pc, #8]	; (8009080 <malloc+0xc>)
 8009076:	4601      	mov	r1, r0
 8009078:	6818      	ldr	r0, [r3, #0]
 800907a:	f000 bc17 	b.w	80098ac <_malloc_r>
 800907e:	bf00      	nop
 8009080:	2000000c 	.word	0x2000000c

08009084 <memcpy>:
 8009084:	440a      	add	r2, r1
 8009086:	4291      	cmp	r1, r2
 8009088:	f100 33ff 	add.w	r3, r0, #4294967295
 800908c:	d100      	bne.n	8009090 <memcpy+0xc>
 800908e:	4770      	bx	lr
 8009090:	b510      	push	{r4, lr}
 8009092:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009096:	f803 4f01 	strb.w	r4, [r3, #1]!
 800909a:	4291      	cmp	r1, r2
 800909c:	d1f9      	bne.n	8009092 <memcpy+0xe>
 800909e:	bd10      	pop	{r4, pc}

080090a0 <_Balloc>:
 80090a0:	b570      	push	{r4, r5, r6, lr}
 80090a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80090a4:	4604      	mov	r4, r0
 80090a6:	460d      	mov	r5, r1
 80090a8:	b976      	cbnz	r6, 80090c8 <_Balloc+0x28>
 80090aa:	2010      	movs	r0, #16
 80090ac:	f7ff ffe2 	bl	8009074 <malloc>
 80090b0:	4602      	mov	r2, r0
 80090b2:	6260      	str	r0, [r4, #36]	; 0x24
 80090b4:	b920      	cbnz	r0, 80090c0 <_Balloc+0x20>
 80090b6:	4b18      	ldr	r3, [pc, #96]	; (8009118 <_Balloc+0x78>)
 80090b8:	4818      	ldr	r0, [pc, #96]	; (800911c <_Balloc+0x7c>)
 80090ba:	2166      	movs	r1, #102	; 0x66
 80090bc:	f000 fc7a 	bl	80099b4 <__assert_func>
 80090c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090c4:	6006      	str	r6, [r0, #0]
 80090c6:	60c6      	str	r6, [r0, #12]
 80090c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80090ca:	68f3      	ldr	r3, [r6, #12]
 80090cc:	b183      	cbz	r3, 80090f0 <_Balloc+0x50>
 80090ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090d6:	b9b8      	cbnz	r0, 8009108 <_Balloc+0x68>
 80090d8:	2101      	movs	r1, #1
 80090da:	fa01 f605 	lsl.w	r6, r1, r5
 80090de:	1d72      	adds	r2, r6, #5
 80090e0:	0092      	lsls	r2, r2, #2
 80090e2:	4620      	mov	r0, r4
 80090e4:	f000 fb60 	bl	80097a8 <_calloc_r>
 80090e8:	b160      	cbz	r0, 8009104 <_Balloc+0x64>
 80090ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80090ee:	e00e      	b.n	800910e <_Balloc+0x6e>
 80090f0:	2221      	movs	r2, #33	; 0x21
 80090f2:	2104      	movs	r1, #4
 80090f4:	4620      	mov	r0, r4
 80090f6:	f000 fb57 	bl	80097a8 <_calloc_r>
 80090fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090fc:	60f0      	str	r0, [r6, #12]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1e4      	bne.n	80090ce <_Balloc+0x2e>
 8009104:	2000      	movs	r0, #0
 8009106:	bd70      	pop	{r4, r5, r6, pc}
 8009108:	6802      	ldr	r2, [r0, #0]
 800910a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800910e:	2300      	movs	r3, #0
 8009110:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009114:	e7f7      	b.n	8009106 <_Balloc+0x66>
 8009116:	bf00      	nop
 8009118:	0800a581 	.word	0x0800a581
 800911c:	0800a604 	.word	0x0800a604

08009120 <_Bfree>:
 8009120:	b570      	push	{r4, r5, r6, lr}
 8009122:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009124:	4605      	mov	r5, r0
 8009126:	460c      	mov	r4, r1
 8009128:	b976      	cbnz	r6, 8009148 <_Bfree+0x28>
 800912a:	2010      	movs	r0, #16
 800912c:	f7ff ffa2 	bl	8009074 <malloc>
 8009130:	4602      	mov	r2, r0
 8009132:	6268      	str	r0, [r5, #36]	; 0x24
 8009134:	b920      	cbnz	r0, 8009140 <_Bfree+0x20>
 8009136:	4b09      	ldr	r3, [pc, #36]	; (800915c <_Bfree+0x3c>)
 8009138:	4809      	ldr	r0, [pc, #36]	; (8009160 <_Bfree+0x40>)
 800913a:	218a      	movs	r1, #138	; 0x8a
 800913c:	f000 fc3a 	bl	80099b4 <__assert_func>
 8009140:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009144:	6006      	str	r6, [r0, #0]
 8009146:	60c6      	str	r6, [r0, #12]
 8009148:	b13c      	cbz	r4, 800915a <_Bfree+0x3a>
 800914a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800914c:	6862      	ldr	r2, [r4, #4]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009154:	6021      	str	r1, [r4, #0]
 8009156:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800915a:	bd70      	pop	{r4, r5, r6, pc}
 800915c:	0800a581 	.word	0x0800a581
 8009160:	0800a604 	.word	0x0800a604

08009164 <__multadd>:
 8009164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009168:	690d      	ldr	r5, [r1, #16]
 800916a:	4607      	mov	r7, r0
 800916c:	460c      	mov	r4, r1
 800916e:	461e      	mov	r6, r3
 8009170:	f101 0c14 	add.w	ip, r1, #20
 8009174:	2000      	movs	r0, #0
 8009176:	f8dc 3000 	ldr.w	r3, [ip]
 800917a:	b299      	uxth	r1, r3
 800917c:	fb02 6101 	mla	r1, r2, r1, r6
 8009180:	0c1e      	lsrs	r6, r3, #16
 8009182:	0c0b      	lsrs	r3, r1, #16
 8009184:	fb02 3306 	mla	r3, r2, r6, r3
 8009188:	b289      	uxth	r1, r1
 800918a:	3001      	adds	r0, #1
 800918c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009190:	4285      	cmp	r5, r0
 8009192:	f84c 1b04 	str.w	r1, [ip], #4
 8009196:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800919a:	dcec      	bgt.n	8009176 <__multadd+0x12>
 800919c:	b30e      	cbz	r6, 80091e2 <__multadd+0x7e>
 800919e:	68a3      	ldr	r3, [r4, #8]
 80091a0:	42ab      	cmp	r3, r5
 80091a2:	dc19      	bgt.n	80091d8 <__multadd+0x74>
 80091a4:	6861      	ldr	r1, [r4, #4]
 80091a6:	4638      	mov	r0, r7
 80091a8:	3101      	adds	r1, #1
 80091aa:	f7ff ff79 	bl	80090a0 <_Balloc>
 80091ae:	4680      	mov	r8, r0
 80091b0:	b928      	cbnz	r0, 80091be <__multadd+0x5a>
 80091b2:	4602      	mov	r2, r0
 80091b4:	4b0c      	ldr	r3, [pc, #48]	; (80091e8 <__multadd+0x84>)
 80091b6:	480d      	ldr	r0, [pc, #52]	; (80091ec <__multadd+0x88>)
 80091b8:	21b5      	movs	r1, #181	; 0xb5
 80091ba:	f000 fbfb 	bl	80099b4 <__assert_func>
 80091be:	6922      	ldr	r2, [r4, #16]
 80091c0:	3202      	adds	r2, #2
 80091c2:	f104 010c 	add.w	r1, r4, #12
 80091c6:	0092      	lsls	r2, r2, #2
 80091c8:	300c      	adds	r0, #12
 80091ca:	f7ff ff5b 	bl	8009084 <memcpy>
 80091ce:	4621      	mov	r1, r4
 80091d0:	4638      	mov	r0, r7
 80091d2:	f7ff ffa5 	bl	8009120 <_Bfree>
 80091d6:	4644      	mov	r4, r8
 80091d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80091dc:	3501      	adds	r5, #1
 80091de:	615e      	str	r6, [r3, #20]
 80091e0:	6125      	str	r5, [r4, #16]
 80091e2:	4620      	mov	r0, r4
 80091e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091e8:	0800a5f3 	.word	0x0800a5f3
 80091ec:	0800a604 	.word	0x0800a604

080091f0 <__hi0bits>:
 80091f0:	0c03      	lsrs	r3, r0, #16
 80091f2:	041b      	lsls	r3, r3, #16
 80091f4:	b9d3      	cbnz	r3, 800922c <__hi0bits+0x3c>
 80091f6:	0400      	lsls	r0, r0, #16
 80091f8:	2310      	movs	r3, #16
 80091fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80091fe:	bf04      	itt	eq
 8009200:	0200      	lsleq	r0, r0, #8
 8009202:	3308      	addeq	r3, #8
 8009204:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009208:	bf04      	itt	eq
 800920a:	0100      	lsleq	r0, r0, #4
 800920c:	3304      	addeq	r3, #4
 800920e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009212:	bf04      	itt	eq
 8009214:	0080      	lsleq	r0, r0, #2
 8009216:	3302      	addeq	r3, #2
 8009218:	2800      	cmp	r0, #0
 800921a:	db05      	blt.n	8009228 <__hi0bits+0x38>
 800921c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009220:	f103 0301 	add.w	r3, r3, #1
 8009224:	bf08      	it	eq
 8009226:	2320      	moveq	r3, #32
 8009228:	4618      	mov	r0, r3
 800922a:	4770      	bx	lr
 800922c:	2300      	movs	r3, #0
 800922e:	e7e4      	b.n	80091fa <__hi0bits+0xa>

08009230 <__lo0bits>:
 8009230:	6803      	ldr	r3, [r0, #0]
 8009232:	f013 0207 	ands.w	r2, r3, #7
 8009236:	4601      	mov	r1, r0
 8009238:	d00b      	beq.n	8009252 <__lo0bits+0x22>
 800923a:	07da      	lsls	r2, r3, #31
 800923c:	d423      	bmi.n	8009286 <__lo0bits+0x56>
 800923e:	0798      	lsls	r0, r3, #30
 8009240:	bf49      	itett	mi
 8009242:	085b      	lsrmi	r3, r3, #1
 8009244:	089b      	lsrpl	r3, r3, #2
 8009246:	2001      	movmi	r0, #1
 8009248:	600b      	strmi	r3, [r1, #0]
 800924a:	bf5c      	itt	pl
 800924c:	600b      	strpl	r3, [r1, #0]
 800924e:	2002      	movpl	r0, #2
 8009250:	4770      	bx	lr
 8009252:	b298      	uxth	r0, r3
 8009254:	b9a8      	cbnz	r0, 8009282 <__lo0bits+0x52>
 8009256:	0c1b      	lsrs	r3, r3, #16
 8009258:	2010      	movs	r0, #16
 800925a:	b2da      	uxtb	r2, r3
 800925c:	b90a      	cbnz	r2, 8009262 <__lo0bits+0x32>
 800925e:	3008      	adds	r0, #8
 8009260:	0a1b      	lsrs	r3, r3, #8
 8009262:	071a      	lsls	r2, r3, #28
 8009264:	bf04      	itt	eq
 8009266:	091b      	lsreq	r3, r3, #4
 8009268:	3004      	addeq	r0, #4
 800926a:	079a      	lsls	r2, r3, #30
 800926c:	bf04      	itt	eq
 800926e:	089b      	lsreq	r3, r3, #2
 8009270:	3002      	addeq	r0, #2
 8009272:	07da      	lsls	r2, r3, #31
 8009274:	d403      	bmi.n	800927e <__lo0bits+0x4e>
 8009276:	085b      	lsrs	r3, r3, #1
 8009278:	f100 0001 	add.w	r0, r0, #1
 800927c:	d005      	beq.n	800928a <__lo0bits+0x5a>
 800927e:	600b      	str	r3, [r1, #0]
 8009280:	4770      	bx	lr
 8009282:	4610      	mov	r0, r2
 8009284:	e7e9      	b.n	800925a <__lo0bits+0x2a>
 8009286:	2000      	movs	r0, #0
 8009288:	4770      	bx	lr
 800928a:	2020      	movs	r0, #32
 800928c:	4770      	bx	lr
	...

08009290 <__i2b>:
 8009290:	b510      	push	{r4, lr}
 8009292:	460c      	mov	r4, r1
 8009294:	2101      	movs	r1, #1
 8009296:	f7ff ff03 	bl	80090a0 <_Balloc>
 800929a:	4602      	mov	r2, r0
 800929c:	b928      	cbnz	r0, 80092aa <__i2b+0x1a>
 800929e:	4b05      	ldr	r3, [pc, #20]	; (80092b4 <__i2b+0x24>)
 80092a0:	4805      	ldr	r0, [pc, #20]	; (80092b8 <__i2b+0x28>)
 80092a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80092a6:	f000 fb85 	bl	80099b4 <__assert_func>
 80092aa:	2301      	movs	r3, #1
 80092ac:	6144      	str	r4, [r0, #20]
 80092ae:	6103      	str	r3, [r0, #16]
 80092b0:	bd10      	pop	{r4, pc}
 80092b2:	bf00      	nop
 80092b4:	0800a5f3 	.word	0x0800a5f3
 80092b8:	0800a604 	.word	0x0800a604

080092bc <__multiply>:
 80092bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c0:	4691      	mov	r9, r2
 80092c2:	690a      	ldr	r2, [r1, #16]
 80092c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	bfb8      	it	lt
 80092cc:	460b      	movlt	r3, r1
 80092ce:	460c      	mov	r4, r1
 80092d0:	bfbc      	itt	lt
 80092d2:	464c      	movlt	r4, r9
 80092d4:	4699      	movlt	r9, r3
 80092d6:	6927      	ldr	r7, [r4, #16]
 80092d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80092dc:	68a3      	ldr	r3, [r4, #8]
 80092de:	6861      	ldr	r1, [r4, #4]
 80092e0:	eb07 060a 	add.w	r6, r7, sl
 80092e4:	42b3      	cmp	r3, r6
 80092e6:	b085      	sub	sp, #20
 80092e8:	bfb8      	it	lt
 80092ea:	3101      	addlt	r1, #1
 80092ec:	f7ff fed8 	bl	80090a0 <_Balloc>
 80092f0:	b930      	cbnz	r0, 8009300 <__multiply+0x44>
 80092f2:	4602      	mov	r2, r0
 80092f4:	4b44      	ldr	r3, [pc, #272]	; (8009408 <__multiply+0x14c>)
 80092f6:	4845      	ldr	r0, [pc, #276]	; (800940c <__multiply+0x150>)
 80092f8:	f240 115d 	movw	r1, #349	; 0x15d
 80092fc:	f000 fb5a 	bl	80099b4 <__assert_func>
 8009300:	f100 0514 	add.w	r5, r0, #20
 8009304:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009308:	462b      	mov	r3, r5
 800930a:	2200      	movs	r2, #0
 800930c:	4543      	cmp	r3, r8
 800930e:	d321      	bcc.n	8009354 <__multiply+0x98>
 8009310:	f104 0314 	add.w	r3, r4, #20
 8009314:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009318:	f109 0314 	add.w	r3, r9, #20
 800931c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009320:	9202      	str	r2, [sp, #8]
 8009322:	1b3a      	subs	r2, r7, r4
 8009324:	3a15      	subs	r2, #21
 8009326:	f022 0203 	bic.w	r2, r2, #3
 800932a:	3204      	adds	r2, #4
 800932c:	f104 0115 	add.w	r1, r4, #21
 8009330:	428f      	cmp	r7, r1
 8009332:	bf38      	it	cc
 8009334:	2204      	movcc	r2, #4
 8009336:	9201      	str	r2, [sp, #4]
 8009338:	9a02      	ldr	r2, [sp, #8]
 800933a:	9303      	str	r3, [sp, #12]
 800933c:	429a      	cmp	r2, r3
 800933e:	d80c      	bhi.n	800935a <__multiply+0x9e>
 8009340:	2e00      	cmp	r6, #0
 8009342:	dd03      	ble.n	800934c <__multiply+0x90>
 8009344:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009348:	2b00      	cmp	r3, #0
 800934a:	d05a      	beq.n	8009402 <__multiply+0x146>
 800934c:	6106      	str	r6, [r0, #16]
 800934e:	b005      	add	sp, #20
 8009350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009354:	f843 2b04 	str.w	r2, [r3], #4
 8009358:	e7d8      	b.n	800930c <__multiply+0x50>
 800935a:	f8b3 a000 	ldrh.w	sl, [r3]
 800935e:	f1ba 0f00 	cmp.w	sl, #0
 8009362:	d024      	beq.n	80093ae <__multiply+0xf2>
 8009364:	f104 0e14 	add.w	lr, r4, #20
 8009368:	46a9      	mov	r9, r5
 800936a:	f04f 0c00 	mov.w	ip, #0
 800936e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009372:	f8d9 1000 	ldr.w	r1, [r9]
 8009376:	fa1f fb82 	uxth.w	fp, r2
 800937a:	b289      	uxth	r1, r1
 800937c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009380:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009384:	f8d9 2000 	ldr.w	r2, [r9]
 8009388:	4461      	add	r1, ip
 800938a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800938e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009392:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009396:	b289      	uxth	r1, r1
 8009398:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800939c:	4577      	cmp	r7, lr
 800939e:	f849 1b04 	str.w	r1, [r9], #4
 80093a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80093a6:	d8e2      	bhi.n	800936e <__multiply+0xb2>
 80093a8:	9a01      	ldr	r2, [sp, #4]
 80093aa:	f845 c002 	str.w	ip, [r5, r2]
 80093ae:	9a03      	ldr	r2, [sp, #12]
 80093b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80093b4:	3304      	adds	r3, #4
 80093b6:	f1b9 0f00 	cmp.w	r9, #0
 80093ba:	d020      	beq.n	80093fe <__multiply+0x142>
 80093bc:	6829      	ldr	r1, [r5, #0]
 80093be:	f104 0c14 	add.w	ip, r4, #20
 80093c2:	46ae      	mov	lr, r5
 80093c4:	f04f 0a00 	mov.w	sl, #0
 80093c8:	f8bc b000 	ldrh.w	fp, [ip]
 80093cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80093d0:	fb09 220b 	mla	r2, r9, fp, r2
 80093d4:	4492      	add	sl, r2
 80093d6:	b289      	uxth	r1, r1
 80093d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80093dc:	f84e 1b04 	str.w	r1, [lr], #4
 80093e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80093e4:	f8be 1000 	ldrh.w	r1, [lr]
 80093e8:	0c12      	lsrs	r2, r2, #16
 80093ea:	fb09 1102 	mla	r1, r9, r2, r1
 80093ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80093f2:	4567      	cmp	r7, ip
 80093f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80093f8:	d8e6      	bhi.n	80093c8 <__multiply+0x10c>
 80093fa:	9a01      	ldr	r2, [sp, #4]
 80093fc:	50a9      	str	r1, [r5, r2]
 80093fe:	3504      	adds	r5, #4
 8009400:	e79a      	b.n	8009338 <__multiply+0x7c>
 8009402:	3e01      	subs	r6, #1
 8009404:	e79c      	b.n	8009340 <__multiply+0x84>
 8009406:	bf00      	nop
 8009408:	0800a5f3 	.word	0x0800a5f3
 800940c:	0800a604 	.word	0x0800a604

08009410 <__pow5mult>:
 8009410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009414:	4615      	mov	r5, r2
 8009416:	f012 0203 	ands.w	r2, r2, #3
 800941a:	4606      	mov	r6, r0
 800941c:	460f      	mov	r7, r1
 800941e:	d007      	beq.n	8009430 <__pow5mult+0x20>
 8009420:	4c25      	ldr	r4, [pc, #148]	; (80094b8 <__pow5mult+0xa8>)
 8009422:	3a01      	subs	r2, #1
 8009424:	2300      	movs	r3, #0
 8009426:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800942a:	f7ff fe9b 	bl	8009164 <__multadd>
 800942e:	4607      	mov	r7, r0
 8009430:	10ad      	asrs	r5, r5, #2
 8009432:	d03d      	beq.n	80094b0 <__pow5mult+0xa0>
 8009434:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009436:	b97c      	cbnz	r4, 8009458 <__pow5mult+0x48>
 8009438:	2010      	movs	r0, #16
 800943a:	f7ff fe1b 	bl	8009074 <malloc>
 800943e:	4602      	mov	r2, r0
 8009440:	6270      	str	r0, [r6, #36]	; 0x24
 8009442:	b928      	cbnz	r0, 8009450 <__pow5mult+0x40>
 8009444:	4b1d      	ldr	r3, [pc, #116]	; (80094bc <__pow5mult+0xac>)
 8009446:	481e      	ldr	r0, [pc, #120]	; (80094c0 <__pow5mult+0xb0>)
 8009448:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800944c:	f000 fab2 	bl	80099b4 <__assert_func>
 8009450:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009454:	6004      	str	r4, [r0, #0]
 8009456:	60c4      	str	r4, [r0, #12]
 8009458:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800945c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009460:	b94c      	cbnz	r4, 8009476 <__pow5mult+0x66>
 8009462:	f240 2171 	movw	r1, #625	; 0x271
 8009466:	4630      	mov	r0, r6
 8009468:	f7ff ff12 	bl	8009290 <__i2b>
 800946c:	2300      	movs	r3, #0
 800946e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009472:	4604      	mov	r4, r0
 8009474:	6003      	str	r3, [r0, #0]
 8009476:	f04f 0900 	mov.w	r9, #0
 800947a:	07eb      	lsls	r3, r5, #31
 800947c:	d50a      	bpl.n	8009494 <__pow5mult+0x84>
 800947e:	4639      	mov	r1, r7
 8009480:	4622      	mov	r2, r4
 8009482:	4630      	mov	r0, r6
 8009484:	f7ff ff1a 	bl	80092bc <__multiply>
 8009488:	4639      	mov	r1, r7
 800948a:	4680      	mov	r8, r0
 800948c:	4630      	mov	r0, r6
 800948e:	f7ff fe47 	bl	8009120 <_Bfree>
 8009492:	4647      	mov	r7, r8
 8009494:	106d      	asrs	r5, r5, #1
 8009496:	d00b      	beq.n	80094b0 <__pow5mult+0xa0>
 8009498:	6820      	ldr	r0, [r4, #0]
 800949a:	b938      	cbnz	r0, 80094ac <__pow5mult+0x9c>
 800949c:	4622      	mov	r2, r4
 800949e:	4621      	mov	r1, r4
 80094a0:	4630      	mov	r0, r6
 80094a2:	f7ff ff0b 	bl	80092bc <__multiply>
 80094a6:	6020      	str	r0, [r4, #0]
 80094a8:	f8c0 9000 	str.w	r9, [r0]
 80094ac:	4604      	mov	r4, r0
 80094ae:	e7e4      	b.n	800947a <__pow5mult+0x6a>
 80094b0:	4638      	mov	r0, r7
 80094b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094b6:	bf00      	nop
 80094b8:	0800a750 	.word	0x0800a750
 80094bc:	0800a581 	.word	0x0800a581
 80094c0:	0800a604 	.word	0x0800a604

080094c4 <__lshift>:
 80094c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094c8:	460c      	mov	r4, r1
 80094ca:	6849      	ldr	r1, [r1, #4]
 80094cc:	6923      	ldr	r3, [r4, #16]
 80094ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80094d2:	68a3      	ldr	r3, [r4, #8]
 80094d4:	4607      	mov	r7, r0
 80094d6:	4691      	mov	r9, r2
 80094d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80094dc:	f108 0601 	add.w	r6, r8, #1
 80094e0:	42b3      	cmp	r3, r6
 80094e2:	db0b      	blt.n	80094fc <__lshift+0x38>
 80094e4:	4638      	mov	r0, r7
 80094e6:	f7ff fddb 	bl	80090a0 <_Balloc>
 80094ea:	4605      	mov	r5, r0
 80094ec:	b948      	cbnz	r0, 8009502 <__lshift+0x3e>
 80094ee:	4602      	mov	r2, r0
 80094f0:	4b2a      	ldr	r3, [pc, #168]	; (800959c <__lshift+0xd8>)
 80094f2:	482b      	ldr	r0, [pc, #172]	; (80095a0 <__lshift+0xdc>)
 80094f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80094f8:	f000 fa5c 	bl	80099b4 <__assert_func>
 80094fc:	3101      	adds	r1, #1
 80094fe:	005b      	lsls	r3, r3, #1
 8009500:	e7ee      	b.n	80094e0 <__lshift+0x1c>
 8009502:	2300      	movs	r3, #0
 8009504:	f100 0114 	add.w	r1, r0, #20
 8009508:	f100 0210 	add.w	r2, r0, #16
 800950c:	4618      	mov	r0, r3
 800950e:	4553      	cmp	r3, sl
 8009510:	db37      	blt.n	8009582 <__lshift+0xbe>
 8009512:	6920      	ldr	r0, [r4, #16]
 8009514:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009518:	f104 0314 	add.w	r3, r4, #20
 800951c:	f019 091f 	ands.w	r9, r9, #31
 8009520:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009524:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009528:	d02f      	beq.n	800958a <__lshift+0xc6>
 800952a:	f1c9 0e20 	rsb	lr, r9, #32
 800952e:	468a      	mov	sl, r1
 8009530:	f04f 0c00 	mov.w	ip, #0
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	fa02 f209 	lsl.w	r2, r2, r9
 800953a:	ea42 020c 	orr.w	r2, r2, ip
 800953e:	f84a 2b04 	str.w	r2, [sl], #4
 8009542:	f853 2b04 	ldr.w	r2, [r3], #4
 8009546:	4298      	cmp	r0, r3
 8009548:	fa22 fc0e 	lsr.w	ip, r2, lr
 800954c:	d8f2      	bhi.n	8009534 <__lshift+0x70>
 800954e:	1b03      	subs	r3, r0, r4
 8009550:	3b15      	subs	r3, #21
 8009552:	f023 0303 	bic.w	r3, r3, #3
 8009556:	3304      	adds	r3, #4
 8009558:	f104 0215 	add.w	r2, r4, #21
 800955c:	4290      	cmp	r0, r2
 800955e:	bf38      	it	cc
 8009560:	2304      	movcc	r3, #4
 8009562:	f841 c003 	str.w	ip, [r1, r3]
 8009566:	f1bc 0f00 	cmp.w	ip, #0
 800956a:	d001      	beq.n	8009570 <__lshift+0xac>
 800956c:	f108 0602 	add.w	r6, r8, #2
 8009570:	3e01      	subs	r6, #1
 8009572:	4638      	mov	r0, r7
 8009574:	612e      	str	r6, [r5, #16]
 8009576:	4621      	mov	r1, r4
 8009578:	f7ff fdd2 	bl	8009120 <_Bfree>
 800957c:	4628      	mov	r0, r5
 800957e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009582:	f842 0f04 	str.w	r0, [r2, #4]!
 8009586:	3301      	adds	r3, #1
 8009588:	e7c1      	b.n	800950e <__lshift+0x4a>
 800958a:	3904      	subs	r1, #4
 800958c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009590:	f841 2f04 	str.w	r2, [r1, #4]!
 8009594:	4298      	cmp	r0, r3
 8009596:	d8f9      	bhi.n	800958c <__lshift+0xc8>
 8009598:	e7ea      	b.n	8009570 <__lshift+0xac>
 800959a:	bf00      	nop
 800959c:	0800a5f3 	.word	0x0800a5f3
 80095a0:	0800a604 	.word	0x0800a604

080095a4 <__mcmp>:
 80095a4:	b530      	push	{r4, r5, lr}
 80095a6:	6902      	ldr	r2, [r0, #16]
 80095a8:	690c      	ldr	r4, [r1, #16]
 80095aa:	1b12      	subs	r2, r2, r4
 80095ac:	d10e      	bne.n	80095cc <__mcmp+0x28>
 80095ae:	f100 0314 	add.w	r3, r0, #20
 80095b2:	3114      	adds	r1, #20
 80095b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80095b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80095bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80095c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80095c4:	42a5      	cmp	r5, r4
 80095c6:	d003      	beq.n	80095d0 <__mcmp+0x2c>
 80095c8:	d305      	bcc.n	80095d6 <__mcmp+0x32>
 80095ca:	2201      	movs	r2, #1
 80095cc:	4610      	mov	r0, r2
 80095ce:	bd30      	pop	{r4, r5, pc}
 80095d0:	4283      	cmp	r3, r0
 80095d2:	d3f3      	bcc.n	80095bc <__mcmp+0x18>
 80095d4:	e7fa      	b.n	80095cc <__mcmp+0x28>
 80095d6:	f04f 32ff 	mov.w	r2, #4294967295
 80095da:	e7f7      	b.n	80095cc <__mcmp+0x28>

080095dc <__mdiff>:
 80095dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e0:	460c      	mov	r4, r1
 80095e2:	4606      	mov	r6, r0
 80095e4:	4611      	mov	r1, r2
 80095e6:	4620      	mov	r0, r4
 80095e8:	4690      	mov	r8, r2
 80095ea:	f7ff ffdb 	bl	80095a4 <__mcmp>
 80095ee:	1e05      	subs	r5, r0, #0
 80095f0:	d110      	bne.n	8009614 <__mdiff+0x38>
 80095f2:	4629      	mov	r1, r5
 80095f4:	4630      	mov	r0, r6
 80095f6:	f7ff fd53 	bl	80090a0 <_Balloc>
 80095fa:	b930      	cbnz	r0, 800960a <__mdiff+0x2e>
 80095fc:	4b3a      	ldr	r3, [pc, #232]	; (80096e8 <__mdiff+0x10c>)
 80095fe:	4602      	mov	r2, r0
 8009600:	f240 2132 	movw	r1, #562	; 0x232
 8009604:	4839      	ldr	r0, [pc, #228]	; (80096ec <__mdiff+0x110>)
 8009606:	f000 f9d5 	bl	80099b4 <__assert_func>
 800960a:	2301      	movs	r3, #1
 800960c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009610:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009614:	bfa4      	itt	ge
 8009616:	4643      	movge	r3, r8
 8009618:	46a0      	movge	r8, r4
 800961a:	4630      	mov	r0, r6
 800961c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009620:	bfa6      	itte	ge
 8009622:	461c      	movge	r4, r3
 8009624:	2500      	movge	r5, #0
 8009626:	2501      	movlt	r5, #1
 8009628:	f7ff fd3a 	bl	80090a0 <_Balloc>
 800962c:	b920      	cbnz	r0, 8009638 <__mdiff+0x5c>
 800962e:	4b2e      	ldr	r3, [pc, #184]	; (80096e8 <__mdiff+0x10c>)
 8009630:	4602      	mov	r2, r0
 8009632:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009636:	e7e5      	b.n	8009604 <__mdiff+0x28>
 8009638:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800963c:	6926      	ldr	r6, [r4, #16]
 800963e:	60c5      	str	r5, [r0, #12]
 8009640:	f104 0914 	add.w	r9, r4, #20
 8009644:	f108 0514 	add.w	r5, r8, #20
 8009648:	f100 0e14 	add.w	lr, r0, #20
 800964c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009650:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009654:	f108 0210 	add.w	r2, r8, #16
 8009658:	46f2      	mov	sl, lr
 800965a:	2100      	movs	r1, #0
 800965c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009660:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009664:	fa1f f883 	uxth.w	r8, r3
 8009668:	fa11 f18b 	uxtah	r1, r1, fp
 800966c:	0c1b      	lsrs	r3, r3, #16
 800966e:	eba1 0808 	sub.w	r8, r1, r8
 8009672:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009676:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800967a:	fa1f f888 	uxth.w	r8, r8
 800967e:	1419      	asrs	r1, r3, #16
 8009680:	454e      	cmp	r6, r9
 8009682:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009686:	f84a 3b04 	str.w	r3, [sl], #4
 800968a:	d8e7      	bhi.n	800965c <__mdiff+0x80>
 800968c:	1b33      	subs	r3, r6, r4
 800968e:	3b15      	subs	r3, #21
 8009690:	f023 0303 	bic.w	r3, r3, #3
 8009694:	3304      	adds	r3, #4
 8009696:	3415      	adds	r4, #21
 8009698:	42a6      	cmp	r6, r4
 800969a:	bf38      	it	cc
 800969c:	2304      	movcc	r3, #4
 800969e:	441d      	add	r5, r3
 80096a0:	4473      	add	r3, lr
 80096a2:	469e      	mov	lr, r3
 80096a4:	462e      	mov	r6, r5
 80096a6:	4566      	cmp	r6, ip
 80096a8:	d30e      	bcc.n	80096c8 <__mdiff+0xec>
 80096aa:	f10c 0203 	add.w	r2, ip, #3
 80096ae:	1b52      	subs	r2, r2, r5
 80096b0:	f022 0203 	bic.w	r2, r2, #3
 80096b4:	3d03      	subs	r5, #3
 80096b6:	45ac      	cmp	ip, r5
 80096b8:	bf38      	it	cc
 80096ba:	2200      	movcc	r2, #0
 80096bc:	441a      	add	r2, r3
 80096be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80096c2:	b17b      	cbz	r3, 80096e4 <__mdiff+0x108>
 80096c4:	6107      	str	r7, [r0, #16]
 80096c6:	e7a3      	b.n	8009610 <__mdiff+0x34>
 80096c8:	f856 8b04 	ldr.w	r8, [r6], #4
 80096cc:	fa11 f288 	uxtah	r2, r1, r8
 80096d0:	1414      	asrs	r4, r2, #16
 80096d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80096d6:	b292      	uxth	r2, r2
 80096d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80096dc:	f84e 2b04 	str.w	r2, [lr], #4
 80096e0:	1421      	asrs	r1, r4, #16
 80096e2:	e7e0      	b.n	80096a6 <__mdiff+0xca>
 80096e4:	3f01      	subs	r7, #1
 80096e6:	e7ea      	b.n	80096be <__mdiff+0xe2>
 80096e8:	0800a5f3 	.word	0x0800a5f3
 80096ec:	0800a604 	.word	0x0800a604

080096f0 <__d2b>:
 80096f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80096f4:	4689      	mov	r9, r1
 80096f6:	2101      	movs	r1, #1
 80096f8:	ec57 6b10 	vmov	r6, r7, d0
 80096fc:	4690      	mov	r8, r2
 80096fe:	f7ff fccf 	bl	80090a0 <_Balloc>
 8009702:	4604      	mov	r4, r0
 8009704:	b930      	cbnz	r0, 8009714 <__d2b+0x24>
 8009706:	4602      	mov	r2, r0
 8009708:	4b25      	ldr	r3, [pc, #148]	; (80097a0 <__d2b+0xb0>)
 800970a:	4826      	ldr	r0, [pc, #152]	; (80097a4 <__d2b+0xb4>)
 800970c:	f240 310a 	movw	r1, #778	; 0x30a
 8009710:	f000 f950 	bl	80099b4 <__assert_func>
 8009714:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009718:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800971c:	bb35      	cbnz	r5, 800976c <__d2b+0x7c>
 800971e:	2e00      	cmp	r6, #0
 8009720:	9301      	str	r3, [sp, #4]
 8009722:	d028      	beq.n	8009776 <__d2b+0x86>
 8009724:	4668      	mov	r0, sp
 8009726:	9600      	str	r6, [sp, #0]
 8009728:	f7ff fd82 	bl	8009230 <__lo0bits>
 800972c:	9900      	ldr	r1, [sp, #0]
 800972e:	b300      	cbz	r0, 8009772 <__d2b+0x82>
 8009730:	9a01      	ldr	r2, [sp, #4]
 8009732:	f1c0 0320 	rsb	r3, r0, #32
 8009736:	fa02 f303 	lsl.w	r3, r2, r3
 800973a:	430b      	orrs	r3, r1
 800973c:	40c2      	lsrs	r2, r0
 800973e:	6163      	str	r3, [r4, #20]
 8009740:	9201      	str	r2, [sp, #4]
 8009742:	9b01      	ldr	r3, [sp, #4]
 8009744:	61a3      	str	r3, [r4, #24]
 8009746:	2b00      	cmp	r3, #0
 8009748:	bf14      	ite	ne
 800974a:	2202      	movne	r2, #2
 800974c:	2201      	moveq	r2, #1
 800974e:	6122      	str	r2, [r4, #16]
 8009750:	b1d5      	cbz	r5, 8009788 <__d2b+0x98>
 8009752:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009756:	4405      	add	r5, r0
 8009758:	f8c9 5000 	str.w	r5, [r9]
 800975c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009760:	f8c8 0000 	str.w	r0, [r8]
 8009764:	4620      	mov	r0, r4
 8009766:	b003      	add	sp, #12
 8009768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800976c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009770:	e7d5      	b.n	800971e <__d2b+0x2e>
 8009772:	6161      	str	r1, [r4, #20]
 8009774:	e7e5      	b.n	8009742 <__d2b+0x52>
 8009776:	a801      	add	r0, sp, #4
 8009778:	f7ff fd5a 	bl	8009230 <__lo0bits>
 800977c:	9b01      	ldr	r3, [sp, #4]
 800977e:	6163      	str	r3, [r4, #20]
 8009780:	2201      	movs	r2, #1
 8009782:	6122      	str	r2, [r4, #16]
 8009784:	3020      	adds	r0, #32
 8009786:	e7e3      	b.n	8009750 <__d2b+0x60>
 8009788:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800978c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009790:	f8c9 0000 	str.w	r0, [r9]
 8009794:	6918      	ldr	r0, [r3, #16]
 8009796:	f7ff fd2b 	bl	80091f0 <__hi0bits>
 800979a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800979e:	e7df      	b.n	8009760 <__d2b+0x70>
 80097a0:	0800a5f3 	.word	0x0800a5f3
 80097a4:	0800a604 	.word	0x0800a604

080097a8 <_calloc_r>:
 80097a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097aa:	fba1 2402 	umull	r2, r4, r1, r2
 80097ae:	b94c      	cbnz	r4, 80097c4 <_calloc_r+0x1c>
 80097b0:	4611      	mov	r1, r2
 80097b2:	9201      	str	r2, [sp, #4]
 80097b4:	f000 f87a 	bl	80098ac <_malloc_r>
 80097b8:	9a01      	ldr	r2, [sp, #4]
 80097ba:	4605      	mov	r5, r0
 80097bc:	b930      	cbnz	r0, 80097cc <_calloc_r+0x24>
 80097be:	4628      	mov	r0, r5
 80097c0:	b003      	add	sp, #12
 80097c2:	bd30      	pop	{r4, r5, pc}
 80097c4:	220c      	movs	r2, #12
 80097c6:	6002      	str	r2, [r0, #0]
 80097c8:	2500      	movs	r5, #0
 80097ca:	e7f8      	b.n	80097be <_calloc_r+0x16>
 80097cc:	4621      	mov	r1, r4
 80097ce:	f7fe f95f 	bl	8007a90 <memset>
 80097d2:	e7f4      	b.n	80097be <_calloc_r+0x16>

080097d4 <_free_r>:
 80097d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097d6:	2900      	cmp	r1, #0
 80097d8:	d044      	beq.n	8009864 <_free_r+0x90>
 80097da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097de:	9001      	str	r0, [sp, #4]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f1a1 0404 	sub.w	r4, r1, #4
 80097e6:	bfb8      	it	lt
 80097e8:	18e4      	addlt	r4, r4, r3
 80097ea:	f000 f925 	bl	8009a38 <__malloc_lock>
 80097ee:	4a1e      	ldr	r2, [pc, #120]	; (8009868 <_free_r+0x94>)
 80097f0:	9801      	ldr	r0, [sp, #4]
 80097f2:	6813      	ldr	r3, [r2, #0]
 80097f4:	b933      	cbnz	r3, 8009804 <_free_r+0x30>
 80097f6:	6063      	str	r3, [r4, #4]
 80097f8:	6014      	str	r4, [r2, #0]
 80097fa:	b003      	add	sp, #12
 80097fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009800:	f000 b920 	b.w	8009a44 <__malloc_unlock>
 8009804:	42a3      	cmp	r3, r4
 8009806:	d908      	bls.n	800981a <_free_r+0x46>
 8009808:	6825      	ldr	r5, [r4, #0]
 800980a:	1961      	adds	r1, r4, r5
 800980c:	428b      	cmp	r3, r1
 800980e:	bf01      	itttt	eq
 8009810:	6819      	ldreq	r1, [r3, #0]
 8009812:	685b      	ldreq	r3, [r3, #4]
 8009814:	1949      	addeq	r1, r1, r5
 8009816:	6021      	streq	r1, [r4, #0]
 8009818:	e7ed      	b.n	80097f6 <_free_r+0x22>
 800981a:	461a      	mov	r2, r3
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	b10b      	cbz	r3, 8009824 <_free_r+0x50>
 8009820:	42a3      	cmp	r3, r4
 8009822:	d9fa      	bls.n	800981a <_free_r+0x46>
 8009824:	6811      	ldr	r1, [r2, #0]
 8009826:	1855      	adds	r5, r2, r1
 8009828:	42a5      	cmp	r5, r4
 800982a:	d10b      	bne.n	8009844 <_free_r+0x70>
 800982c:	6824      	ldr	r4, [r4, #0]
 800982e:	4421      	add	r1, r4
 8009830:	1854      	adds	r4, r2, r1
 8009832:	42a3      	cmp	r3, r4
 8009834:	6011      	str	r1, [r2, #0]
 8009836:	d1e0      	bne.n	80097fa <_free_r+0x26>
 8009838:	681c      	ldr	r4, [r3, #0]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	6053      	str	r3, [r2, #4]
 800983e:	4421      	add	r1, r4
 8009840:	6011      	str	r1, [r2, #0]
 8009842:	e7da      	b.n	80097fa <_free_r+0x26>
 8009844:	d902      	bls.n	800984c <_free_r+0x78>
 8009846:	230c      	movs	r3, #12
 8009848:	6003      	str	r3, [r0, #0]
 800984a:	e7d6      	b.n	80097fa <_free_r+0x26>
 800984c:	6825      	ldr	r5, [r4, #0]
 800984e:	1961      	adds	r1, r4, r5
 8009850:	428b      	cmp	r3, r1
 8009852:	bf04      	itt	eq
 8009854:	6819      	ldreq	r1, [r3, #0]
 8009856:	685b      	ldreq	r3, [r3, #4]
 8009858:	6063      	str	r3, [r4, #4]
 800985a:	bf04      	itt	eq
 800985c:	1949      	addeq	r1, r1, r5
 800985e:	6021      	streq	r1, [r4, #0]
 8009860:	6054      	str	r4, [r2, #4]
 8009862:	e7ca      	b.n	80097fa <_free_r+0x26>
 8009864:	b003      	add	sp, #12
 8009866:	bd30      	pop	{r4, r5, pc}
 8009868:	200003bc 	.word	0x200003bc

0800986c <sbrk_aligned>:
 800986c:	b570      	push	{r4, r5, r6, lr}
 800986e:	4e0e      	ldr	r6, [pc, #56]	; (80098a8 <sbrk_aligned+0x3c>)
 8009870:	460c      	mov	r4, r1
 8009872:	6831      	ldr	r1, [r6, #0]
 8009874:	4605      	mov	r5, r0
 8009876:	b911      	cbnz	r1, 800987e <sbrk_aligned+0x12>
 8009878:	f000 f88c 	bl	8009994 <_sbrk_r>
 800987c:	6030      	str	r0, [r6, #0]
 800987e:	4621      	mov	r1, r4
 8009880:	4628      	mov	r0, r5
 8009882:	f000 f887 	bl	8009994 <_sbrk_r>
 8009886:	1c43      	adds	r3, r0, #1
 8009888:	d00a      	beq.n	80098a0 <sbrk_aligned+0x34>
 800988a:	1cc4      	adds	r4, r0, #3
 800988c:	f024 0403 	bic.w	r4, r4, #3
 8009890:	42a0      	cmp	r0, r4
 8009892:	d007      	beq.n	80098a4 <sbrk_aligned+0x38>
 8009894:	1a21      	subs	r1, r4, r0
 8009896:	4628      	mov	r0, r5
 8009898:	f000 f87c 	bl	8009994 <_sbrk_r>
 800989c:	3001      	adds	r0, #1
 800989e:	d101      	bne.n	80098a4 <sbrk_aligned+0x38>
 80098a0:	f04f 34ff 	mov.w	r4, #4294967295
 80098a4:	4620      	mov	r0, r4
 80098a6:	bd70      	pop	{r4, r5, r6, pc}
 80098a8:	200003c0 	.word	0x200003c0

080098ac <_malloc_r>:
 80098ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098b0:	1ccd      	adds	r5, r1, #3
 80098b2:	f025 0503 	bic.w	r5, r5, #3
 80098b6:	3508      	adds	r5, #8
 80098b8:	2d0c      	cmp	r5, #12
 80098ba:	bf38      	it	cc
 80098bc:	250c      	movcc	r5, #12
 80098be:	2d00      	cmp	r5, #0
 80098c0:	4607      	mov	r7, r0
 80098c2:	db01      	blt.n	80098c8 <_malloc_r+0x1c>
 80098c4:	42a9      	cmp	r1, r5
 80098c6:	d905      	bls.n	80098d4 <_malloc_r+0x28>
 80098c8:	230c      	movs	r3, #12
 80098ca:	603b      	str	r3, [r7, #0]
 80098cc:	2600      	movs	r6, #0
 80098ce:	4630      	mov	r0, r6
 80098d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098d4:	4e2e      	ldr	r6, [pc, #184]	; (8009990 <_malloc_r+0xe4>)
 80098d6:	f000 f8af 	bl	8009a38 <__malloc_lock>
 80098da:	6833      	ldr	r3, [r6, #0]
 80098dc:	461c      	mov	r4, r3
 80098de:	bb34      	cbnz	r4, 800992e <_malloc_r+0x82>
 80098e0:	4629      	mov	r1, r5
 80098e2:	4638      	mov	r0, r7
 80098e4:	f7ff ffc2 	bl	800986c <sbrk_aligned>
 80098e8:	1c43      	adds	r3, r0, #1
 80098ea:	4604      	mov	r4, r0
 80098ec:	d14d      	bne.n	800998a <_malloc_r+0xde>
 80098ee:	6834      	ldr	r4, [r6, #0]
 80098f0:	4626      	mov	r6, r4
 80098f2:	2e00      	cmp	r6, #0
 80098f4:	d140      	bne.n	8009978 <_malloc_r+0xcc>
 80098f6:	6823      	ldr	r3, [r4, #0]
 80098f8:	4631      	mov	r1, r6
 80098fa:	4638      	mov	r0, r7
 80098fc:	eb04 0803 	add.w	r8, r4, r3
 8009900:	f000 f848 	bl	8009994 <_sbrk_r>
 8009904:	4580      	cmp	r8, r0
 8009906:	d13a      	bne.n	800997e <_malloc_r+0xd2>
 8009908:	6821      	ldr	r1, [r4, #0]
 800990a:	3503      	adds	r5, #3
 800990c:	1a6d      	subs	r5, r5, r1
 800990e:	f025 0503 	bic.w	r5, r5, #3
 8009912:	3508      	adds	r5, #8
 8009914:	2d0c      	cmp	r5, #12
 8009916:	bf38      	it	cc
 8009918:	250c      	movcc	r5, #12
 800991a:	4629      	mov	r1, r5
 800991c:	4638      	mov	r0, r7
 800991e:	f7ff ffa5 	bl	800986c <sbrk_aligned>
 8009922:	3001      	adds	r0, #1
 8009924:	d02b      	beq.n	800997e <_malloc_r+0xd2>
 8009926:	6823      	ldr	r3, [r4, #0]
 8009928:	442b      	add	r3, r5
 800992a:	6023      	str	r3, [r4, #0]
 800992c:	e00e      	b.n	800994c <_malloc_r+0xa0>
 800992e:	6822      	ldr	r2, [r4, #0]
 8009930:	1b52      	subs	r2, r2, r5
 8009932:	d41e      	bmi.n	8009972 <_malloc_r+0xc6>
 8009934:	2a0b      	cmp	r2, #11
 8009936:	d916      	bls.n	8009966 <_malloc_r+0xba>
 8009938:	1961      	adds	r1, r4, r5
 800993a:	42a3      	cmp	r3, r4
 800993c:	6025      	str	r5, [r4, #0]
 800993e:	bf18      	it	ne
 8009940:	6059      	strne	r1, [r3, #4]
 8009942:	6863      	ldr	r3, [r4, #4]
 8009944:	bf08      	it	eq
 8009946:	6031      	streq	r1, [r6, #0]
 8009948:	5162      	str	r2, [r4, r5]
 800994a:	604b      	str	r3, [r1, #4]
 800994c:	4638      	mov	r0, r7
 800994e:	f104 060b 	add.w	r6, r4, #11
 8009952:	f000 f877 	bl	8009a44 <__malloc_unlock>
 8009956:	f026 0607 	bic.w	r6, r6, #7
 800995a:	1d23      	adds	r3, r4, #4
 800995c:	1af2      	subs	r2, r6, r3
 800995e:	d0b6      	beq.n	80098ce <_malloc_r+0x22>
 8009960:	1b9b      	subs	r3, r3, r6
 8009962:	50a3      	str	r3, [r4, r2]
 8009964:	e7b3      	b.n	80098ce <_malloc_r+0x22>
 8009966:	6862      	ldr	r2, [r4, #4]
 8009968:	42a3      	cmp	r3, r4
 800996a:	bf0c      	ite	eq
 800996c:	6032      	streq	r2, [r6, #0]
 800996e:	605a      	strne	r2, [r3, #4]
 8009970:	e7ec      	b.n	800994c <_malloc_r+0xa0>
 8009972:	4623      	mov	r3, r4
 8009974:	6864      	ldr	r4, [r4, #4]
 8009976:	e7b2      	b.n	80098de <_malloc_r+0x32>
 8009978:	4634      	mov	r4, r6
 800997a:	6876      	ldr	r6, [r6, #4]
 800997c:	e7b9      	b.n	80098f2 <_malloc_r+0x46>
 800997e:	230c      	movs	r3, #12
 8009980:	603b      	str	r3, [r7, #0]
 8009982:	4638      	mov	r0, r7
 8009984:	f000 f85e 	bl	8009a44 <__malloc_unlock>
 8009988:	e7a1      	b.n	80098ce <_malloc_r+0x22>
 800998a:	6025      	str	r5, [r4, #0]
 800998c:	e7de      	b.n	800994c <_malloc_r+0xa0>
 800998e:	bf00      	nop
 8009990:	200003bc 	.word	0x200003bc

08009994 <_sbrk_r>:
 8009994:	b538      	push	{r3, r4, r5, lr}
 8009996:	4d06      	ldr	r5, [pc, #24]	; (80099b0 <_sbrk_r+0x1c>)
 8009998:	2300      	movs	r3, #0
 800999a:	4604      	mov	r4, r0
 800999c:	4608      	mov	r0, r1
 800999e:	602b      	str	r3, [r5, #0]
 80099a0:	f7f8 f80c 	bl	80019bc <_sbrk>
 80099a4:	1c43      	adds	r3, r0, #1
 80099a6:	d102      	bne.n	80099ae <_sbrk_r+0x1a>
 80099a8:	682b      	ldr	r3, [r5, #0]
 80099aa:	b103      	cbz	r3, 80099ae <_sbrk_r+0x1a>
 80099ac:	6023      	str	r3, [r4, #0]
 80099ae:	bd38      	pop	{r3, r4, r5, pc}
 80099b0:	200003c4 	.word	0x200003c4

080099b4 <__assert_func>:
 80099b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099b6:	4614      	mov	r4, r2
 80099b8:	461a      	mov	r2, r3
 80099ba:	4b09      	ldr	r3, [pc, #36]	; (80099e0 <__assert_func+0x2c>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4605      	mov	r5, r0
 80099c0:	68d8      	ldr	r0, [r3, #12]
 80099c2:	b14c      	cbz	r4, 80099d8 <__assert_func+0x24>
 80099c4:	4b07      	ldr	r3, [pc, #28]	; (80099e4 <__assert_func+0x30>)
 80099c6:	9100      	str	r1, [sp, #0]
 80099c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099cc:	4906      	ldr	r1, [pc, #24]	; (80099e8 <__assert_func+0x34>)
 80099ce:	462b      	mov	r3, r5
 80099d0:	f000 f80e 	bl	80099f0 <fiprintf>
 80099d4:	f000 fa64 	bl	8009ea0 <abort>
 80099d8:	4b04      	ldr	r3, [pc, #16]	; (80099ec <__assert_func+0x38>)
 80099da:	461c      	mov	r4, r3
 80099dc:	e7f3      	b.n	80099c6 <__assert_func+0x12>
 80099de:	bf00      	nop
 80099e0:	2000000c 	.word	0x2000000c
 80099e4:	0800a75c 	.word	0x0800a75c
 80099e8:	0800a769 	.word	0x0800a769
 80099ec:	0800a797 	.word	0x0800a797

080099f0 <fiprintf>:
 80099f0:	b40e      	push	{r1, r2, r3}
 80099f2:	b503      	push	{r0, r1, lr}
 80099f4:	4601      	mov	r1, r0
 80099f6:	ab03      	add	r3, sp, #12
 80099f8:	4805      	ldr	r0, [pc, #20]	; (8009a10 <fiprintf+0x20>)
 80099fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80099fe:	6800      	ldr	r0, [r0, #0]
 8009a00:	9301      	str	r3, [sp, #4]
 8009a02:	f000 f84f 	bl	8009aa4 <_vfiprintf_r>
 8009a06:	b002      	add	sp, #8
 8009a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a0c:	b003      	add	sp, #12
 8009a0e:	4770      	bx	lr
 8009a10:	2000000c 	.word	0x2000000c

08009a14 <__ascii_mbtowc>:
 8009a14:	b082      	sub	sp, #8
 8009a16:	b901      	cbnz	r1, 8009a1a <__ascii_mbtowc+0x6>
 8009a18:	a901      	add	r1, sp, #4
 8009a1a:	b142      	cbz	r2, 8009a2e <__ascii_mbtowc+0x1a>
 8009a1c:	b14b      	cbz	r3, 8009a32 <__ascii_mbtowc+0x1e>
 8009a1e:	7813      	ldrb	r3, [r2, #0]
 8009a20:	600b      	str	r3, [r1, #0]
 8009a22:	7812      	ldrb	r2, [r2, #0]
 8009a24:	1e10      	subs	r0, r2, #0
 8009a26:	bf18      	it	ne
 8009a28:	2001      	movne	r0, #1
 8009a2a:	b002      	add	sp, #8
 8009a2c:	4770      	bx	lr
 8009a2e:	4610      	mov	r0, r2
 8009a30:	e7fb      	b.n	8009a2a <__ascii_mbtowc+0x16>
 8009a32:	f06f 0001 	mvn.w	r0, #1
 8009a36:	e7f8      	b.n	8009a2a <__ascii_mbtowc+0x16>

08009a38 <__malloc_lock>:
 8009a38:	4801      	ldr	r0, [pc, #4]	; (8009a40 <__malloc_lock+0x8>)
 8009a3a:	f000 bbf1 	b.w	800a220 <__retarget_lock_acquire_recursive>
 8009a3e:	bf00      	nop
 8009a40:	200003c8 	.word	0x200003c8

08009a44 <__malloc_unlock>:
 8009a44:	4801      	ldr	r0, [pc, #4]	; (8009a4c <__malloc_unlock+0x8>)
 8009a46:	f000 bbec 	b.w	800a222 <__retarget_lock_release_recursive>
 8009a4a:	bf00      	nop
 8009a4c:	200003c8 	.word	0x200003c8

08009a50 <__sfputc_r>:
 8009a50:	6893      	ldr	r3, [r2, #8]
 8009a52:	3b01      	subs	r3, #1
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	b410      	push	{r4}
 8009a58:	6093      	str	r3, [r2, #8]
 8009a5a:	da08      	bge.n	8009a6e <__sfputc_r+0x1e>
 8009a5c:	6994      	ldr	r4, [r2, #24]
 8009a5e:	42a3      	cmp	r3, r4
 8009a60:	db01      	blt.n	8009a66 <__sfputc_r+0x16>
 8009a62:	290a      	cmp	r1, #10
 8009a64:	d103      	bne.n	8009a6e <__sfputc_r+0x1e>
 8009a66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a6a:	f000 b94b 	b.w	8009d04 <__swbuf_r>
 8009a6e:	6813      	ldr	r3, [r2, #0]
 8009a70:	1c58      	adds	r0, r3, #1
 8009a72:	6010      	str	r0, [r2, #0]
 8009a74:	7019      	strb	r1, [r3, #0]
 8009a76:	4608      	mov	r0, r1
 8009a78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a7c:	4770      	bx	lr

08009a7e <__sfputs_r>:
 8009a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a80:	4606      	mov	r6, r0
 8009a82:	460f      	mov	r7, r1
 8009a84:	4614      	mov	r4, r2
 8009a86:	18d5      	adds	r5, r2, r3
 8009a88:	42ac      	cmp	r4, r5
 8009a8a:	d101      	bne.n	8009a90 <__sfputs_r+0x12>
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	e007      	b.n	8009aa0 <__sfputs_r+0x22>
 8009a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a94:	463a      	mov	r2, r7
 8009a96:	4630      	mov	r0, r6
 8009a98:	f7ff ffda 	bl	8009a50 <__sfputc_r>
 8009a9c:	1c43      	adds	r3, r0, #1
 8009a9e:	d1f3      	bne.n	8009a88 <__sfputs_r+0xa>
 8009aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009aa4 <_vfiprintf_r>:
 8009aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa8:	460d      	mov	r5, r1
 8009aaa:	b09d      	sub	sp, #116	; 0x74
 8009aac:	4614      	mov	r4, r2
 8009aae:	4698      	mov	r8, r3
 8009ab0:	4606      	mov	r6, r0
 8009ab2:	b118      	cbz	r0, 8009abc <_vfiprintf_r+0x18>
 8009ab4:	6983      	ldr	r3, [r0, #24]
 8009ab6:	b90b      	cbnz	r3, 8009abc <_vfiprintf_r+0x18>
 8009ab8:	f000 fb14 	bl	800a0e4 <__sinit>
 8009abc:	4b89      	ldr	r3, [pc, #548]	; (8009ce4 <_vfiprintf_r+0x240>)
 8009abe:	429d      	cmp	r5, r3
 8009ac0:	d11b      	bne.n	8009afa <_vfiprintf_r+0x56>
 8009ac2:	6875      	ldr	r5, [r6, #4]
 8009ac4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ac6:	07d9      	lsls	r1, r3, #31
 8009ac8:	d405      	bmi.n	8009ad6 <_vfiprintf_r+0x32>
 8009aca:	89ab      	ldrh	r3, [r5, #12]
 8009acc:	059a      	lsls	r2, r3, #22
 8009ace:	d402      	bmi.n	8009ad6 <_vfiprintf_r+0x32>
 8009ad0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ad2:	f000 fba5 	bl	800a220 <__retarget_lock_acquire_recursive>
 8009ad6:	89ab      	ldrh	r3, [r5, #12]
 8009ad8:	071b      	lsls	r3, r3, #28
 8009ada:	d501      	bpl.n	8009ae0 <_vfiprintf_r+0x3c>
 8009adc:	692b      	ldr	r3, [r5, #16]
 8009ade:	b9eb      	cbnz	r3, 8009b1c <_vfiprintf_r+0x78>
 8009ae0:	4629      	mov	r1, r5
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	f000 f96e 	bl	8009dc4 <__swsetup_r>
 8009ae8:	b1c0      	cbz	r0, 8009b1c <_vfiprintf_r+0x78>
 8009aea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009aec:	07dc      	lsls	r4, r3, #31
 8009aee:	d50e      	bpl.n	8009b0e <_vfiprintf_r+0x6a>
 8009af0:	f04f 30ff 	mov.w	r0, #4294967295
 8009af4:	b01d      	add	sp, #116	; 0x74
 8009af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009afa:	4b7b      	ldr	r3, [pc, #492]	; (8009ce8 <_vfiprintf_r+0x244>)
 8009afc:	429d      	cmp	r5, r3
 8009afe:	d101      	bne.n	8009b04 <_vfiprintf_r+0x60>
 8009b00:	68b5      	ldr	r5, [r6, #8]
 8009b02:	e7df      	b.n	8009ac4 <_vfiprintf_r+0x20>
 8009b04:	4b79      	ldr	r3, [pc, #484]	; (8009cec <_vfiprintf_r+0x248>)
 8009b06:	429d      	cmp	r5, r3
 8009b08:	bf08      	it	eq
 8009b0a:	68f5      	ldreq	r5, [r6, #12]
 8009b0c:	e7da      	b.n	8009ac4 <_vfiprintf_r+0x20>
 8009b0e:	89ab      	ldrh	r3, [r5, #12]
 8009b10:	0598      	lsls	r0, r3, #22
 8009b12:	d4ed      	bmi.n	8009af0 <_vfiprintf_r+0x4c>
 8009b14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b16:	f000 fb84 	bl	800a222 <__retarget_lock_release_recursive>
 8009b1a:	e7e9      	b.n	8009af0 <_vfiprintf_r+0x4c>
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b20:	2320      	movs	r3, #32
 8009b22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b26:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b2a:	2330      	movs	r3, #48	; 0x30
 8009b2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009cf0 <_vfiprintf_r+0x24c>
 8009b30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b34:	f04f 0901 	mov.w	r9, #1
 8009b38:	4623      	mov	r3, r4
 8009b3a:	469a      	mov	sl, r3
 8009b3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b40:	b10a      	cbz	r2, 8009b46 <_vfiprintf_r+0xa2>
 8009b42:	2a25      	cmp	r2, #37	; 0x25
 8009b44:	d1f9      	bne.n	8009b3a <_vfiprintf_r+0x96>
 8009b46:	ebba 0b04 	subs.w	fp, sl, r4
 8009b4a:	d00b      	beq.n	8009b64 <_vfiprintf_r+0xc0>
 8009b4c:	465b      	mov	r3, fp
 8009b4e:	4622      	mov	r2, r4
 8009b50:	4629      	mov	r1, r5
 8009b52:	4630      	mov	r0, r6
 8009b54:	f7ff ff93 	bl	8009a7e <__sfputs_r>
 8009b58:	3001      	adds	r0, #1
 8009b5a:	f000 80aa 	beq.w	8009cb2 <_vfiprintf_r+0x20e>
 8009b5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b60:	445a      	add	r2, fp
 8009b62:	9209      	str	r2, [sp, #36]	; 0x24
 8009b64:	f89a 3000 	ldrb.w	r3, [sl]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f000 80a2 	beq.w	8009cb2 <_vfiprintf_r+0x20e>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	f04f 32ff 	mov.w	r2, #4294967295
 8009b74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b78:	f10a 0a01 	add.w	sl, sl, #1
 8009b7c:	9304      	str	r3, [sp, #16]
 8009b7e:	9307      	str	r3, [sp, #28]
 8009b80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b84:	931a      	str	r3, [sp, #104]	; 0x68
 8009b86:	4654      	mov	r4, sl
 8009b88:	2205      	movs	r2, #5
 8009b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b8e:	4858      	ldr	r0, [pc, #352]	; (8009cf0 <_vfiprintf_r+0x24c>)
 8009b90:	f7f6 fb26 	bl	80001e0 <memchr>
 8009b94:	9a04      	ldr	r2, [sp, #16]
 8009b96:	b9d8      	cbnz	r0, 8009bd0 <_vfiprintf_r+0x12c>
 8009b98:	06d1      	lsls	r1, r2, #27
 8009b9a:	bf44      	itt	mi
 8009b9c:	2320      	movmi	r3, #32
 8009b9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ba2:	0713      	lsls	r3, r2, #28
 8009ba4:	bf44      	itt	mi
 8009ba6:	232b      	movmi	r3, #43	; 0x2b
 8009ba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bac:	f89a 3000 	ldrb.w	r3, [sl]
 8009bb0:	2b2a      	cmp	r3, #42	; 0x2a
 8009bb2:	d015      	beq.n	8009be0 <_vfiprintf_r+0x13c>
 8009bb4:	9a07      	ldr	r2, [sp, #28]
 8009bb6:	4654      	mov	r4, sl
 8009bb8:	2000      	movs	r0, #0
 8009bba:	f04f 0c0a 	mov.w	ip, #10
 8009bbe:	4621      	mov	r1, r4
 8009bc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bc4:	3b30      	subs	r3, #48	; 0x30
 8009bc6:	2b09      	cmp	r3, #9
 8009bc8:	d94e      	bls.n	8009c68 <_vfiprintf_r+0x1c4>
 8009bca:	b1b0      	cbz	r0, 8009bfa <_vfiprintf_r+0x156>
 8009bcc:	9207      	str	r2, [sp, #28]
 8009bce:	e014      	b.n	8009bfa <_vfiprintf_r+0x156>
 8009bd0:	eba0 0308 	sub.w	r3, r0, r8
 8009bd4:	fa09 f303 	lsl.w	r3, r9, r3
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	9304      	str	r3, [sp, #16]
 8009bdc:	46a2      	mov	sl, r4
 8009bde:	e7d2      	b.n	8009b86 <_vfiprintf_r+0xe2>
 8009be0:	9b03      	ldr	r3, [sp, #12]
 8009be2:	1d19      	adds	r1, r3, #4
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	9103      	str	r1, [sp, #12]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	bfbb      	ittet	lt
 8009bec:	425b      	neglt	r3, r3
 8009bee:	f042 0202 	orrlt.w	r2, r2, #2
 8009bf2:	9307      	strge	r3, [sp, #28]
 8009bf4:	9307      	strlt	r3, [sp, #28]
 8009bf6:	bfb8      	it	lt
 8009bf8:	9204      	strlt	r2, [sp, #16]
 8009bfa:	7823      	ldrb	r3, [r4, #0]
 8009bfc:	2b2e      	cmp	r3, #46	; 0x2e
 8009bfe:	d10c      	bne.n	8009c1a <_vfiprintf_r+0x176>
 8009c00:	7863      	ldrb	r3, [r4, #1]
 8009c02:	2b2a      	cmp	r3, #42	; 0x2a
 8009c04:	d135      	bne.n	8009c72 <_vfiprintf_r+0x1ce>
 8009c06:	9b03      	ldr	r3, [sp, #12]
 8009c08:	1d1a      	adds	r2, r3, #4
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	9203      	str	r2, [sp, #12]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	bfb8      	it	lt
 8009c12:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c16:	3402      	adds	r4, #2
 8009c18:	9305      	str	r3, [sp, #20]
 8009c1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009d00 <_vfiprintf_r+0x25c>
 8009c1e:	7821      	ldrb	r1, [r4, #0]
 8009c20:	2203      	movs	r2, #3
 8009c22:	4650      	mov	r0, sl
 8009c24:	f7f6 fadc 	bl	80001e0 <memchr>
 8009c28:	b140      	cbz	r0, 8009c3c <_vfiprintf_r+0x198>
 8009c2a:	2340      	movs	r3, #64	; 0x40
 8009c2c:	eba0 000a 	sub.w	r0, r0, sl
 8009c30:	fa03 f000 	lsl.w	r0, r3, r0
 8009c34:	9b04      	ldr	r3, [sp, #16]
 8009c36:	4303      	orrs	r3, r0
 8009c38:	3401      	adds	r4, #1
 8009c3a:	9304      	str	r3, [sp, #16]
 8009c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c40:	482c      	ldr	r0, [pc, #176]	; (8009cf4 <_vfiprintf_r+0x250>)
 8009c42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c46:	2206      	movs	r2, #6
 8009c48:	f7f6 faca 	bl	80001e0 <memchr>
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	d03f      	beq.n	8009cd0 <_vfiprintf_r+0x22c>
 8009c50:	4b29      	ldr	r3, [pc, #164]	; (8009cf8 <_vfiprintf_r+0x254>)
 8009c52:	bb1b      	cbnz	r3, 8009c9c <_vfiprintf_r+0x1f8>
 8009c54:	9b03      	ldr	r3, [sp, #12]
 8009c56:	3307      	adds	r3, #7
 8009c58:	f023 0307 	bic.w	r3, r3, #7
 8009c5c:	3308      	adds	r3, #8
 8009c5e:	9303      	str	r3, [sp, #12]
 8009c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c62:	443b      	add	r3, r7
 8009c64:	9309      	str	r3, [sp, #36]	; 0x24
 8009c66:	e767      	b.n	8009b38 <_vfiprintf_r+0x94>
 8009c68:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c6c:	460c      	mov	r4, r1
 8009c6e:	2001      	movs	r0, #1
 8009c70:	e7a5      	b.n	8009bbe <_vfiprintf_r+0x11a>
 8009c72:	2300      	movs	r3, #0
 8009c74:	3401      	adds	r4, #1
 8009c76:	9305      	str	r3, [sp, #20]
 8009c78:	4619      	mov	r1, r3
 8009c7a:	f04f 0c0a 	mov.w	ip, #10
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c84:	3a30      	subs	r2, #48	; 0x30
 8009c86:	2a09      	cmp	r2, #9
 8009c88:	d903      	bls.n	8009c92 <_vfiprintf_r+0x1ee>
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d0c5      	beq.n	8009c1a <_vfiprintf_r+0x176>
 8009c8e:	9105      	str	r1, [sp, #20]
 8009c90:	e7c3      	b.n	8009c1a <_vfiprintf_r+0x176>
 8009c92:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c96:	4604      	mov	r4, r0
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e7f0      	b.n	8009c7e <_vfiprintf_r+0x1da>
 8009c9c:	ab03      	add	r3, sp, #12
 8009c9e:	9300      	str	r3, [sp, #0]
 8009ca0:	462a      	mov	r2, r5
 8009ca2:	4b16      	ldr	r3, [pc, #88]	; (8009cfc <_vfiprintf_r+0x258>)
 8009ca4:	a904      	add	r1, sp, #16
 8009ca6:	4630      	mov	r0, r6
 8009ca8:	f7fd ff9a 	bl	8007be0 <_printf_float>
 8009cac:	4607      	mov	r7, r0
 8009cae:	1c78      	adds	r0, r7, #1
 8009cb0:	d1d6      	bne.n	8009c60 <_vfiprintf_r+0x1bc>
 8009cb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cb4:	07d9      	lsls	r1, r3, #31
 8009cb6:	d405      	bmi.n	8009cc4 <_vfiprintf_r+0x220>
 8009cb8:	89ab      	ldrh	r3, [r5, #12]
 8009cba:	059a      	lsls	r2, r3, #22
 8009cbc:	d402      	bmi.n	8009cc4 <_vfiprintf_r+0x220>
 8009cbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cc0:	f000 faaf 	bl	800a222 <__retarget_lock_release_recursive>
 8009cc4:	89ab      	ldrh	r3, [r5, #12]
 8009cc6:	065b      	lsls	r3, r3, #25
 8009cc8:	f53f af12 	bmi.w	8009af0 <_vfiprintf_r+0x4c>
 8009ccc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cce:	e711      	b.n	8009af4 <_vfiprintf_r+0x50>
 8009cd0:	ab03      	add	r3, sp, #12
 8009cd2:	9300      	str	r3, [sp, #0]
 8009cd4:	462a      	mov	r2, r5
 8009cd6:	4b09      	ldr	r3, [pc, #36]	; (8009cfc <_vfiprintf_r+0x258>)
 8009cd8:	a904      	add	r1, sp, #16
 8009cda:	4630      	mov	r0, r6
 8009cdc:	f7fe fa24 	bl	8008128 <_printf_i>
 8009ce0:	e7e4      	b.n	8009cac <_vfiprintf_r+0x208>
 8009ce2:	bf00      	nop
 8009ce4:	0800a8d4 	.word	0x0800a8d4
 8009ce8:	0800a8f4 	.word	0x0800a8f4
 8009cec:	0800a8b4 	.word	0x0800a8b4
 8009cf0:	0800a7a2 	.word	0x0800a7a2
 8009cf4:	0800a7ac 	.word	0x0800a7ac
 8009cf8:	08007be1 	.word	0x08007be1
 8009cfc:	08009a7f 	.word	0x08009a7f
 8009d00:	0800a7a8 	.word	0x0800a7a8

08009d04 <__swbuf_r>:
 8009d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d06:	460e      	mov	r6, r1
 8009d08:	4614      	mov	r4, r2
 8009d0a:	4605      	mov	r5, r0
 8009d0c:	b118      	cbz	r0, 8009d16 <__swbuf_r+0x12>
 8009d0e:	6983      	ldr	r3, [r0, #24]
 8009d10:	b90b      	cbnz	r3, 8009d16 <__swbuf_r+0x12>
 8009d12:	f000 f9e7 	bl	800a0e4 <__sinit>
 8009d16:	4b21      	ldr	r3, [pc, #132]	; (8009d9c <__swbuf_r+0x98>)
 8009d18:	429c      	cmp	r4, r3
 8009d1a:	d12b      	bne.n	8009d74 <__swbuf_r+0x70>
 8009d1c:	686c      	ldr	r4, [r5, #4]
 8009d1e:	69a3      	ldr	r3, [r4, #24]
 8009d20:	60a3      	str	r3, [r4, #8]
 8009d22:	89a3      	ldrh	r3, [r4, #12]
 8009d24:	071a      	lsls	r2, r3, #28
 8009d26:	d52f      	bpl.n	8009d88 <__swbuf_r+0x84>
 8009d28:	6923      	ldr	r3, [r4, #16]
 8009d2a:	b36b      	cbz	r3, 8009d88 <__swbuf_r+0x84>
 8009d2c:	6923      	ldr	r3, [r4, #16]
 8009d2e:	6820      	ldr	r0, [r4, #0]
 8009d30:	1ac0      	subs	r0, r0, r3
 8009d32:	6963      	ldr	r3, [r4, #20]
 8009d34:	b2f6      	uxtb	r6, r6
 8009d36:	4283      	cmp	r3, r0
 8009d38:	4637      	mov	r7, r6
 8009d3a:	dc04      	bgt.n	8009d46 <__swbuf_r+0x42>
 8009d3c:	4621      	mov	r1, r4
 8009d3e:	4628      	mov	r0, r5
 8009d40:	f000 f93c 	bl	8009fbc <_fflush_r>
 8009d44:	bb30      	cbnz	r0, 8009d94 <__swbuf_r+0x90>
 8009d46:	68a3      	ldr	r3, [r4, #8]
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	60a3      	str	r3, [r4, #8]
 8009d4c:	6823      	ldr	r3, [r4, #0]
 8009d4e:	1c5a      	adds	r2, r3, #1
 8009d50:	6022      	str	r2, [r4, #0]
 8009d52:	701e      	strb	r6, [r3, #0]
 8009d54:	6963      	ldr	r3, [r4, #20]
 8009d56:	3001      	adds	r0, #1
 8009d58:	4283      	cmp	r3, r0
 8009d5a:	d004      	beq.n	8009d66 <__swbuf_r+0x62>
 8009d5c:	89a3      	ldrh	r3, [r4, #12]
 8009d5e:	07db      	lsls	r3, r3, #31
 8009d60:	d506      	bpl.n	8009d70 <__swbuf_r+0x6c>
 8009d62:	2e0a      	cmp	r6, #10
 8009d64:	d104      	bne.n	8009d70 <__swbuf_r+0x6c>
 8009d66:	4621      	mov	r1, r4
 8009d68:	4628      	mov	r0, r5
 8009d6a:	f000 f927 	bl	8009fbc <_fflush_r>
 8009d6e:	b988      	cbnz	r0, 8009d94 <__swbuf_r+0x90>
 8009d70:	4638      	mov	r0, r7
 8009d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d74:	4b0a      	ldr	r3, [pc, #40]	; (8009da0 <__swbuf_r+0x9c>)
 8009d76:	429c      	cmp	r4, r3
 8009d78:	d101      	bne.n	8009d7e <__swbuf_r+0x7a>
 8009d7a:	68ac      	ldr	r4, [r5, #8]
 8009d7c:	e7cf      	b.n	8009d1e <__swbuf_r+0x1a>
 8009d7e:	4b09      	ldr	r3, [pc, #36]	; (8009da4 <__swbuf_r+0xa0>)
 8009d80:	429c      	cmp	r4, r3
 8009d82:	bf08      	it	eq
 8009d84:	68ec      	ldreq	r4, [r5, #12]
 8009d86:	e7ca      	b.n	8009d1e <__swbuf_r+0x1a>
 8009d88:	4621      	mov	r1, r4
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	f000 f81a 	bl	8009dc4 <__swsetup_r>
 8009d90:	2800      	cmp	r0, #0
 8009d92:	d0cb      	beq.n	8009d2c <__swbuf_r+0x28>
 8009d94:	f04f 37ff 	mov.w	r7, #4294967295
 8009d98:	e7ea      	b.n	8009d70 <__swbuf_r+0x6c>
 8009d9a:	bf00      	nop
 8009d9c:	0800a8d4 	.word	0x0800a8d4
 8009da0:	0800a8f4 	.word	0x0800a8f4
 8009da4:	0800a8b4 	.word	0x0800a8b4

08009da8 <__ascii_wctomb>:
 8009da8:	b149      	cbz	r1, 8009dbe <__ascii_wctomb+0x16>
 8009daa:	2aff      	cmp	r2, #255	; 0xff
 8009dac:	bf85      	ittet	hi
 8009dae:	238a      	movhi	r3, #138	; 0x8a
 8009db0:	6003      	strhi	r3, [r0, #0]
 8009db2:	700a      	strbls	r2, [r1, #0]
 8009db4:	f04f 30ff 	movhi.w	r0, #4294967295
 8009db8:	bf98      	it	ls
 8009dba:	2001      	movls	r0, #1
 8009dbc:	4770      	bx	lr
 8009dbe:	4608      	mov	r0, r1
 8009dc0:	4770      	bx	lr
	...

08009dc4 <__swsetup_r>:
 8009dc4:	4b32      	ldr	r3, [pc, #200]	; (8009e90 <__swsetup_r+0xcc>)
 8009dc6:	b570      	push	{r4, r5, r6, lr}
 8009dc8:	681d      	ldr	r5, [r3, #0]
 8009dca:	4606      	mov	r6, r0
 8009dcc:	460c      	mov	r4, r1
 8009dce:	b125      	cbz	r5, 8009dda <__swsetup_r+0x16>
 8009dd0:	69ab      	ldr	r3, [r5, #24]
 8009dd2:	b913      	cbnz	r3, 8009dda <__swsetup_r+0x16>
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	f000 f985 	bl	800a0e4 <__sinit>
 8009dda:	4b2e      	ldr	r3, [pc, #184]	; (8009e94 <__swsetup_r+0xd0>)
 8009ddc:	429c      	cmp	r4, r3
 8009dde:	d10f      	bne.n	8009e00 <__swsetup_r+0x3c>
 8009de0:	686c      	ldr	r4, [r5, #4]
 8009de2:	89a3      	ldrh	r3, [r4, #12]
 8009de4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009de8:	0719      	lsls	r1, r3, #28
 8009dea:	d42c      	bmi.n	8009e46 <__swsetup_r+0x82>
 8009dec:	06dd      	lsls	r5, r3, #27
 8009dee:	d411      	bmi.n	8009e14 <__swsetup_r+0x50>
 8009df0:	2309      	movs	r3, #9
 8009df2:	6033      	str	r3, [r6, #0]
 8009df4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009df8:	81a3      	strh	r3, [r4, #12]
 8009dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8009dfe:	e03e      	b.n	8009e7e <__swsetup_r+0xba>
 8009e00:	4b25      	ldr	r3, [pc, #148]	; (8009e98 <__swsetup_r+0xd4>)
 8009e02:	429c      	cmp	r4, r3
 8009e04:	d101      	bne.n	8009e0a <__swsetup_r+0x46>
 8009e06:	68ac      	ldr	r4, [r5, #8]
 8009e08:	e7eb      	b.n	8009de2 <__swsetup_r+0x1e>
 8009e0a:	4b24      	ldr	r3, [pc, #144]	; (8009e9c <__swsetup_r+0xd8>)
 8009e0c:	429c      	cmp	r4, r3
 8009e0e:	bf08      	it	eq
 8009e10:	68ec      	ldreq	r4, [r5, #12]
 8009e12:	e7e6      	b.n	8009de2 <__swsetup_r+0x1e>
 8009e14:	0758      	lsls	r0, r3, #29
 8009e16:	d512      	bpl.n	8009e3e <__swsetup_r+0x7a>
 8009e18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e1a:	b141      	cbz	r1, 8009e2e <__swsetup_r+0x6a>
 8009e1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e20:	4299      	cmp	r1, r3
 8009e22:	d002      	beq.n	8009e2a <__swsetup_r+0x66>
 8009e24:	4630      	mov	r0, r6
 8009e26:	f7ff fcd5 	bl	80097d4 <_free_r>
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	6363      	str	r3, [r4, #52]	; 0x34
 8009e2e:	89a3      	ldrh	r3, [r4, #12]
 8009e30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e34:	81a3      	strh	r3, [r4, #12]
 8009e36:	2300      	movs	r3, #0
 8009e38:	6063      	str	r3, [r4, #4]
 8009e3a:	6923      	ldr	r3, [r4, #16]
 8009e3c:	6023      	str	r3, [r4, #0]
 8009e3e:	89a3      	ldrh	r3, [r4, #12]
 8009e40:	f043 0308 	orr.w	r3, r3, #8
 8009e44:	81a3      	strh	r3, [r4, #12]
 8009e46:	6923      	ldr	r3, [r4, #16]
 8009e48:	b94b      	cbnz	r3, 8009e5e <__swsetup_r+0x9a>
 8009e4a:	89a3      	ldrh	r3, [r4, #12]
 8009e4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e54:	d003      	beq.n	8009e5e <__swsetup_r+0x9a>
 8009e56:	4621      	mov	r1, r4
 8009e58:	4630      	mov	r0, r6
 8009e5a:	f000 fa09 	bl	800a270 <__smakebuf_r>
 8009e5e:	89a0      	ldrh	r0, [r4, #12]
 8009e60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e64:	f010 0301 	ands.w	r3, r0, #1
 8009e68:	d00a      	beq.n	8009e80 <__swsetup_r+0xbc>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	60a3      	str	r3, [r4, #8]
 8009e6e:	6963      	ldr	r3, [r4, #20]
 8009e70:	425b      	negs	r3, r3
 8009e72:	61a3      	str	r3, [r4, #24]
 8009e74:	6923      	ldr	r3, [r4, #16]
 8009e76:	b943      	cbnz	r3, 8009e8a <__swsetup_r+0xc6>
 8009e78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e7c:	d1ba      	bne.n	8009df4 <__swsetup_r+0x30>
 8009e7e:	bd70      	pop	{r4, r5, r6, pc}
 8009e80:	0781      	lsls	r1, r0, #30
 8009e82:	bf58      	it	pl
 8009e84:	6963      	ldrpl	r3, [r4, #20]
 8009e86:	60a3      	str	r3, [r4, #8]
 8009e88:	e7f4      	b.n	8009e74 <__swsetup_r+0xb0>
 8009e8a:	2000      	movs	r0, #0
 8009e8c:	e7f7      	b.n	8009e7e <__swsetup_r+0xba>
 8009e8e:	bf00      	nop
 8009e90:	2000000c 	.word	0x2000000c
 8009e94:	0800a8d4 	.word	0x0800a8d4
 8009e98:	0800a8f4 	.word	0x0800a8f4
 8009e9c:	0800a8b4 	.word	0x0800a8b4

08009ea0 <abort>:
 8009ea0:	b508      	push	{r3, lr}
 8009ea2:	2006      	movs	r0, #6
 8009ea4:	f000 fa4c 	bl	800a340 <raise>
 8009ea8:	2001      	movs	r0, #1
 8009eaa:	f7f7 fd0f 	bl	80018cc <_exit>
	...

08009eb0 <__sflush_r>:
 8009eb0:	898a      	ldrh	r2, [r1, #12]
 8009eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eb6:	4605      	mov	r5, r0
 8009eb8:	0710      	lsls	r0, r2, #28
 8009eba:	460c      	mov	r4, r1
 8009ebc:	d458      	bmi.n	8009f70 <__sflush_r+0xc0>
 8009ebe:	684b      	ldr	r3, [r1, #4]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	dc05      	bgt.n	8009ed0 <__sflush_r+0x20>
 8009ec4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	dc02      	bgt.n	8009ed0 <__sflush_r+0x20>
 8009eca:	2000      	movs	r0, #0
 8009ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ed0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ed2:	2e00      	cmp	r6, #0
 8009ed4:	d0f9      	beq.n	8009eca <__sflush_r+0x1a>
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009edc:	682f      	ldr	r7, [r5, #0]
 8009ede:	602b      	str	r3, [r5, #0]
 8009ee0:	d032      	beq.n	8009f48 <__sflush_r+0x98>
 8009ee2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ee4:	89a3      	ldrh	r3, [r4, #12]
 8009ee6:	075a      	lsls	r2, r3, #29
 8009ee8:	d505      	bpl.n	8009ef6 <__sflush_r+0x46>
 8009eea:	6863      	ldr	r3, [r4, #4]
 8009eec:	1ac0      	subs	r0, r0, r3
 8009eee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ef0:	b10b      	cbz	r3, 8009ef6 <__sflush_r+0x46>
 8009ef2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ef4:	1ac0      	subs	r0, r0, r3
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	4602      	mov	r2, r0
 8009efa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009efc:	6a21      	ldr	r1, [r4, #32]
 8009efe:	4628      	mov	r0, r5
 8009f00:	47b0      	blx	r6
 8009f02:	1c43      	adds	r3, r0, #1
 8009f04:	89a3      	ldrh	r3, [r4, #12]
 8009f06:	d106      	bne.n	8009f16 <__sflush_r+0x66>
 8009f08:	6829      	ldr	r1, [r5, #0]
 8009f0a:	291d      	cmp	r1, #29
 8009f0c:	d82c      	bhi.n	8009f68 <__sflush_r+0xb8>
 8009f0e:	4a2a      	ldr	r2, [pc, #168]	; (8009fb8 <__sflush_r+0x108>)
 8009f10:	40ca      	lsrs	r2, r1
 8009f12:	07d6      	lsls	r6, r2, #31
 8009f14:	d528      	bpl.n	8009f68 <__sflush_r+0xb8>
 8009f16:	2200      	movs	r2, #0
 8009f18:	6062      	str	r2, [r4, #4]
 8009f1a:	04d9      	lsls	r1, r3, #19
 8009f1c:	6922      	ldr	r2, [r4, #16]
 8009f1e:	6022      	str	r2, [r4, #0]
 8009f20:	d504      	bpl.n	8009f2c <__sflush_r+0x7c>
 8009f22:	1c42      	adds	r2, r0, #1
 8009f24:	d101      	bne.n	8009f2a <__sflush_r+0x7a>
 8009f26:	682b      	ldr	r3, [r5, #0]
 8009f28:	b903      	cbnz	r3, 8009f2c <__sflush_r+0x7c>
 8009f2a:	6560      	str	r0, [r4, #84]	; 0x54
 8009f2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f2e:	602f      	str	r7, [r5, #0]
 8009f30:	2900      	cmp	r1, #0
 8009f32:	d0ca      	beq.n	8009eca <__sflush_r+0x1a>
 8009f34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f38:	4299      	cmp	r1, r3
 8009f3a:	d002      	beq.n	8009f42 <__sflush_r+0x92>
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	f7ff fc49 	bl	80097d4 <_free_r>
 8009f42:	2000      	movs	r0, #0
 8009f44:	6360      	str	r0, [r4, #52]	; 0x34
 8009f46:	e7c1      	b.n	8009ecc <__sflush_r+0x1c>
 8009f48:	6a21      	ldr	r1, [r4, #32]
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	47b0      	blx	r6
 8009f50:	1c41      	adds	r1, r0, #1
 8009f52:	d1c7      	bne.n	8009ee4 <__sflush_r+0x34>
 8009f54:	682b      	ldr	r3, [r5, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d0c4      	beq.n	8009ee4 <__sflush_r+0x34>
 8009f5a:	2b1d      	cmp	r3, #29
 8009f5c:	d001      	beq.n	8009f62 <__sflush_r+0xb2>
 8009f5e:	2b16      	cmp	r3, #22
 8009f60:	d101      	bne.n	8009f66 <__sflush_r+0xb6>
 8009f62:	602f      	str	r7, [r5, #0]
 8009f64:	e7b1      	b.n	8009eca <__sflush_r+0x1a>
 8009f66:	89a3      	ldrh	r3, [r4, #12]
 8009f68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f6c:	81a3      	strh	r3, [r4, #12]
 8009f6e:	e7ad      	b.n	8009ecc <__sflush_r+0x1c>
 8009f70:	690f      	ldr	r7, [r1, #16]
 8009f72:	2f00      	cmp	r7, #0
 8009f74:	d0a9      	beq.n	8009eca <__sflush_r+0x1a>
 8009f76:	0793      	lsls	r3, r2, #30
 8009f78:	680e      	ldr	r6, [r1, #0]
 8009f7a:	bf08      	it	eq
 8009f7c:	694b      	ldreq	r3, [r1, #20]
 8009f7e:	600f      	str	r7, [r1, #0]
 8009f80:	bf18      	it	ne
 8009f82:	2300      	movne	r3, #0
 8009f84:	eba6 0807 	sub.w	r8, r6, r7
 8009f88:	608b      	str	r3, [r1, #8]
 8009f8a:	f1b8 0f00 	cmp.w	r8, #0
 8009f8e:	dd9c      	ble.n	8009eca <__sflush_r+0x1a>
 8009f90:	6a21      	ldr	r1, [r4, #32]
 8009f92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f94:	4643      	mov	r3, r8
 8009f96:	463a      	mov	r2, r7
 8009f98:	4628      	mov	r0, r5
 8009f9a:	47b0      	blx	r6
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	dc06      	bgt.n	8009fae <__sflush_r+0xfe>
 8009fa0:	89a3      	ldrh	r3, [r4, #12]
 8009fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fa6:	81a3      	strh	r3, [r4, #12]
 8009fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fac:	e78e      	b.n	8009ecc <__sflush_r+0x1c>
 8009fae:	4407      	add	r7, r0
 8009fb0:	eba8 0800 	sub.w	r8, r8, r0
 8009fb4:	e7e9      	b.n	8009f8a <__sflush_r+0xda>
 8009fb6:	bf00      	nop
 8009fb8:	20400001 	.word	0x20400001

08009fbc <_fflush_r>:
 8009fbc:	b538      	push	{r3, r4, r5, lr}
 8009fbe:	690b      	ldr	r3, [r1, #16]
 8009fc0:	4605      	mov	r5, r0
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	b913      	cbnz	r3, 8009fcc <_fflush_r+0x10>
 8009fc6:	2500      	movs	r5, #0
 8009fc8:	4628      	mov	r0, r5
 8009fca:	bd38      	pop	{r3, r4, r5, pc}
 8009fcc:	b118      	cbz	r0, 8009fd6 <_fflush_r+0x1a>
 8009fce:	6983      	ldr	r3, [r0, #24]
 8009fd0:	b90b      	cbnz	r3, 8009fd6 <_fflush_r+0x1a>
 8009fd2:	f000 f887 	bl	800a0e4 <__sinit>
 8009fd6:	4b14      	ldr	r3, [pc, #80]	; (800a028 <_fflush_r+0x6c>)
 8009fd8:	429c      	cmp	r4, r3
 8009fda:	d11b      	bne.n	800a014 <_fflush_r+0x58>
 8009fdc:	686c      	ldr	r4, [r5, #4]
 8009fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d0ef      	beq.n	8009fc6 <_fflush_r+0xa>
 8009fe6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009fe8:	07d0      	lsls	r0, r2, #31
 8009fea:	d404      	bmi.n	8009ff6 <_fflush_r+0x3a>
 8009fec:	0599      	lsls	r1, r3, #22
 8009fee:	d402      	bmi.n	8009ff6 <_fflush_r+0x3a>
 8009ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ff2:	f000 f915 	bl	800a220 <__retarget_lock_acquire_recursive>
 8009ff6:	4628      	mov	r0, r5
 8009ff8:	4621      	mov	r1, r4
 8009ffa:	f7ff ff59 	bl	8009eb0 <__sflush_r>
 8009ffe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a000:	07da      	lsls	r2, r3, #31
 800a002:	4605      	mov	r5, r0
 800a004:	d4e0      	bmi.n	8009fc8 <_fflush_r+0xc>
 800a006:	89a3      	ldrh	r3, [r4, #12]
 800a008:	059b      	lsls	r3, r3, #22
 800a00a:	d4dd      	bmi.n	8009fc8 <_fflush_r+0xc>
 800a00c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a00e:	f000 f908 	bl	800a222 <__retarget_lock_release_recursive>
 800a012:	e7d9      	b.n	8009fc8 <_fflush_r+0xc>
 800a014:	4b05      	ldr	r3, [pc, #20]	; (800a02c <_fflush_r+0x70>)
 800a016:	429c      	cmp	r4, r3
 800a018:	d101      	bne.n	800a01e <_fflush_r+0x62>
 800a01a:	68ac      	ldr	r4, [r5, #8]
 800a01c:	e7df      	b.n	8009fde <_fflush_r+0x22>
 800a01e:	4b04      	ldr	r3, [pc, #16]	; (800a030 <_fflush_r+0x74>)
 800a020:	429c      	cmp	r4, r3
 800a022:	bf08      	it	eq
 800a024:	68ec      	ldreq	r4, [r5, #12]
 800a026:	e7da      	b.n	8009fde <_fflush_r+0x22>
 800a028:	0800a8d4 	.word	0x0800a8d4
 800a02c:	0800a8f4 	.word	0x0800a8f4
 800a030:	0800a8b4 	.word	0x0800a8b4

0800a034 <std>:
 800a034:	2300      	movs	r3, #0
 800a036:	b510      	push	{r4, lr}
 800a038:	4604      	mov	r4, r0
 800a03a:	e9c0 3300 	strd	r3, r3, [r0]
 800a03e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a042:	6083      	str	r3, [r0, #8]
 800a044:	8181      	strh	r1, [r0, #12]
 800a046:	6643      	str	r3, [r0, #100]	; 0x64
 800a048:	81c2      	strh	r2, [r0, #14]
 800a04a:	6183      	str	r3, [r0, #24]
 800a04c:	4619      	mov	r1, r3
 800a04e:	2208      	movs	r2, #8
 800a050:	305c      	adds	r0, #92	; 0x5c
 800a052:	f7fd fd1d 	bl	8007a90 <memset>
 800a056:	4b05      	ldr	r3, [pc, #20]	; (800a06c <std+0x38>)
 800a058:	6263      	str	r3, [r4, #36]	; 0x24
 800a05a:	4b05      	ldr	r3, [pc, #20]	; (800a070 <std+0x3c>)
 800a05c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a05e:	4b05      	ldr	r3, [pc, #20]	; (800a074 <std+0x40>)
 800a060:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a062:	4b05      	ldr	r3, [pc, #20]	; (800a078 <std+0x44>)
 800a064:	6224      	str	r4, [r4, #32]
 800a066:	6323      	str	r3, [r4, #48]	; 0x30
 800a068:	bd10      	pop	{r4, pc}
 800a06a:	bf00      	nop
 800a06c:	0800a379 	.word	0x0800a379
 800a070:	0800a39b 	.word	0x0800a39b
 800a074:	0800a3d3 	.word	0x0800a3d3
 800a078:	0800a3f7 	.word	0x0800a3f7

0800a07c <_cleanup_r>:
 800a07c:	4901      	ldr	r1, [pc, #4]	; (800a084 <_cleanup_r+0x8>)
 800a07e:	f000 b8af 	b.w	800a1e0 <_fwalk_reent>
 800a082:	bf00      	nop
 800a084:	08009fbd 	.word	0x08009fbd

0800a088 <__sfmoreglue>:
 800a088:	b570      	push	{r4, r5, r6, lr}
 800a08a:	2268      	movs	r2, #104	; 0x68
 800a08c:	1e4d      	subs	r5, r1, #1
 800a08e:	4355      	muls	r5, r2
 800a090:	460e      	mov	r6, r1
 800a092:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a096:	f7ff fc09 	bl	80098ac <_malloc_r>
 800a09a:	4604      	mov	r4, r0
 800a09c:	b140      	cbz	r0, 800a0b0 <__sfmoreglue+0x28>
 800a09e:	2100      	movs	r1, #0
 800a0a0:	e9c0 1600 	strd	r1, r6, [r0]
 800a0a4:	300c      	adds	r0, #12
 800a0a6:	60a0      	str	r0, [r4, #8]
 800a0a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a0ac:	f7fd fcf0 	bl	8007a90 <memset>
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	bd70      	pop	{r4, r5, r6, pc}

0800a0b4 <__sfp_lock_acquire>:
 800a0b4:	4801      	ldr	r0, [pc, #4]	; (800a0bc <__sfp_lock_acquire+0x8>)
 800a0b6:	f000 b8b3 	b.w	800a220 <__retarget_lock_acquire_recursive>
 800a0ba:	bf00      	nop
 800a0bc:	200003c9 	.word	0x200003c9

0800a0c0 <__sfp_lock_release>:
 800a0c0:	4801      	ldr	r0, [pc, #4]	; (800a0c8 <__sfp_lock_release+0x8>)
 800a0c2:	f000 b8ae 	b.w	800a222 <__retarget_lock_release_recursive>
 800a0c6:	bf00      	nop
 800a0c8:	200003c9 	.word	0x200003c9

0800a0cc <__sinit_lock_acquire>:
 800a0cc:	4801      	ldr	r0, [pc, #4]	; (800a0d4 <__sinit_lock_acquire+0x8>)
 800a0ce:	f000 b8a7 	b.w	800a220 <__retarget_lock_acquire_recursive>
 800a0d2:	bf00      	nop
 800a0d4:	200003ca 	.word	0x200003ca

0800a0d8 <__sinit_lock_release>:
 800a0d8:	4801      	ldr	r0, [pc, #4]	; (800a0e0 <__sinit_lock_release+0x8>)
 800a0da:	f000 b8a2 	b.w	800a222 <__retarget_lock_release_recursive>
 800a0de:	bf00      	nop
 800a0e0:	200003ca 	.word	0x200003ca

0800a0e4 <__sinit>:
 800a0e4:	b510      	push	{r4, lr}
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	f7ff fff0 	bl	800a0cc <__sinit_lock_acquire>
 800a0ec:	69a3      	ldr	r3, [r4, #24]
 800a0ee:	b11b      	cbz	r3, 800a0f8 <__sinit+0x14>
 800a0f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0f4:	f7ff bff0 	b.w	800a0d8 <__sinit_lock_release>
 800a0f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a0fc:	6523      	str	r3, [r4, #80]	; 0x50
 800a0fe:	4b13      	ldr	r3, [pc, #76]	; (800a14c <__sinit+0x68>)
 800a100:	4a13      	ldr	r2, [pc, #76]	; (800a150 <__sinit+0x6c>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	62a2      	str	r2, [r4, #40]	; 0x28
 800a106:	42a3      	cmp	r3, r4
 800a108:	bf04      	itt	eq
 800a10a:	2301      	moveq	r3, #1
 800a10c:	61a3      	streq	r3, [r4, #24]
 800a10e:	4620      	mov	r0, r4
 800a110:	f000 f820 	bl	800a154 <__sfp>
 800a114:	6060      	str	r0, [r4, #4]
 800a116:	4620      	mov	r0, r4
 800a118:	f000 f81c 	bl	800a154 <__sfp>
 800a11c:	60a0      	str	r0, [r4, #8]
 800a11e:	4620      	mov	r0, r4
 800a120:	f000 f818 	bl	800a154 <__sfp>
 800a124:	2200      	movs	r2, #0
 800a126:	60e0      	str	r0, [r4, #12]
 800a128:	2104      	movs	r1, #4
 800a12a:	6860      	ldr	r0, [r4, #4]
 800a12c:	f7ff ff82 	bl	800a034 <std>
 800a130:	68a0      	ldr	r0, [r4, #8]
 800a132:	2201      	movs	r2, #1
 800a134:	2109      	movs	r1, #9
 800a136:	f7ff ff7d 	bl	800a034 <std>
 800a13a:	68e0      	ldr	r0, [r4, #12]
 800a13c:	2202      	movs	r2, #2
 800a13e:	2112      	movs	r1, #18
 800a140:	f7ff ff78 	bl	800a034 <std>
 800a144:	2301      	movs	r3, #1
 800a146:	61a3      	str	r3, [r4, #24]
 800a148:	e7d2      	b.n	800a0f0 <__sinit+0xc>
 800a14a:	bf00      	nop
 800a14c:	0800a53c 	.word	0x0800a53c
 800a150:	0800a07d 	.word	0x0800a07d

0800a154 <__sfp>:
 800a154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a156:	4607      	mov	r7, r0
 800a158:	f7ff ffac 	bl	800a0b4 <__sfp_lock_acquire>
 800a15c:	4b1e      	ldr	r3, [pc, #120]	; (800a1d8 <__sfp+0x84>)
 800a15e:	681e      	ldr	r6, [r3, #0]
 800a160:	69b3      	ldr	r3, [r6, #24]
 800a162:	b913      	cbnz	r3, 800a16a <__sfp+0x16>
 800a164:	4630      	mov	r0, r6
 800a166:	f7ff ffbd 	bl	800a0e4 <__sinit>
 800a16a:	3648      	adds	r6, #72	; 0x48
 800a16c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a170:	3b01      	subs	r3, #1
 800a172:	d503      	bpl.n	800a17c <__sfp+0x28>
 800a174:	6833      	ldr	r3, [r6, #0]
 800a176:	b30b      	cbz	r3, 800a1bc <__sfp+0x68>
 800a178:	6836      	ldr	r6, [r6, #0]
 800a17a:	e7f7      	b.n	800a16c <__sfp+0x18>
 800a17c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a180:	b9d5      	cbnz	r5, 800a1b8 <__sfp+0x64>
 800a182:	4b16      	ldr	r3, [pc, #88]	; (800a1dc <__sfp+0x88>)
 800a184:	60e3      	str	r3, [r4, #12]
 800a186:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a18a:	6665      	str	r5, [r4, #100]	; 0x64
 800a18c:	f000 f847 	bl	800a21e <__retarget_lock_init_recursive>
 800a190:	f7ff ff96 	bl	800a0c0 <__sfp_lock_release>
 800a194:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a198:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a19c:	6025      	str	r5, [r4, #0]
 800a19e:	61a5      	str	r5, [r4, #24]
 800a1a0:	2208      	movs	r2, #8
 800a1a2:	4629      	mov	r1, r5
 800a1a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a1a8:	f7fd fc72 	bl	8007a90 <memset>
 800a1ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a1b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1b8:	3468      	adds	r4, #104	; 0x68
 800a1ba:	e7d9      	b.n	800a170 <__sfp+0x1c>
 800a1bc:	2104      	movs	r1, #4
 800a1be:	4638      	mov	r0, r7
 800a1c0:	f7ff ff62 	bl	800a088 <__sfmoreglue>
 800a1c4:	4604      	mov	r4, r0
 800a1c6:	6030      	str	r0, [r6, #0]
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	d1d5      	bne.n	800a178 <__sfp+0x24>
 800a1cc:	f7ff ff78 	bl	800a0c0 <__sfp_lock_release>
 800a1d0:	230c      	movs	r3, #12
 800a1d2:	603b      	str	r3, [r7, #0]
 800a1d4:	e7ee      	b.n	800a1b4 <__sfp+0x60>
 800a1d6:	bf00      	nop
 800a1d8:	0800a53c 	.word	0x0800a53c
 800a1dc:	ffff0001 	.word	0xffff0001

0800a1e0 <_fwalk_reent>:
 800a1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1e4:	4606      	mov	r6, r0
 800a1e6:	4688      	mov	r8, r1
 800a1e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a1ec:	2700      	movs	r7, #0
 800a1ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1f2:	f1b9 0901 	subs.w	r9, r9, #1
 800a1f6:	d505      	bpl.n	800a204 <_fwalk_reent+0x24>
 800a1f8:	6824      	ldr	r4, [r4, #0]
 800a1fa:	2c00      	cmp	r4, #0
 800a1fc:	d1f7      	bne.n	800a1ee <_fwalk_reent+0xe>
 800a1fe:	4638      	mov	r0, r7
 800a200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a204:	89ab      	ldrh	r3, [r5, #12]
 800a206:	2b01      	cmp	r3, #1
 800a208:	d907      	bls.n	800a21a <_fwalk_reent+0x3a>
 800a20a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a20e:	3301      	adds	r3, #1
 800a210:	d003      	beq.n	800a21a <_fwalk_reent+0x3a>
 800a212:	4629      	mov	r1, r5
 800a214:	4630      	mov	r0, r6
 800a216:	47c0      	blx	r8
 800a218:	4307      	orrs	r7, r0
 800a21a:	3568      	adds	r5, #104	; 0x68
 800a21c:	e7e9      	b.n	800a1f2 <_fwalk_reent+0x12>

0800a21e <__retarget_lock_init_recursive>:
 800a21e:	4770      	bx	lr

0800a220 <__retarget_lock_acquire_recursive>:
 800a220:	4770      	bx	lr

0800a222 <__retarget_lock_release_recursive>:
 800a222:	4770      	bx	lr

0800a224 <__swhatbuf_r>:
 800a224:	b570      	push	{r4, r5, r6, lr}
 800a226:	460e      	mov	r6, r1
 800a228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a22c:	2900      	cmp	r1, #0
 800a22e:	b096      	sub	sp, #88	; 0x58
 800a230:	4614      	mov	r4, r2
 800a232:	461d      	mov	r5, r3
 800a234:	da08      	bge.n	800a248 <__swhatbuf_r+0x24>
 800a236:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a23a:	2200      	movs	r2, #0
 800a23c:	602a      	str	r2, [r5, #0]
 800a23e:	061a      	lsls	r2, r3, #24
 800a240:	d410      	bmi.n	800a264 <__swhatbuf_r+0x40>
 800a242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a246:	e00e      	b.n	800a266 <__swhatbuf_r+0x42>
 800a248:	466a      	mov	r2, sp
 800a24a:	f000 f8fb 	bl	800a444 <_fstat_r>
 800a24e:	2800      	cmp	r0, #0
 800a250:	dbf1      	blt.n	800a236 <__swhatbuf_r+0x12>
 800a252:	9a01      	ldr	r2, [sp, #4]
 800a254:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a258:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a25c:	425a      	negs	r2, r3
 800a25e:	415a      	adcs	r2, r3
 800a260:	602a      	str	r2, [r5, #0]
 800a262:	e7ee      	b.n	800a242 <__swhatbuf_r+0x1e>
 800a264:	2340      	movs	r3, #64	; 0x40
 800a266:	2000      	movs	r0, #0
 800a268:	6023      	str	r3, [r4, #0]
 800a26a:	b016      	add	sp, #88	; 0x58
 800a26c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a270 <__smakebuf_r>:
 800a270:	898b      	ldrh	r3, [r1, #12]
 800a272:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a274:	079d      	lsls	r5, r3, #30
 800a276:	4606      	mov	r6, r0
 800a278:	460c      	mov	r4, r1
 800a27a:	d507      	bpl.n	800a28c <__smakebuf_r+0x1c>
 800a27c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a280:	6023      	str	r3, [r4, #0]
 800a282:	6123      	str	r3, [r4, #16]
 800a284:	2301      	movs	r3, #1
 800a286:	6163      	str	r3, [r4, #20]
 800a288:	b002      	add	sp, #8
 800a28a:	bd70      	pop	{r4, r5, r6, pc}
 800a28c:	ab01      	add	r3, sp, #4
 800a28e:	466a      	mov	r2, sp
 800a290:	f7ff ffc8 	bl	800a224 <__swhatbuf_r>
 800a294:	9900      	ldr	r1, [sp, #0]
 800a296:	4605      	mov	r5, r0
 800a298:	4630      	mov	r0, r6
 800a29a:	f7ff fb07 	bl	80098ac <_malloc_r>
 800a29e:	b948      	cbnz	r0, 800a2b4 <__smakebuf_r+0x44>
 800a2a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2a4:	059a      	lsls	r2, r3, #22
 800a2a6:	d4ef      	bmi.n	800a288 <__smakebuf_r+0x18>
 800a2a8:	f023 0303 	bic.w	r3, r3, #3
 800a2ac:	f043 0302 	orr.w	r3, r3, #2
 800a2b0:	81a3      	strh	r3, [r4, #12]
 800a2b2:	e7e3      	b.n	800a27c <__smakebuf_r+0xc>
 800a2b4:	4b0d      	ldr	r3, [pc, #52]	; (800a2ec <__smakebuf_r+0x7c>)
 800a2b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a2b8:	89a3      	ldrh	r3, [r4, #12]
 800a2ba:	6020      	str	r0, [r4, #0]
 800a2bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2c0:	81a3      	strh	r3, [r4, #12]
 800a2c2:	9b00      	ldr	r3, [sp, #0]
 800a2c4:	6163      	str	r3, [r4, #20]
 800a2c6:	9b01      	ldr	r3, [sp, #4]
 800a2c8:	6120      	str	r0, [r4, #16]
 800a2ca:	b15b      	cbz	r3, 800a2e4 <__smakebuf_r+0x74>
 800a2cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	f000 f8c9 	bl	800a468 <_isatty_r>
 800a2d6:	b128      	cbz	r0, 800a2e4 <__smakebuf_r+0x74>
 800a2d8:	89a3      	ldrh	r3, [r4, #12]
 800a2da:	f023 0303 	bic.w	r3, r3, #3
 800a2de:	f043 0301 	orr.w	r3, r3, #1
 800a2e2:	81a3      	strh	r3, [r4, #12]
 800a2e4:	89a0      	ldrh	r0, [r4, #12]
 800a2e6:	4305      	orrs	r5, r0
 800a2e8:	81a5      	strh	r5, [r4, #12]
 800a2ea:	e7cd      	b.n	800a288 <__smakebuf_r+0x18>
 800a2ec:	0800a07d 	.word	0x0800a07d

0800a2f0 <_raise_r>:
 800a2f0:	291f      	cmp	r1, #31
 800a2f2:	b538      	push	{r3, r4, r5, lr}
 800a2f4:	4604      	mov	r4, r0
 800a2f6:	460d      	mov	r5, r1
 800a2f8:	d904      	bls.n	800a304 <_raise_r+0x14>
 800a2fa:	2316      	movs	r3, #22
 800a2fc:	6003      	str	r3, [r0, #0]
 800a2fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a302:	bd38      	pop	{r3, r4, r5, pc}
 800a304:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a306:	b112      	cbz	r2, 800a30e <_raise_r+0x1e>
 800a308:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a30c:	b94b      	cbnz	r3, 800a322 <_raise_r+0x32>
 800a30e:	4620      	mov	r0, r4
 800a310:	f000 f830 	bl	800a374 <_getpid_r>
 800a314:	462a      	mov	r2, r5
 800a316:	4601      	mov	r1, r0
 800a318:	4620      	mov	r0, r4
 800a31a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a31e:	f000 b817 	b.w	800a350 <_kill_r>
 800a322:	2b01      	cmp	r3, #1
 800a324:	d00a      	beq.n	800a33c <_raise_r+0x4c>
 800a326:	1c59      	adds	r1, r3, #1
 800a328:	d103      	bne.n	800a332 <_raise_r+0x42>
 800a32a:	2316      	movs	r3, #22
 800a32c:	6003      	str	r3, [r0, #0]
 800a32e:	2001      	movs	r0, #1
 800a330:	e7e7      	b.n	800a302 <_raise_r+0x12>
 800a332:	2400      	movs	r4, #0
 800a334:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a338:	4628      	mov	r0, r5
 800a33a:	4798      	blx	r3
 800a33c:	2000      	movs	r0, #0
 800a33e:	e7e0      	b.n	800a302 <_raise_r+0x12>

0800a340 <raise>:
 800a340:	4b02      	ldr	r3, [pc, #8]	; (800a34c <raise+0xc>)
 800a342:	4601      	mov	r1, r0
 800a344:	6818      	ldr	r0, [r3, #0]
 800a346:	f7ff bfd3 	b.w	800a2f0 <_raise_r>
 800a34a:	bf00      	nop
 800a34c:	2000000c 	.word	0x2000000c

0800a350 <_kill_r>:
 800a350:	b538      	push	{r3, r4, r5, lr}
 800a352:	4d07      	ldr	r5, [pc, #28]	; (800a370 <_kill_r+0x20>)
 800a354:	2300      	movs	r3, #0
 800a356:	4604      	mov	r4, r0
 800a358:	4608      	mov	r0, r1
 800a35a:	4611      	mov	r1, r2
 800a35c:	602b      	str	r3, [r5, #0]
 800a35e:	f7f7 faa5 	bl	80018ac <_kill>
 800a362:	1c43      	adds	r3, r0, #1
 800a364:	d102      	bne.n	800a36c <_kill_r+0x1c>
 800a366:	682b      	ldr	r3, [r5, #0]
 800a368:	b103      	cbz	r3, 800a36c <_kill_r+0x1c>
 800a36a:	6023      	str	r3, [r4, #0]
 800a36c:	bd38      	pop	{r3, r4, r5, pc}
 800a36e:	bf00      	nop
 800a370:	200003c4 	.word	0x200003c4

0800a374 <_getpid_r>:
 800a374:	f7f7 ba92 	b.w	800189c <_getpid>

0800a378 <__sread>:
 800a378:	b510      	push	{r4, lr}
 800a37a:	460c      	mov	r4, r1
 800a37c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a380:	f000 f894 	bl	800a4ac <_read_r>
 800a384:	2800      	cmp	r0, #0
 800a386:	bfab      	itete	ge
 800a388:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a38a:	89a3      	ldrhlt	r3, [r4, #12]
 800a38c:	181b      	addge	r3, r3, r0
 800a38e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a392:	bfac      	ite	ge
 800a394:	6563      	strge	r3, [r4, #84]	; 0x54
 800a396:	81a3      	strhlt	r3, [r4, #12]
 800a398:	bd10      	pop	{r4, pc}

0800a39a <__swrite>:
 800a39a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a39e:	461f      	mov	r7, r3
 800a3a0:	898b      	ldrh	r3, [r1, #12]
 800a3a2:	05db      	lsls	r3, r3, #23
 800a3a4:	4605      	mov	r5, r0
 800a3a6:	460c      	mov	r4, r1
 800a3a8:	4616      	mov	r6, r2
 800a3aa:	d505      	bpl.n	800a3b8 <__swrite+0x1e>
 800a3ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3b0:	2302      	movs	r3, #2
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f000 f868 	bl	800a488 <_lseek_r>
 800a3b8:	89a3      	ldrh	r3, [r4, #12]
 800a3ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3c2:	81a3      	strh	r3, [r4, #12]
 800a3c4:	4632      	mov	r2, r6
 800a3c6:	463b      	mov	r3, r7
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ce:	f000 b817 	b.w	800a400 <_write_r>

0800a3d2 <__sseek>:
 800a3d2:	b510      	push	{r4, lr}
 800a3d4:	460c      	mov	r4, r1
 800a3d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3da:	f000 f855 	bl	800a488 <_lseek_r>
 800a3de:	1c43      	adds	r3, r0, #1
 800a3e0:	89a3      	ldrh	r3, [r4, #12]
 800a3e2:	bf15      	itete	ne
 800a3e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a3e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a3ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a3ee:	81a3      	strheq	r3, [r4, #12]
 800a3f0:	bf18      	it	ne
 800a3f2:	81a3      	strhne	r3, [r4, #12]
 800a3f4:	bd10      	pop	{r4, pc}

0800a3f6 <__sclose>:
 800a3f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3fa:	f000 b813 	b.w	800a424 <_close_r>
	...

0800a400 <_write_r>:
 800a400:	b538      	push	{r3, r4, r5, lr}
 800a402:	4d07      	ldr	r5, [pc, #28]	; (800a420 <_write_r+0x20>)
 800a404:	4604      	mov	r4, r0
 800a406:	4608      	mov	r0, r1
 800a408:	4611      	mov	r1, r2
 800a40a:	2200      	movs	r2, #0
 800a40c:	602a      	str	r2, [r5, #0]
 800a40e:	461a      	mov	r2, r3
 800a410:	f7f7 fa83 	bl	800191a <_write>
 800a414:	1c43      	adds	r3, r0, #1
 800a416:	d102      	bne.n	800a41e <_write_r+0x1e>
 800a418:	682b      	ldr	r3, [r5, #0]
 800a41a:	b103      	cbz	r3, 800a41e <_write_r+0x1e>
 800a41c:	6023      	str	r3, [r4, #0]
 800a41e:	bd38      	pop	{r3, r4, r5, pc}
 800a420:	200003c4 	.word	0x200003c4

0800a424 <_close_r>:
 800a424:	b538      	push	{r3, r4, r5, lr}
 800a426:	4d06      	ldr	r5, [pc, #24]	; (800a440 <_close_r+0x1c>)
 800a428:	2300      	movs	r3, #0
 800a42a:	4604      	mov	r4, r0
 800a42c:	4608      	mov	r0, r1
 800a42e:	602b      	str	r3, [r5, #0]
 800a430:	f7f7 fa8f 	bl	8001952 <_close>
 800a434:	1c43      	adds	r3, r0, #1
 800a436:	d102      	bne.n	800a43e <_close_r+0x1a>
 800a438:	682b      	ldr	r3, [r5, #0]
 800a43a:	b103      	cbz	r3, 800a43e <_close_r+0x1a>
 800a43c:	6023      	str	r3, [r4, #0]
 800a43e:	bd38      	pop	{r3, r4, r5, pc}
 800a440:	200003c4 	.word	0x200003c4

0800a444 <_fstat_r>:
 800a444:	b538      	push	{r3, r4, r5, lr}
 800a446:	4d07      	ldr	r5, [pc, #28]	; (800a464 <_fstat_r+0x20>)
 800a448:	2300      	movs	r3, #0
 800a44a:	4604      	mov	r4, r0
 800a44c:	4608      	mov	r0, r1
 800a44e:	4611      	mov	r1, r2
 800a450:	602b      	str	r3, [r5, #0]
 800a452:	f7f7 fa8a 	bl	800196a <_fstat>
 800a456:	1c43      	adds	r3, r0, #1
 800a458:	d102      	bne.n	800a460 <_fstat_r+0x1c>
 800a45a:	682b      	ldr	r3, [r5, #0]
 800a45c:	b103      	cbz	r3, 800a460 <_fstat_r+0x1c>
 800a45e:	6023      	str	r3, [r4, #0]
 800a460:	bd38      	pop	{r3, r4, r5, pc}
 800a462:	bf00      	nop
 800a464:	200003c4 	.word	0x200003c4

0800a468 <_isatty_r>:
 800a468:	b538      	push	{r3, r4, r5, lr}
 800a46a:	4d06      	ldr	r5, [pc, #24]	; (800a484 <_isatty_r+0x1c>)
 800a46c:	2300      	movs	r3, #0
 800a46e:	4604      	mov	r4, r0
 800a470:	4608      	mov	r0, r1
 800a472:	602b      	str	r3, [r5, #0]
 800a474:	f7f7 fa89 	bl	800198a <_isatty>
 800a478:	1c43      	adds	r3, r0, #1
 800a47a:	d102      	bne.n	800a482 <_isatty_r+0x1a>
 800a47c:	682b      	ldr	r3, [r5, #0]
 800a47e:	b103      	cbz	r3, 800a482 <_isatty_r+0x1a>
 800a480:	6023      	str	r3, [r4, #0]
 800a482:	bd38      	pop	{r3, r4, r5, pc}
 800a484:	200003c4 	.word	0x200003c4

0800a488 <_lseek_r>:
 800a488:	b538      	push	{r3, r4, r5, lr}
 800a48a:	4d07      	ldr	r5, [pc, #28]	; (800a4a8 <_lseek_r+0x20>)
 800a48c:	4604      	mov	r4, r0
 800a48e:	4608      	mov	r0, r1
 800a490:	4611      	mov	r1, r2
 800a492:	2200      	movs	r2, #0
 800a494:	602a      	str	r2, [r5, #0]
 800a496:	461a      	mov	r2, r3
 800a498:	f7f7 fa82 	bl	80019a0 <_lseek>
 800a49c:	1c43      	adds	r3, r0, #1
 800a49e:	d102      	bne.n	800a4a6 <_lseek_r+0x1e>
 800a4a0:	682b      	ldr	r3, [r5, #0]
 800a4a2:	b103      	cbz	r3, 800a4a6 <_lseek_r+0x1e>
 800a4a4:	6023      	str	r3, [r4, #0]
 800a4a6:	bd38      	pop	{r3, r4, r5, pc}
 800a4a8:	200003c4 	.word	0x200003c4

0800a4ac <_read_r>:
 800a4ac:	b538      	push	{r3, r4, r5, lr}
 800a4ae:	4d07      	ldr	r5, [pc, #28]	; (800a4cc <_read_r+0x20>)
 800a4b0:	4604      	mov	r4, r0
 800a4b2:	4608      	mov	r0, r1
 800a4b4:	4611      	mov	r1, r2
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	602a      	str	r2, [r5, #0]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	f7f7 fa10 	bl	80018e0 <_read>
 800a4c0:	1c43      	adds	r3, r0, #1
 800a4c2:	d102      	bne.n	800a4ca <_read_r+0x1e>
 800a4c4:	682b      	ldr	r3, [r5, #0]
 800a4c6:	b103      	cbz	r3, 800a4ca <_read_r+0x1e>
 800a4c8:	6023      	str	r3, [r4, #0]
 800a4ca:	bd38      	pop	{r3, r4, r5, pc}
 800a4cc:	200003c4 	.word	0x200003c4

0800a4d0 <_init>:
 800a4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4d2:	bf00      	nop
 800a4d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4d6:	bc08      	pop	{r3}
 800a4d8:	469e      	mov	lr, r3
 800a4da:	4770      	bx	lr

0800a4dc <_fini>:
 800a4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4de:	bf00      	nop
 800a4e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4e2:	bc08      	pop	{r3}
 800a4e4:	469e      	mov	lr, r3
 800a4e6:	4770      	bx	lr
